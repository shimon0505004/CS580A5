
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test001"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    Pawn pawn53 = new Pawn(chessBoard47, color51);
    Pawn pawn54 = new Pawn(chessBoard44, color51);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Bishop bishop59 = new Bishop(chessBoard55, color58);
    King king60 = new King(chessBoard44, color58);
    Bishop bishop61 = new Bishop(chessBoard33, color58);
    java.lang.String str62 = bishop61.toString();
    ChessPiece.Color color63 = bishop61.getColor();
    Pawn pawn64 = new Pawn(chessBoard0, color63);
    java.util.ArrayList arrayList65 = pawn64.legalMoves();
    // The following exception was thrown during execution in test generation
    try {
      pawn64.setPosition("\u2657");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "\u2657"+ "'", str62.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList65);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test002"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.util.ArrayList arrayList8 = bishop7.legalMoves();
    java.util.ArrayList arrayList9 = bishop7.legalMoves();
    java.util.ArrayList arrayList10 = bishop7.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test003"); }


    ChessBoard chessBoard0 = null;
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    chessBoard1.initialize();
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Pawn pawn26 = new Pawn(chessBoard24, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Pawn pawn33 = new Pawn(chessBoard27, color31);
    Pawn pawn34 = new Pawn(chessBoard24, color31);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Bishop bishop39 = new Bishop(chessBoard35, color38);
    King king40 = new King(chessBoard24, color38);
    Bishop bishop41 = new Bishop(chessBoard13, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Knight knight55 = new Knight(chessBoard53, color54);
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Bishop bishop57 = new Bishop(chessBoard53, color56);
    King king58 = new King(chessBoard42, color56);
    Knight knight59 = new Knight(chessBoard13, color56);
    Pawn pawn60 = new Pawn(chessBoard1, color56);
    ChessBoard chessBoard61 = new ChessBoard();
    ChessPiece.Color color62 = null;
    Pawn pawn63 = new Pawn(chessBoard61, color62);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessBoard chessBoard67 = null;
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Rook rook69 = new Rook(chessBoard67, color68);
    Pawn pawn70 = new Pawn(chessBoard64, color68);
    Pawn pawn71 = new Pawn(chessBoard61, color68);
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard61, color72);
    ChessBoard chessBoard74 = null;
    ChessPiece.Color color75 = ChessPiece.Color.WHITE;
    Rook rook76 = new Rook(chessBoard74, color75);
    Bishop bishop77 = new Bishop(chessBoard61, color75);
    Rook rook78 = new Rook(chessBoard1, color75);
    ChessBoard chessBoard79 = new ChessBoard();
    ChessPiece.Color color80 = null;
    Knight knight81 = new Knight(chessBoard79, color80);
    ChessBoard chessBoard82 = new ChessBoard();
    ChessPiece.Color color83 = null;
    Pawn pawn84 = new Pawn(chessBoard82, color83);
    ChessBoard chessBoard85 = new ChessBoard();
    ChessPiece.Color color86 = null;
    Knight knight87 = new Knight(chessBoard85, color86);
    ChessBoard chessBoard88 = null;
    ChessPiece.Color color89 = ChessPiece.Color.WHITE;
    Rook rook90 = new Rook(chessBoard88, color89);
    Pawn pawn91 = new Pawn(chessBoard85, color89);
    Pawn pawn92 = new Pawn(chessBoard82, color89);
    ChessPiece.Color color93 = ChessPiece.Color.WHITE;
    Rook rook94 = new Rook(chessBoard82, color93);
    Bishop bishop95 = new Bishop(chessBoard79, color93);
    Rook rook96 = new Rook(chessBoard1, color93);
    ChessPiece.Color color97 = rook96.getColor();
    Pawn pawn98 = new Pawn(chessBoard0, color97);
    // The following exception was thrown during execution in test generation
    try {
      java.util.ArrayList arrayList99 = pawn98.legalMoves();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color97);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test004"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessBoard chessBoard37 = null;
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard37, color38);
    Pawn pawn40 = new Pawn(chessBoard34, color38);
    Pawn pawn41 = new Pawn(chessBoard31, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Bishop bishop46 = new Bishop(chessBoard42, color45);
    King king47 = new King(chessBoard31, color45);
    Bishop bishop48 = new Bishop(chessBoard20, color45);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Pawn pawn51 = new Pawn(chessBoard49, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessBoard chessBoard55 = null;
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Rook rook57 = new Rook(chessBoard55, color56);
    Pawn pawn58 = new Pawn(chessBoard52, color56);
    Pawn pawn59 = new Pawn(chessBoard49, color56);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Bishop bishop64 = new Bishop(chessBoard60, color63);
    King king65 = new King(chessBoard49, color63);
    Knight knight66 = new Knight(chessBoard20, color63);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Knight knight69 = new Knight(chessBoard67, color68);
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Bishop bishop71 = new Bishop(chessBoard67, color70);
    Pawn pawn72 = new Pawn(chessBoard20, color70);
    Knight knight73 = new Knight(chessBoard0, color70);
    knight73.setRow((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test005"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    chessBoard33.initialize();
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = null;
    ChessPiece.Color color66 = ChessPiece.Color.WHITE;
    Rook rook67 = new Rook(chessBoard65, color66);
    Bishop bishop68 = new Bishop(chessBoard52, color66);
    ChessPiece.Color color69 = ChessPiece.Color.BLACK;
    Queen queen70 = new Queen(chessBoard52, color69);
    Queen queen71 = new Queen(chessBoard45, color69);
    Bishop bishop72 = new Bishop(chessBoard33, color69);
    King king73 = new King(chessBoard0, color69);
    king73.setPosition("a1");
    java.lang.String str76 = king73.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "\u265A"+ "'", str76.equals("\u265A"));

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test006"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard63, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    King king77 = new King(chessBoard0, color74);
    chessBoard0.initialize();
    java.lang.String str79 = chessBoard0.toString();
    ChessPiece.Color color80 = null;
    Pawn pawn81 = new Pawn(chessBoard0, color80);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece83 = chessBoard0.getPiece("\u265B");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str79.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test007"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = ChessPiece.Color.WHITE;
    Rook rook2 = new Rook(chessBoard0, color1);
    rook2.setRow(100);
    ChessPiece.Color color5 = rook2.getColor();
    java.lang.String str6 = rook2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u2656"+ "'", str6.equals("\u2656"));

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test008"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = ChessPiece.Color.WHITE;
    Rook rook2 = new Rook(chessBoard0, color1);
    rook2.setRow(100);
    java.lang.String str5 = rook2.toString();
    java.lang.String str6 = rook2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u2656"+ "'", str5.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u2656"+ "'", str6.equals("\u2656"));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test009"); }


    ChessBoard chessBoard0 = null;
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard1, color12);
    java.lang.String str14 = chessBoard1.toString();
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Pawn pawn17 = new Pawn(chessBoard15, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessBoard chessBoard21 = null;
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Rook rook23 = new Rook(chessBoard21, color22);
    Pawn pawn24 = new Pawn(chessBoard18, color22);
    Pawn pawn25 = new Pawn(chessBoard15, color22);
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard15, color26);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard28, color39);
    Pawn pawn41 = new Pawn(chessBoard15, color39);
    Bishop bishop42 = new Bishop(chessBoard1, color39);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Pawn pawn45 = new Pawn(chessBoard43, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessBoard chessBoard49 = null;
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard49, color50);
    Pawn pawn52 = new Pawn(chessBoard46, color50);
    Pawn pawn53 = new Pawn(chessBoard43, color50);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Pawn pawn56 = new Pawn(chessBoard54, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    Pawn pawn63 = new Pawn(chessBoard57, color61);
    Pawn pawn64 = new Pawn(chessBoard54, color61);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Knight knight67 = new Knight(chessBoard65, color66);
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Bishop bishop69 = new Bishop(chessBoard65, color68);
    King king70 = new King(chessBoard54, color68);
    Bishop bishop71 = new Bishop(chessBoard43, color68);
    Rook rook72 = new Rook(chessBoard1, color68);
    King king73 = new King(chessBoard0, color68);
    java.util.ArrayList arrayList74 = king73.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str14.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList74);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test010"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    ChessPiece.Color color16 = null;
    Queen queen17 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Bishop bishop45 = new Bishop(chessBoard41, color44);
    King king46 = new King(chessBoard30, color44);
    Bishop bishop47 = new Bishop(chessBoard19, color44);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Pawn pawn50 = new Pawn(chessBoard48, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = null;
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Rook rook56 = new Rook(chessBoard54, color55);
    Pawn pawn57 = new Pawn(chessBoard51, color55);
    Pawn pawn58 = new Pawn(chessBoard48, color55);
    ChessBoard chessBoard59 = new ChessBoard();
    ChessPiece.Color color60 = null;
    Knight knight61 = new Knight(chessBoard59, color60);
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Bishop bishop63 = new Bishop(chessBoard59, color62);
    King king64 = new King(chessBoard48, color62);
    Knight knight65 = new Knight(chessBoard19, color62);
    King king66 = new King(chessBoard18, color62);
    ChessPiece.Color color67 = null;
    Pawn pawn68 = new Pawn(chessBoard18, color67);
    ChessBoard chessBoard69 = new ChessBoard();
    ChessPiece.Color color70 = null;
    Knight knight71 = new Knight(chessBoard69, color70);
    ChessBoard chessBoard72 = null;
    ChessPiece.Color color73 = ChessPiece.Color.WHITE;
    Rook rook74 = new Rook(chessBoard72, color73);
    ChessPiece.Color color75 = rook74.getColor();
    Bishop bishop76 = new Bishop(chessBoard69, color75);
    Pawn pawn77 = new Pawn(chessBoard18, color75);
    Rook rook78 = new Rook(chessBoard0, color75);
    java.util.ArrayList arrayList79 = rook78.legalMoves();
    rook78.setRow(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList79);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test011"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    Pawn pawn26 = new Pawn(chessBoard0, color24);
    pawn26.setColumn(0);
    int i29 = pawn26.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test012"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    ChessPiece.Color color16 = null;
    Queen queen17 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Bishop bishop45 = new Bishop(chessBoard41, color44);
    King king46 = new King(chessBoard30, color44);
    Bishop bishop47 = new Bishop(chessBoard19, color44);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Pawn pawn50 = new Pawn(chessBoard48, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = null;
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Rook rook56 = new Rook(chessBoard54, color55);
    Pawn pawn57 = new Pawn(chessBoard51, color55);
    Pawn pawn58 = new Pawn(chessBoard48, color55);
    ChessBoard chessBoard59 = new ChessBoard();
    ChessPiece.Color color60 = null;
    Knight knight61 = new Knight(chessBoard59, color60);
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Bishop bishop63 = new Bishop(chessBoard59, color62);
    King king64 = new King(chessBoard48, color62);
    Knight knight65 = new Knight(chessBoard19, color62);
    King king66 = new King(chessBoard18, color62);
    ChessPiece.Color color67 = null;
    Pawn pawn68 = new Pawn(chessBoard18, color67);
    ChessBoard chessBoard69 = new ChessBoard();
    ChessPiece.Color color70 = null;
    Knight knight71 = new Knight(chessBoard69, color70);
    ChessBoard chessBoard72 = null;
    ChessPiece.Color color73 = ChessPiece.Color.WHITE;
    Rook rook74 = new Rook(chessBoard72, color73);
    ChessPiece.Color color75 = rook74.getColor();
    Bishop bishop76 = new Bishop(chessBoard69, color75);
    Pawn pawn77 = new Pawn(chessBoard18, color75);
    Rook rook78 = new Rook(chessBoard0, color75);
    java.util.ArrayList arrayList79 = rook78.legalMoves();
    java.util.ArrayList arrayList80 = rook78.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test013"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Rook rook4 = new Rook(chessBoard2, color3);
    rook4.setRow(100);
    java.util.ArrayList arrayList7 = rook4.legalMoves();
    int i8 = rook4.getColumn();
    ChessPiece.Color color9 = rook4.getColor();
    Bishop bishop10 = new Bishop(chessBoard0, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    King king38 = new King(chessBoard22, color34);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    Bishop bishop50 = new Bishop(chessBoard22, color46);
    Rook rook51 = new Rook(chessBoard11, color46);
    Pawn pawn52 = new Pawn(chessBoard0, color46);
    chessBoard0.initialize();
    // The following exception was thrown during execution in test generation
    try {
      boolean b56 = chessBoard0.move("\u265A", "\u2659");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test014"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    Pawn pawn52 = new Pawn(chessBoard0, color50);
    java.lang.String str53 = pawn52.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\u2659"+ "'", str53.equals("\u2659"));

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test015"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Bishop bishop68 = new Bishop(chessBoard64, color67);
    King king69 = new King(chessBoard53, color67);
    Bishop bishop70 = new Bishop(chessBoard42, color67);
    Rook rook71 = new Rook(chessBoard0, color67);
    java.lang.String str72 = rook71.toString();
    java.util.ArrayList arrayList73 = rook71.legalMoves();
    ChessPiece.Color color74 = rook71.getColor();
    java.lang.String str75 = rook71.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\u2656"+ "'", str72.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "\u2656"+ "'", str75.equals("\u2656"));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test016"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.util.ArrayList arrayList22 = queen18.legalMoves();
    java.lang.String str23 = queen18.getPosition();
    int i24 = queen18.getColumn();
    java.util.ArrayList arrayList25 = queen18.legalMoves();
    queen18.setColumn(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "a1"+ "'", str23.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList25);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test017"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard63, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    King king77 = new King(chessBoard0, color74);
    int i78 = king77.getRow();
    king77.setRow(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test018"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = ChessPiece.Color.BLACK;
    Bishop bishop14 = new Bishop(chessBoard0, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Pawn pawn17 = new Pawn(chessBoard15, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessBoard chessBoard21 = null;
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Rook rook23 = new Rook(chessBoard21, color22);
    Pawn pawn24 = new Pawn(chessBoard18, color22);
    Pawn pawn25 = new Pawn(chessBoard15, color22);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Pawn pawn28 = new Pawn(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Pawn pawn35 = new Pawn(chessBoard29, color33);
    Pawn pawn36 = new Pawn(chessBoard26, color33);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Bishop bishop41 = new Bishop(chessBoard37, color40);
    King king42 = new King(chessBoard26, color40);
    Bishop bishop43 = new Bishop(chessBoard15, color40);
    ChessBoard chessBoard44 = null;
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard44, color45);
    King king47 = new King(chessBoard15, color45);
    Queen queen48 = new Queen(chessBoard0, color45);
    chessBoard0.initialize();
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Knight knight52 = new Knight(chessBoard50, color51);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    King king64 = new King(chessBoard50, color60);
    ChessPiece.Color color65 = ChessPiece.Color.BLACK;
    King king66 = new King(chessBoard50, color65);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Pawn pawn69 = new Pawn(chessBoard67, color68);
    ChessBoard chessBoard70 = new ChessBoard();
    ChessPiece.Color color71 = null;
    Knight knight72 = new Knight(chessBoard70, color71);
    ChessBoard chessBoard73 = null;
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard73, color74);
    Pawn pawn76 = new Pawn(chessBoard70, color74);
    Pawn pawn77 = new Pawn(chessBoard67, color74);
    ChessPiece.Color color78 = ChessPiece.Color.WHITE;
    Rook rook79 = new Rook(chessBoard67, color78);
    King king80 = new King(chessBoard50, color78);
    Knight knight81 = new Knight(chessBoard0, color78);
    // The following exception was thrown during execution in test generation
    try {
      boolean b84 = chessBoard0.move("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265A \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518", "\u265A");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color78);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test019"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = ChessPiece.Color.WHITE;
    Rook rook2 = new Rook(chessBoard0, color1);
    ChessPiece.Color color3 = rook2.getColor();
    int i4 = rook2.getRow();
    // The following exception was thrown during execution in test generation
    try {
      java.util.ArrayList arrayList5 = rook2.legalMoves();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test020"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    King king32 = new King(chessBoard0, color30);
    java.lang.String str33 = chessBoard0.toString();
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    King king50 = new King(chessBoard34, color46);
    chessBoard34.initialize();
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    java.lang.String str55 = chessBoard52.toString();
    java.lang.String str56 = chessBoard52.toString();
    ChessPiece.Color color57 = ChessPiece.Color.WHITE;
    Pawn pawn58 = new Pawn(chessBoard52, color57);
    Pawn pawn59 = new Pawn(chessBoard34, color57);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    rook62.setRow(100);
    java.util.ArrayList arrayList65 = rook62.legalMoves();
    int i66 = rook62.getColumn();
    ChessPiece.Color color67 = rook62.getColor();
    Rook rook68 = new Rook(chessBoard34, color67);
    Pawn pawn69 = new Pawn(chessBoard0, color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str33.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str55.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str56.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test021"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard12, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Pawn pawn18 = new Pawn(chessBoard12, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard19, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Bishop bishop35 = new Bishop(chessBoard19, color33);
    ChessPiece.Color color36 = ChessPiece.Color.BLACK;
    Queen queen37 = new Queen(chessBoard19, color36);
    Queen queen38 = new Queen(chessBoard12, color36);
    Bishop bishop39 = new Bishop(chessBoard0, color36);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece41 = chessBoard0.getPiece("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265A \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test022"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    ChessPiece.Color color16 = null;
    Queen queen17 = new Queen(chessBoard0, color16);
    java.util.ArrayList arrayList18 = queen17.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test023"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    chessBoard0.initialize();
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Bishop bishop22 = new Bishop(chessBoard18, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    King king34 = new King(chessBoard18, color30);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    Bishop bishop46 = new Bishop(chessBoard18, color42);
    Rook rook47 = new Rook(chessBoard0, color42);
    java.util.ArrayList arrayList48 = rook47.legalMoves();
    ChessPiece.Color color49 = rook47.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test024"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessBoard chessBoard73 = null;
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard73, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    Rook rook77 = new Rook(chessBoard0, color74);
    java.util.ArrayList arrayList78 = rook77.legalMoves();
    java.util.ArrayList arrayList79 = rook77.legalMoves();
    ChessPiece.Color color80 = rook77.getColor();
    java.lang.String str81 = rook77.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "\u2656"+ "'", str81.equals("\u2656"));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test025"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    ChessPiece.Color color5 = knight2.getColor();
    java.util.ArrayList arrayList6 = knight2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test026"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard0, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Pawn pawn17 = new Pawn(chessBoard15, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessBoard chessBoard21 = null;
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Rook rook23 = new Rook(chessBoard21, color22);
    Pawn pawn24 = new Pawn(chessBoard18, color22);
    Pawn pawn25 = new Pawn(chessBoard15, color22);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Pawn pawn28 = new Pawn(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Pawn pawn35 = new Pawn(chessBoard29, color33);
    Pawn pawn36 = new Pawn(chessBoard26, color33);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Bishop bishop41 = new Bishop(chessBoard37, color40);
    King king42 = new King(chessBoard26, color40);
    Bishop bishop43 = new Bishop(chessBoard15, color40);
    Queen queen44 = new Queen(chessBoard0, color40);
    java.lang.String str45 = queen44.toString();
    java.util.ArrayList arrayList46 = queen44.legalMoves();
    java.util.ArrayList arrayList47 = queen44.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\u2655"+ "'", str45.equals("\u2655"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList47);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test027"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    Bishop bishop28 = new Bishop(chessBoard0, color24);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Pawn pawn34 = new Pawn(chessBoard32, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    Pawn pawn41 = new Pawn(chessBoard35, color39);
    Pawn pawn42 = new Pawn(chessBoard32, color39);
    King king43 = new King(chessBoard29, color39);
    ChessPiece.Color color44 = ChessPiece.Color.BLACK;
    King king45 = new King(chessBoard29, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Bishop bishop50 = new Bishop(chessBoard46, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Pawn pawn53 = new Pawn(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessBoard chessBoard57 = null;
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard57, color58);
    Pawn pawn60 = new Pawn(chessBoard54, color58);
    Pawn pawn61 = new Pawn(chessBoard51, color58);
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard51, color62);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Pawn pawn66 = new Pawn(chessBoard64, color65);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Knight knight69 = new Knight(chessBoard67, color68);
    ChessBoard chessBoard70 = null;
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard70, color71);
    Pawn pawn73 = new Pawn(chessBoard67, color71);
    Pawn pawn74 = new Pawn(chessBoard64, color71);
    ChessPiece.Color color75 = ChessPiece.Color.WHITE;
    Rook rook76 = new Rook(chessBoard64, color75);
    Pawn pawn77 = new Pawn(chessBoard51, color75);
    Pawn pawn78 = new Pawn(chessBoard46, color75);
    Rook rook79 = new Rook(chessBoard29, color75);
    ChessBoard chessBoard80 = null;
    ChessPiece.Color color81 = ChessPiece.Color.WHITE;
    Rook rook82 = new Rook(chessBoard80, color81);
    ChessPiece.Color color83 = rook82.getColor();
    Queen queen84 = new Queen(chessBoard29, color83);
    Queen queen85 = new Queen(chessBoard0, color83);
    java.lang.String str86 = queen85.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "\u2655"+ "'", str86.equals("\u2655"));

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test028"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Bishop bishop24 = new Bishop(chessBoard0, color21);
    bishop24.setColumn(0);
    java.util.ArrayList arrayList27 = bishop24.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test029"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    java.lang.String str3 = knight2.toString();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    java.util.ArrayList arrayList5 = knight2.legalMoves();
    java.util.ArrayList arrayList6 = knight2.legalMoves();
    java.util.ArrayList arrayList7 = knight2.legalMoves();
    java.util.ArrayList arrayList8 = knight2.legalMoves();
    java.lang.String str9 = knight2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u265E"+ "'", str3.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u265E"+ "'", str9.equals("\u265E"));

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test030"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.util.ArrayList arrayList8 = bishop7.legalMoves();
    java.lang.String str9 = bishop7.toString();
    bishop7.setColumn(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2657"+ "'", str9.equals("\u2657"));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test031"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    java.lang.String str17 = chessBoard0.toString();
    chessBoard0.initialize();
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Bishop bishop23 = new Bishop(chessBoard19, color22);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Pawn pawn26 = new Pawn(chessBoard24, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Pawn pawn33 = new Pawn(chessBoard27, color31);
    Pawn pawn34 = new Pawn(chessBoard24, color31);
    King king35 = new King(chessBoard19, color31);
    java.lang.String str36 = king35.toString();
    java.lang.String str37 = king35.toString();
    ChessPiece.Color color38 = king35.getColor();
    // The following exception was thrown during execution in test generation
    try {
      boolean b40 = chessBoard0.placePiece((ChessPiece)king35, "");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str17.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\u2654"+ "'", str36.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\u2654"+ "'", str37.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test032"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    java.lang.String str5 = chessBoard0.toString();
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Pawn pawn8 = new Pawn(chessBoard6, color7);
    ChessBoard chessBoard9 = new ChessBoard();
    ChessPiece.Color color10 = null;
    Knight knight11 = new Knight(chessBoard9, color10);
    ChessBoard chessBoard12 = null;
    ChessPiece.Color color13 = ChessPiece.Color.WHITE;
    Rook rook14 = new Rook(chessBoard12, color13);
    Pawn pawn15 = new Pawn(chessBoard9, color13);
    Pawn pawn16 = new Pawn(chessBoard6, color13);
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Rook rook18 = new Rook(chessBoard6, color17);
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard6, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Pawn pawn23 = new Pawn(chessBoard21, color22);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Knight knight26 = new Knight(chessBoard24, color25);
    ChessBoard chessBoard27 = null;
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard27, color28);
    Pawn pawn30 = new Pawn(chessBoard24, color28);
    Pawn pawn31 = new Pawn(chessBoard21, color28);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Pawn pawn34 = new Pawn(chessBoard32, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    Pawn pawn41 = new Pawn(chessBoard35, color39);
    Pawn pawn42 = new Pawn(chessBoard32, color39);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Knight knight45 = new Knight(chessBoard43, color44);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Bishop bishop47 = new Bishop(chessBoard43, color46);
    King king48 = new King(chessBoard32, color46);
    Bishop bishop49 = new Bishop(chessBoard21, color46);
    Queen queen50 = new Queen(chessBoard6, color46);
    Queen queen51 = new Queen(chessBoard0, color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str5.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test033"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    Pawn pawn78 = new Pawn(chessBoard52, color76);
    Pawn pawn79 = new Pawn(chessBoard47, color76);
    java.util.ArrayList arrayList80 = pawn79.legalMoves();
    int i81 = pawn79.getRow();
    ChessPiece.Color color82 = pawn79.getColor();
    King king83 = new King(chessBoard0, color82);
    ChessPiece.Color color84 = null;
    Queen queen85 = new Queen(chessBoard0, color84);
    int i86 = queen85.getColumn();
    java.util.ArrayList arrayList87 = queen85.legalMoves();
    java.lang.String str88 = queen85.toString();
    java.lang.String str89 = queen85.getPosition();
    java.util.ArrayList arrayList90 = queen85.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "\u265B"+ "'", str88.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "a1"+ "'", str89.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList90);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test034"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.lang.String str8 = bishop7.toString();
    int i9 = bishop7.getRow();
    java.util.ArrayList arrayList10 = bishop7.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\u2657"+ "'", str8.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test035"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    java.util.ArrayList arrayList3 = knight2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList3);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test036"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    Knight knight12 = new Knight(chessBoard0, color8);
    int i13 = knight12.getColumn();
    knight12.setPosition("a101");
    java.lang.String str16 = knight12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\u2658"+ "'", str16.equals("\u2658"));

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test037"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    int i13 = rook12.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test038"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    Pawn pawn53 = new Pawn(chessBoard47, color51);
    Pawn pawn54 = new Pawn(chessBoard44, color51);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Bishop bishop59 = new Bishop(chessBoard55, color58);
    King king60 = new King(chessBoard44, color58);
    Bishop bishop61 = new Bishop(chessBoard33, color58);
    java.lang.String str62 = bishop61.toString();
    ChessPiece.Color color63 = bishop61.getColor();
    Pawn pawn64 = new Pawn(chessBoard0, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    ChessBoard chessBoard78 = null;
    ChessPiece.Color color79 = ChessPiece.Color.WHITE;
    Rook rook80 = new Rook(chessBoard78, color79);
    Bishop bishop81 = new Bishop(chessBoard65, color79);
    ChessPiece.Color color82 = ChessPiece.Color.BLACK;
    Queen queen83 = new Queen(chessBoard65, color82);
    java.lang.String str84 = queen83.toString();
    java.lang.String str85 = queen83.toString();
    java.lang.String str86 = queen83.toString();
    java.lang.String str87 = queen83.toString();
    java.util.ArrayList arrayList88 = queen83.legalMoves();
    java.lang.String str89 = queen83.toString();
    queen83.setColumn(100);
    // The following exception was thrown during execution in test generation
    try {
      boolean b93 = chessBoard0.placePiece((ChessPiece)queen83, "\u265F");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "\u2657"+ "'", str62.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "\u265B"+ "'", str84.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "\u265B"+ "'", str85.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "\u265B"+ "'", str86.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "\u265B"+ "'", str87.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "\u265B"+ "'", str89.equals("\u265B"));

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test039"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.util.ArrayList arrayList21 = queen18.legalMoves();
    java.lang.String str22 = queen18.toString();
    java.lang.String str23 = queen18.toString();
    queen18.setColumn(1);
    java.lang.String str26 = queen18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u265B"+ "'", str23.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\u265B"+ "'", str26.equals("\u265B"));

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test040"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    java.lang.String str33 = pawn32.toString();
    ChessPiece.Color color34 = pawn32.getColor();
    int i35 = pawn32.getRow();
    int i36 = pawn32.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\u2659"+ "'", str33.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test041"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Bishop bishop68 = new Bishop(chessBoard64, color67);
    King king69 = new King(chessBoard53, color67);
    Bishop bishop70 = new Bishop(chessBoard42, color67);
    Rook rook71 = new Rook(chessBoard0, color67);
    int i72 = rook71.getColumn();
    java.util.ArrayList arrayList73 = rook71.legalMoves();
    rook71.setColumn(0);
    java.util.ArrayList arrayList76 = rook71.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList76);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test042"); }


    ChessBoard chessBoard0 = null;
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Knight knight3 = new Knight(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Pawn pawn6 = new Pawn(chessBoard4, color5);
    ChessBoard chessBoard7 = new ChessBoard();
    ChessPiece.Color color8 = null;
    Knight knight9 = new Knight(chessBoard7, color8);
    ChessBoard chessBoard10 = null;
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard10, color11);
    Pawn pawn13 = new Pawn(chessBoard7, color11);
    Pawn pawn14 = new Pawn(chessBoard4, color11);
    King king15 = new King(chessBoard1, color11);
    boolean b18 = chessBoard1.move("b1", "\u2654");
    boolean b21 = chessBoard1.move("a2", "\u2654");
    ChessPiece chessPiece23 = chessBoard1.getPiece("a101");
    java.lang.String str24 = chessBoard1.toString();
    ChessPiece.Color color25 = null;
    Queen queen26 = new Queen(chessBoard1, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Bishop bishop42 = new Bishop(chessBoard38, color41);
    King king43 = new King(chessBoard27, color41);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessBoard chessBoard45 = new ChessBoard();
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Pawn pawn48 = new Pawn(chessBoard46, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Knight knight51 = new Knight(chessBoard49, color50);
    ChessBoard chessBoard52 = null;
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Rook rook54 = new Rook(chessBoard52, color53);
    Pawn pawn55 = new Pawn(chessBoard49, color53);
    Pawn pawn56 = new Pawn(chessBoard46, color53);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Pawn pawn59 = new Pawn(chessBoard57, color58);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = null;
    ChessPiece.Color color64 = ChessPiece.Color.WHITE;
    Rook rook65 = new Rook(chessBoard63, color64);
    Pawn pawn66 = new Pawn(chessBoard60, color64);
    Pawn pawn67 = new Pawn(chessBoard57, color64);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Bishop bishop72 = new Bishop(chessBoard68, color71);
    King king73 = new King(chessBoard57, color71);
    Bishop bishop74 = new Bishop(chessBoard46, color71);
    ChessBoard chessBoard75 = new ChessBoard();
    ChessPiece.Color color76 = null;
    Pawn pawn77 = new Pawn(chessBoard75, color76);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Knight knight80 = new Knight(chessBoard78, color79);
    ChessBoard chessBoard81 = null;
    ChessPiece.Color color82 = ChessPiece.Color.WHITE;
    Rook rook83 = new Rook(chessBoard81, color82);
    Pawn pawn84 = new Pawn(chessBoard78, color82);
    Pawn pawn85 = new Pawn(chessBoard75, color82);
    ChessBoard chessBoard86 = new ChessBoard();
    ChessPiece.Color color87 = null;
    Knight knight88 = new Knight(chessBoard86, color87);
    ChessPiece.Color color89 = ChessPiece.Color.WHITE;
    Bishop bishop90 = new Bishop(chessBoard86, color89);
    King king91 = new King(chessBoard75, color89);
    Knight knight92 = new Knight(chessBoard46, color89);
    King king93 = new King(chessBoard45, color89);
    Rook rook94 = new Rook(chessBoard44, color89);
    Knight knight95 = new Knight(chessBoard27, color89);
    Bishop bishop96 = new Bishop(chessBoard1, color89);
    Rook rook97 = new Rook(chessBoard0, color89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str24.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color89);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test043"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Rook rook23 = new Rook(chessBoard11, color22);
    java.lang.String str24 = chessBoard11.toString();
    ChessPiece chessPiece26 = chessBoard11.getPiece("a1");
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Bishop bishop43 = new Bishop(chessBoard27, color41);
    Rook rook44 = new Rook(chessBoard11, color41);
    Queen queen45 = new Queen(chessBoard0, color41);
    java.lang.String str46 = queen45.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str24.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\u2655"+ "'", str46.equals("\u2655"));

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test044"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Pawn pawn18 = new Pawn(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test045"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Bishop bishop68 = new Bishop(chessBoard64, color67);
    King king69 = new King(chessBoard53, color67);
    Bishop bishop70 = new Bishop(chessBoard42, color67);
    Rook rook71 = new Rook(chessBoard0, color67);
    java.lang.String str72 = rook71.toString();
    java.util.ArrayList arrayList73 = rook71.legalMoves();
    ChessPiece.Color color74 = rook71.getColor();
    java.util.ArrayList arrayList75 = rook71.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\u2656"+ "'", str72.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList75);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test046"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.util.ArrayList arrayList8 = bishop7.legalMoves();
    java.lang.String str9 = bishop7.toString();
    bishop7.setRow(0);
    java.lang.String str12 = bishop7.toString();
    java.lang.String str13 = bishop7.getPosition();
    java.lang.String str14 = bishop7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2657"+ "'", str9.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u2657"+ "'", str12.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a1"+ "'", str13.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\u2657"+ "'", str14.equals("\u2657"));

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test047"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    Bishop bishop28 = new Bishop(chessBoard0, color24);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Pawn pawn34 = new Pawn(chessBoard32, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    Pawn pawn41 = new Pawn(chessBoard35, color39);
    Pawn pawn42 = new Pawn(chessBoard32, color39);
    King king43 = new King(chessBoard29, color39);
    ChessPiece.Color color44 = ChessPiece.Color.BLACK;
    King king45 = new King(chessBoard29, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Bishop bishop50 = new Bishop(chessBoard46, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Pawn pawn53 = new Pawn(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessBoard chessBoard57 = null;
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard57, color58);
    Pawn pawn60 = new Pawn(chessBoard54, color58);
    Pawn pawn61 = new Pawn(chessBoard51, color58);
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard51, color62);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Pawn pawn66 = new Pawn(chessBoard64, color65);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Knight knight69 = new Knight(chessBoard67, color68);
    ChessBoard chessBoard70 = null;
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard70, color71);
    Pawn pawn73 = new Pawn(chessBoard67, color71);
    Pawn pawn74 = new Pawn(chessBoard64, color71);
    ChessPiece.Color color75 = ChessPiece.Color.WHITE;
    Rook rook76 = new Rook(chessBoard64, color75);
    Pawn pawn77 = new Pawn(chessBoard51, color75);
    Pawn pawn78 = new Pawn(chessBoard46, color75);
    Rook rook79 = new Rook(chessBoard29, color75);
    ChessBoard chessBoard80 = null;
    ChessPiece.Color color81 = ChessPiece.Color.WHITE;
    Rook rook82 = new Rook(chessBoard80, color81);
    ChessPiece.Color color83 = rook82.getColor();
    Queen queen84 = new Queen(chessBoard29, color83);
    Queen queen85 = new Queen(chessBoard0, color83);
    java.lang.String str86 = chessBoard0.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b89 = chessBoard0.move("\u2654", "\u2654");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str86.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test048"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Bishop bishop68 = new Bishop(chessBoard64, color67);
    King king69 = new King(chessBoard53, color67);
    Bishop bishop70 = new Bishop(chessBoard42, color67);
    Rook rook71 = new Rook(chessBoard0, color67);
    java.util.ArrayList arrayList72 = rook71.legalMoves();
    java.util.ArrayList arrayList73 = rook71.legalMoves();
    java.util.ArrayList arrayList74 = rook71.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList74);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test049"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    king2.setColumn(1);
    java.lang.String str6 = king2.getPosition();
    ChessPiece.Color color7 = king2.getColor();
    king2.setColumn(100);
    java.lang.String str10 = king2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "b1"+ "'", str6.equals("b1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u265A"+ "'", str10.equals("\u265A"));

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test050"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    pawn6.setRow(1);
    java.lang.String str9 = pawn6.toString();
    java.util.ArrayList arrayList10 = pawn6.legalMoves();
    java.lang.String str11 = pawn6.toString();
    int i12 = pawn6.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2659"+ "'", str9.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u2659"+ "'", str11.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test051"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessBoard chessBoard73 = null;
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard73, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    Rook rook77 = new Rook(chessBoard0, color74);
    int i78 = rook77.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test052"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Pawn pawn18 = new Pawn(chessBoard0, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    King king33 = new King(chessBoard19, color29);
    ChessPiece.Color color34 = ChessPiece.Color.BLACK;
    King king35 = new King(chessBoard19, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Bishop bishop40 = new Bishop(chessBoard36, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard41, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Pawn pawn56 = new Pawn(chessBoard54, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    Pawn pawn63 = new Pawn(chessBoard57, color61);
    Pawn pawn64 = new Pawn(chessBoard54, color61);
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Rook rook66 = new Rook(chessBoard54, color65);
    Pawn pawn67 = new Pawn(chessBoard41, color65);
    Pawn pawn68 = new Pawn(chessBoard36, color65);
    Rook rook69 = new Rook(chessBoard19, color65);
    ChessBoard chessBoard70 = null;
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard70, color71);
    ChessPiece.Color color73 = rook72.getColor();
    Queen queen74 = new Queen(chessBoard19, color73);
    Pawn pawn75 = new Pawn(chessBoard0, color73);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test053"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    int i50 = knight49.getRow();
    java.lang.String str51 = knight49.getPosition();
    java.lang.String str52 = knight49.toString();
    int i53 = knight49.getRow();
    // The following exception was thrown during execution in test generation
    try {
      boolean b55 = chessBoard0.placePiece((ChessPiece)knight49, "\u2655");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "a1"+ "'", str51.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\u265E"+ "'", str52.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test054"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    king8.setPosition("a2");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test055"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = ChessPiece.Color.WHITE;
    Rook rook2 = new Rook(chessBoard0, color1);
    ChessPiece.Color color3 = rook2.getColor();
    java.lang.String str4 = rook2.toString();
    java.lang.String str5 = rook2.toString();
    int i6 = rook2.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u2656"+ "'", str4.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u2656"+ "'", str5.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test056"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    King king33 = new King(chessBoard19, color29);
    ChessPiece.Color color34 = ChessPiece.Color.BLACK;
    King king35 = new King(chessBoard19, color34);
    Queen queen36 = new Queen(chessBoard0, color34);
    java.util.ArrayList arrayList37 = queen36.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test057"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    ChessPiece.Color color5 = ChessPiece.Color.WHITE;
    Pawn pawn6 = new Pawn(chessBoard0, color5);
    java.util.ArrayList arrayList7 = pawn6.legalMoves();
    int i8 = pawn6.getRow();
    java.lang.String str9 = pawn6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2659"+ "'", str9.equals("\u2659"));

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test058"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    king8.setColumn(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test059"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.lang.String str22 = queen18.toString();
    java.util.ArrayList arrayList23 = queen18.legalMoves();
    java.lang.String str24 = queen18.toString();
    java.lang.String str25 = queen18.toString();
    java.lang.String str26 = queen18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\u265B"+ "'", str24.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\u265B"+ "'", str25.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\u265B"+ "'", str26.equals("\u265B"));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test060"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    java.lang.String str60 = pawn59.toString();
    int i61 = pawn59.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\u2659"+ "'", str60.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test061"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    rook12.setColumn(0);
    java.lang.String str15 = rook12.toString();
    java.lang.String str16 = rook12.toString();
    java.util.ArrayList arrayList17 = rook12.legalMoves();
    java.lang.String str18 = rook12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\u2656"+ "'", str15.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\u2656"+ "'", str16.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\u2656"+ "'", str18.equals("\u2656"));

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test062"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    King king30 = new King(chessBoard0, color28);
    java.lang.String str31 = king30.toString();
    king30.setRow(56);
    java.lang.String str34 = king30.toString();
    java.util.ArrayList arrayList35 = king30.legalMoves();
    java.util.ArrayList arrayList36 = king30.legalMoves();
    // The following exception was thrown during execution in test generation
    try {
      king30.setPosition("\u265B");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\u2654"+ "'", str31.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\u2654"+ "'", str34.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList36);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test063"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard12, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Pawn pawn18 = new Pawn(chessBoard12, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard19, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Bishop bishop35 = new Bishop(chessBoard19, color33);
    ChessPiece.Color color36 = ChessPiece.Color.BLACK;
    Queen queen37 = new Queen(chessBoard19, color36);
    Queen queen38 = new Queen(chessBoard12, color36);
    Bishop bishop39 = new Bishop(chessBoard0, color36);
    bishop39.setColumn(100);
    // The following exception was thrown during execution in test generation
    try {
      bishop39.setPosition("\u265E");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test064"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessBoard chessBoard37 = null;
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard37, color38);
    Pawn pawn40 = new Pawn(chessBoard34, color38);
    Pawn pawn41 = new Pawn(chessBoard31, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Bishop bishop46 = new Bishop(chessBoard42, color45);
    King king47 = new King(chessBoard31, color45);
    Bishop bishop48 = new Bishop(chessBoard20, color45);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Pawn pawn51 = new Pawn(chessBoard49, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessBoard chessBoard55 = null;
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Rook rook57 = new Rook(chessBoard55, color56);
    Pawn pawn58 = new Pawn(chessBoard52, color56);
    Pawn pawn59 = new Pawn(chessBoard49, color56);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Bishop bishop64 = new Bishop(chessBoard60, color63);
    King king65 = new King(chessBoard49, color63);
    Knight knight66 = new Knight(chessBoard20, color63);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Knight knight69 = new Knight(chessBoard67, color68);
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Bishop bishop71 = new Bishop(chessBoard67, color70);
    Pawn pawn72 = new Pawn(chessBoard20, color70);
    Knight knight73 = new Knight(chessBoard0, color70);
    // The following exception was thrown during execution in test generation
    try {
      boolean b76 = chessBoard0.move("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518", "a2");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test065"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard0, color20);
    java.lang.String str22 = chessBoard0.toString();
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str22.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test066"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Bishop bishop29 = new Bishop(chessBoard25, color28);
    King king30 = new King(chessBoard14, color28);
    Bishop bishop31 = new Bishop(chessBoard3, color28);
    java.lang.String str32 = bishop31.toString();
    ChessPiece.Color color33 = bishop31.getColor();
    Pawn pawn34 = new Pawn(chessBoard0, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    ChessPiece.Color color38 = rook37.getColor();
    java.lang.String str39 = rook37.toString();
    java.lang.String str40 = rook37.toString();
    rook37.setRow(56);
    rook37.setColumn(10);
    java.lang.String str45 = rook37.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b47 = chessBoard0.placePiece((ChessPiece)rook37, "");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\u2657"+ "'", str32.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "\u2656"+ "'", str39.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "\u2656"+ "'", str40.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\u2656"+ "'", str45.equals("\u2656"));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test067"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Bishop bishop21 = new Bishop(chessBoard17, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard22, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard35, color46);
    Pawn pawn48 = new Pawn(chessBoard22, color46);
    Pawn pawn49 = new Pawn(chessBoard17, color46);
    Rook rook50 = new Rook(chessBoard0, color46);
    java.lang.String str51 = rook50.toString();
    java.lang.String str52 = rook50.toString();
    java.util.ArrayList arrayList53 = rook50.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\u2656"+ "'", str51.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\u2656"+ "'", str52.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList53);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test068"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    java.lang.String str4 = king2.getPosition();
    java.lang.String str5 = king2.getPosition();
    ChessPiece.Color color6 = king2.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a1"+ "'", str4.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1"+ "'", str5.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color6);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test069"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    chessBoard0.initialize();
    java.lang.String str10 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str10.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test070"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard63, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    King king77 = new King(chessBoard0, color74);
    chessBoard0.initialize();
    ChessBoard chessBoard79 = new ChessBoard();
    java.lang.String str80 = chessBoard79.toString();
    ChessBoard chessBoard81 = null;
    ChessPiece.Color color82 = ChessPiece.Color.WHITE;
    Rook rook83 = new Rook(chessBoard81, color82);
    rook83.setRow(100);
    java.util.ArrayList arrayList86 = rook83.legalMoves();
    int i87 = rook83.getColumn();
    ChessPiece.Color color88 = rook83.getColor();
    Bishop bishop89 = new Bishop(chessBoard79, color88);
    Rook rook90 = new Rook(chessBoard0, color88);
    int i91 = rook90.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str80.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test071"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = ChessPiece.Color.WHITE;
    Rook rook2 = new Rook(chessBoard0, color1);
    ChessPiece.Color color3 = rook2.getColor();
    java.lang.String str4 = rook2.toString();
    java.lang.String str5 = rook2.toString();
    rook2.setRow(56);
    rook2.setColumn(10);
    java.lang.String str10 = rook2.toString();
    java.lang.String str11 = rook2.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u2656"+ "'", str4.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u2656"+ "'", str5.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u2656"+ "'", str10.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " 57"+ "'", str11.equals(" 57"));

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test072"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    Pawn pawn78 = new Pawn(chessBoard52, color76);
    Pawn pawn79 = new Pawn(chessBoard47, color76);
    java.util.ArrayList arrayList80 = pawn79.legalMoves();
    int i81 = pawn79.getRow();
    ChessPiece.Color color82 = pawn79.getColor();
    King king83 = new King(chessBoard0, color82);
    ChessPiece.Color color84 = null;
    Queen queen85 = new Queen(chessBoard0, color84);
    java.util.ArrayList arrayList86 = queen85.legalMoves();
    java.util.ArrayList arrayList87 = queen85.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList87);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test073"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.lang.String str8 = bishop7.getPosition();
    ChessPiece.Color color9 = bishop7.getColor();
    int i10 = bishop7.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a1"+ "'", str8.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test074"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Pawn pawn43 = new Pawn(chessBoard17, color41);
    Knight knight44 = new Knight(chessBoard0, color41);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    java.lang.String str48 = knight47.toString();
    java.util.ArrayList arrayList49 = knight47.legalMoves();
    java.util.ArrayList arrayList50 = knight47.legalMoves();
    boolean b52 = chessBoard0.placePiece((ChessPiece)knight47, "a1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\u265E"+ "'", str48.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test075"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard63, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    King king77 = new King(chessBoard0, color74);
    java.lang.String str78 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str78.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test076"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    Pawn pawn78 = new Pawn(chessBoard52, color76);
    Pawn pawn79 = new Pawn(chessBoard47, color76);
    java.util.ArrayList arrayList80 = pawn79.legalMoves();
    int i81 = pawn79.getRow();
    ChessPiece.Color color82 = pawn79.getColor();
    King king83 = new King(chessBoard0, color82);
    ChessPiece.Color color84 = null;
    Queen queen85 = new Queen(chessBoard0, color84);
    int i86 = queen85.getColumn();
    java.util.ArrayList arrayList87 = queen85.legalMoves();
    java.lang.String str88 = queen85.getPosition();
    java.lang.String str89 = queen85.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "a1"+ "'", str88.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "\u265B"+ "'", str89.equals("\u265B"));

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test077"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = null;
    Bishop bishop12 = new Bishop(chessBoard0, color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test078"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessPiece.Color color6 = ChessPiece.Color.WHITE;
    Bishop bishop7 = new Bishop(chessBoard3, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Pawn pawn10 = new Pawn(chessBoard8, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessBoard chessBoard14 = null;
    ChessPiece.Color color15 = ChessPiece.Color.WHITE;
    Rook rook16 = new Rook(chessBoard14, color15);
    Pawn pawn17 = new Pawn(chessBoard11, color15);
    Pawn pawn18 = new Pawn(chessBoard8, color15);
    King king19 = new King(chessBoard3, color15);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    Bishop bishop31 = new Bishop(chessBoard3, color27);
    chessBoard3.initialize();
    java.lang.String str33 = chessBoard3.toString();
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard39, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    Pawn pawn65 = new Pawn(chessBoard39, color63);
    Pawn pawn66 = new Pawn(chessBoard34, color63);
    java.util.ArrayList arrayList67 = pawn66.legalMoves();
    int i68 = pawn66.getRow();
    ChessPiece.Color color69 = pawn66.getColor();
    Rook rook70 = new Rook(chessBoard3, color69);
    Queen queen71 = new Queen(chessBoard0, color69);
    java.lang.String str72 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str33.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str72.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test079"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    bishop41.setPosition("hi!");
    int i44 = bishop41.getRow();
    int i45 = bishop41.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 7);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test080"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    java.lang.String str17 = king16.toString();
    java.util.ArrayList arrayList18 = king16.legalMoves();
    java.lang.String str19 = king16.toString();
    java.lang.String str20 = king16.getPosition();
    king16.setRow(1);
    java.lang.String str23 = king16.toString();
    ChessPiece.Color color24 = king16.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u2654"+ "'", str17.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u2654"+ "'", str19.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1"+ "'", str20.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u2654"+ "'", str23.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test081"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = null;
    King king4 = new King(chessBoard2, color3);
    ChessPiece.Color color5 = king4.getColor();
    king4.setRow(0);
    java.util.ArrayList arrayList8 = king4.legalMoves();
    boolean b10 = chessBoard0.placePiece((ChessPiece)king4, "a1");
    java.lang.String str11 = chessBoard0.toString();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard12, color23);
    java.lang.String str25 = chessBoard12.toString();
    ChessPiece chessPiece27 = chessBoard12.getPiece("a1");
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessBoard chessBoard37 = null;
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard37, color38);
    Pawn pawn40 = new Pawn(chessBoard34, color38);
    Pawn pawn41 = new Pawn(chessBoard31, color38);
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard31, color42);
    Bishop bishop44 = new Bishop(chessBoard28, color42);
    Rook rook45 = new Rook(chessBoard12, color42);
    java.util.ArrayList arrayList46 = rook45.legalMoves();
    ChessPiece.Color color47 = rook45.getColor();
    King king48 = new King(chessBoard0, color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265A \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str11.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265A \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str25.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test082"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.util.ArrayList arrayList8 = bishop7.legalMoves();
    java.lang.String str9 = bishop7.toString();
    java.util.ArrayList arrayList10 = bishop7.legalMoves();
    bishop7.setColumn((-1));
    java.util.ArrayList arrayList13 = bishop7.legalMoves();
    java.util.ArrayList arrayList14 = bishop7.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2657"+ "'", str9.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test083"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Rook rook4 = new Rook(chessBoard2, color3);
    rook4.setRow(100);
    java.util.ArrayList arrayList7 = rook4.legalMoves();
    int i8 = rook4.getColumn();
    ChessPiece.Color color9 = rook4.getColor();
    Bishop bishop10 = new Bishop(chessBoard0, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    King king27 = new King(chessBoard11, color23);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    Bishop bishop39 = new Bishop(chessBoard11, color35);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Pawn pawn45 = new Pawn(chessBoard43, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessBoard chessBoard49 = null;
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard49, color50);
    Pawn pawn52 = new Pawn(chessBoard46, color50);
    Pawn pawn53 = new Pawn(chessBoard43, color50);
    King king54 = new King(chessBoard40, color50);
    ChessPiece.Color color55 = ChessPiece.Color.BLACK;
    King king56 = new King(chessBoard40, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Bishop bishop61 = new Bishop(chessBoard57, color60);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Pawn pawn64 = new Pawn(chessBoard62, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Knight knight67 = new Knight(chessBoard65, color66);
    ChessBoard chessBoard68 = null;
    ChessPiece.Color color69 = ChessPiece.Color.WHITE;
    Rook rook70 = new Rook(chessBoard68, color69);
    Pawn pawn71 = new Pawn(chessBoard65, color69);
    Pawn pawn72 = new Pawn(chessBoard62, color69);
    ChessPiece.Color color73 = ChessPiece.Color.WHITE;
    Rook rook74 = new Rook(chessBoard62, color73);
    ChessBoard chessBoard75 = new ChessBoard();
    ChessPiece.Color color76 = null;
    Pawn pawn77 = new Pawn(chessBoard75, color76);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Knight knight80 = new Knight(chessBoard78, color79);
    ChessBoard chessBoard81 = null;
    ChessPiece.Color color82 = ChessPiece.Color.WHITE;
    Rook rook83 = new Rook(chessBoard81, color82);
    Pawn pawn84 = new Pawn(chessBoard78, color82);
    Pawn pawn85 = new Pawn(chessBoard75, color82);
    ChessPiece.Color color86 = ChessPiece.Color.WHITE;
    Rook rook87 = new Rook(chessBoard75, color86);
    Pawn pawn88 = new Pawn(chessBoard62, color86);
    Pawn pawn89 = new Pawn(chessBoard57, color86);
    Rook rook90 = new Rook(chessBoard40, color86);
    ChessBoard chessBoard91 = null;
    ChessPiece.Color color92 = ChessPiece.Color.WHITE;
    Rook rook93 = new Rook(chessBoard91, color92);
    ChessPiece.Color color94 = rook93.getColor();
    Queen queen95 = new Queen(chessBoard40, color94);
    Queen queen96 = new Queen(chessBoard11, color94);
    Bishop bishop97 = new Bishop(chessBoard0, color94);
    java.util.ArrayList arrayList98 = bishop97.legalMoves();
    int i99 = bishop97.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 0);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test084"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    java.util.ArrayList arrayList33 = pawn32.legalMoves();
    java.util.ArrayList arrayList34 = pawn32.legalMoves();
    int i35 = pawn32.getRow();
    java.lang.String str36 = pawn32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\u2659"+ "'", str36.equals("\u2659"));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test085"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    java.util.ArrayList arrayList4 = king2.legalMoves();
    int i5 = king2.getColumn();
    java.lang.String str6 = king2.toString();
    java.util.ArrayList arrayList7 = king2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265A"+ "'", str6.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test086"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.lang.String str4 = knight2.toString();
    knight2.setRow(100);
    java.lang.String str7 = knight2.toString();
    java.lang.String str8 = knight2.toString();
    java.lang.String str9 = knight2.toString();
    java.lang.String str10 = knight2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u265E"+ "'", str4.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u265E"+ "'", str7.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\u265E"+ "'", str8.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u265E"+ "'", str9.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u265E"+ "'", str10.equals("\u265E"));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test087"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.util.ArrayList arrayList13 = rook12.legalMoves();
    java.lang.String str14 = rook12.toString();
    java.util.ArrayList arrayList15 = rook12.legalMoves();
    int i16 = rook12.getRow();
    int i17 = rook12.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\u2656"+ "'", str14.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test088"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Pawn pawn49 = new Pawn(chessBoard47, color48);
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Knight knight52 = new Knight(chessBoard50, color51);
    ChessBoard chessBoard53 = null;
    ChessPiece.Color color54 = ChessPiece.Color.WHITE;
    Rook rook55 = new Rook(chessBoard53, color54);
    Pawn pawn56 = new Pawn(chessBoard50, color54);
    Pawn pawn57 = new Pawn(chessBoard47, color54);
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard47, color58);
    ChessPiece.Color color60 = null;
    Knight knight61 = new Knight(chessBoard47, color60);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Pawn pawn64 = new Pawn(chessBoard62, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Knight knight67 = new Knight(chessBoard65, color66);
    ChessBoard chessBoard68 = null;
    ChessPiece.Color color69 = ChessPiece.Color.WHITE;
    Rook rook70 = new Rook(chessBoard68, color69);
    Pawn pawn71 = new Pawn(chessBoard65, color69);
    Pawn pawn72 = new Pawn(chessBoard62, color69);
    ChessBoard chessBoard73 = new ChessBoard();
    ChessPiece.Color color74 = null;
    Pawn pawn75 = new Pawn(chessBoard73, color74);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Knight knight78 = new Knight(chessBoard76, color77);
    ChessBoard chessBoard79 = null;
    ChessPiece.Color color80 = ChessPiece.Color.WHITE;
    Rook rook81 = new Rook(chessBoard79, color80);
    Pawn pawn82 = new Pawn(chessBoard76, color80);
    Pawn pawn83 = new Pawn(chessBoard73, color80);
    ChessBoard chessBoard84 = new ChessBoard();
    ChessPiece.Color color85 = null;
    Knight knight86 = new Knight(chessBoard84, color85);
    ChessPiece.Color color87 = ChessPiece.Color.WHITE;
    Bishop bishop88 = new Bishop(chessBoard84, color87);
    King king89 = new King(chessBoard73, color87);
    Bishop bishop90 = new Bishop(chessBoard62, color87);
    Queen queen91 = new Queen(chessBoard47, color87);
    Bishop bishop92 = new Bishop(chessBoard0, color87);
    ChessPiece.Color color93 = bishop92.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color93);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test089"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    int i7 = pawn6.getColumn();
    java.util.ArrayList arrayList8 = pawn6.legalMoves();
    java.lang.String str9 = pawn6.getPosition();
    java.util.ArrayList arrayList10 = pawn6.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "a1"+ "'", str9.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test090"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.lang.String str4 = knight2.getPosition();
    java.util.ArrayList arrayList5 = knight2.legalMoves();
    int i6 = knight2.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a1"+ "'", str4.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test091"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.lang.String str4 = knight2.getPosition();
    java.util.ArrayList arrayList5 = knight2.legalMoves();
    java.lang.String str6 = knight2.toString();
    java.lang.String str7 = knight2.toString();
    knight2.setPosition("a2");
    java.util.ArrayList arrayList10 = knight2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a1"+ "'", str4.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265E"+ "'", str6.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u265E"+ "'", str7.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test092"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    King king30 = new King(chessBoard0, color28);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    java.lang.String str34 = chessBoard31.toString();
    java.lang.String str35 = chessBoard31.toString();
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Pawn pawn37 = new Pawn(chessBoard31, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    ChessPiece.Color color41 = rook40.getColor();
    Bishop bishop42 = new Bishop(chessBoard31, color41);
    Bishop bishop43 = new Bishop(chessBoard0, color41);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    Pawn pawn53 = new Pawn(chessBoard47, color51);
    Pawn pawn54 = new Pawn(chessBoard44, color51);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Pawn pawn57 = new Pawn(chessBoard55, color56);
    ChessBoard chessBoard58 = new ChessBoard();
    ChessPiece.Color color59 = null;
    Knight knight60 = new Knight(chessBoard58, color59);
    ChessBoard chessBoard61 = null;
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard61, color62);
    Pawn pawn64 = new Pawn(chessBoard58, color62);
    Pawn pawn65 = new Pawn(chessBoard55, color62);
    ChessPiece.Color color66 = ChessPiece.Color.WHITE;
    Rook rook67 = new Rook(chessBoard55, color66);
    java.lang.String str68 = chessBoard55.toString();
    ChessPiece chessPiece70 = chessBoard55.getPiece("a1");
    ChessBoard chessBoard71 = new ChessBoard();
    ChessPiece.Color color72 = null;
    Knight knight73 = new Knight(chessBoard71, color72);
    ChessBoard chessBoard74 = new ChessBoard();
    ChessPiece.Color color75 = null;
    Pawn pawn76 = new Pawn(chessBoard74, color75);
    ChessBoard chessBoard77 = new ChessBoard();
    ChessPiece.Color color78 = null;
    Knight knight79 = new Knight(chessBoard77, color78);
    ChessBoard chessBoard80 = null;
    ChessPiece.Color color81 = ChessPiece.Color.WHITE;
    Rook rook82 = new Rook(chessBoard80, color81);
    Pawn pawn83 = new Pawn(chessBoard77, color81);
    Pawn pawn84 = new Pawn(chessBoard74, color81);
    ChessPiece.Color color85 = ChessPiece.Color.WHITE;
    Rook rook86 = new Rook(chessBoard74, color85);
    Bishop bishop87 = new Bishop(chessBoard71, color85);
    Rook rook88 = new Rook(chessBoard55, color85);
    Queen queen89 = new Queen(chessBoard44, color85);
    Pawn pawn90 = new Pawn(chessBoard0, color85);
    int i91 = pawn90.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str34.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str35.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str68.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test093"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    int i7 = pawn6.getColumn();
    java.util.ArrayList arrayList8 = pawn6.legalMoves();
    pawn6.setRow(56);
    java.lang.String str11 = pawn6.toString();
    pawn6.setColumn(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u2659"+ "'", str11.equals("\u2659"));

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test094"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard63, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    King king77 = new King(chessBoard0, color74);
    chessBoard0.initialize();
    java.lang.String str79 = chessBoard0.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b82 = chessBoard0.move("\u2659", "\u2659");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str79.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test095"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Rook rook4 = new Rook(chessBoard2, color3);
    rook4.setRow(100);
    java.util.ArrayList arrayList7 = rook4.legalMoves();
    int i8 = rook4.getColumn();
    ChessPiece.Color color9 = rook4.getColor();
    Bishop bishop10 = new Bishop(chessBoard0, color9);
    java.lang.String str11 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str11.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test096"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    king8.setColumn(56);
    java.util.ArrayList arrayList11 = king8.legalMoves();
    java.lang.String str12 = king8.toString();
    int i13 = king8.getRow();
    java.util.ArrayList arrayList14 = king8.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u2654"+ "'", str12.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test097"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Bishop bishop68 = new Bishop(chessBoard64, color67);
    King king69 = new King(chessBoard53, color67);
    Bishop bishop70 = new Bishop(chessBoard42, color67);
    Rook rook71 = new Rook(chessBoard0, color67);
    int i72 = rook71.getColumn();
    java.lang.String str73 = rook71.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "\u2656"+ "'", str73.equals("\u2656"));

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test098"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = ChessPiece.Color.WHITE;
    Rook rook2 = new Rook(chessBoard0, color1);
    rook2.setRow(1);
    java.lang.String str5 = rook2.toString();
    java.lang.String str6 = rook2.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u2656"+ "'", str5.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a2"+ "'", str6.equals("a2"));

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test099"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    pawn6.setColumn(0);
    java.util.ArrayList arrayList9 = pawn6.legalMoves();
    java.util.ArrayList arrayList10 = pawn6.legalMoves();
    pawn6.setRow(7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test100"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    int i7 = pawn6.getColumn();
    int i8 = pawn6.getColumn();
    pawn6.setColumn(1);
    java.util.ArrayList arrayList11 = pawn6.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test101"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    King king30 = new King(chessBoard0, color28);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Pawn pawn36 = new Pawn(chessBoard34, color35);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessBoard chessBoard40 = null;
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard40, color41);
    Pawn pawn43 = new Pawn(chessBoard37, color41);
    Pawn pawn44 = new Pawn(chessBoard34, color41);
    King king45 = new King(chessBoard31, color41);
    ChessPiece.Color color46 = ChessPiece.Color.BLACK;
    King king47 = new King(chessBoard31, color46);
    java.lang.String str48 = chessBoard31.toString();
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Knight knight51 = new Knight(chessBoard49, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    King king63 = new King(chessBoard49, color59);
    ChessPiece.Color color64 = ChessPiece.Color.BLACK;
    King king65 = new King(chessBoard49, color64);
    java.lang.String str66 = chessBoard49.toString();
    ChessPiece.Color color67 = ChessPiece.Color.BLACK;
    Bishop bishop68 = new Bishop(chessBoard49, color67);
    King king69 = new King(chessBoard31, color67);
    // The following exception was thrown during execution in test generation
    try {
      boolean b71 = chessBoard0.placePiece((ChessPiece)king69, "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str48.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str66.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test102"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.getPosition();
    int i21 = queen18.getRow();
    java.util.ArrayList arrayList22 = queen18.legalMoves();
    java.util.ArrayList arrayList23 = queen18.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1"+ "'", str20.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test103"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    bishop41.setPosition("hi!");
    java.util.ArrayList arrayList44 = bishop41.legalMoves();
    java.lang.String str45 = bishop41.toString();
    int i46 = bishop41.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\u2657"+ "'", str45.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 56);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test104"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    bishop28.setColumn(0);
    int i31 = bishop28.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test105"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    java.util.ArrayList arrayList4 = king2.legalMoves();
    int i5 = king2.getColumn();
    java.lang.String str6 = king2.toString();
    java.lang.String str7 = king2.toString();
    java.lang.String str8 = king2.toString();
    ChessPiece.Color color9 = king2.getColor();
    java.util.ArrayList arrayList10 = king2.legalMoves();
    int i11 = king2.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265A"+ "'", str6.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u265A"+ "'", str7.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\u265A"+ "'", str8.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test106"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = null;
    ChessPiece.Color color6 = ChessPiece.Color.WHITE;
    Rook rook7 = new Rook(chessBoard5, color6);
    Rook rook8 = new Rook(chessBoard0, color6);
    ChessBoard chessBoard9 = new ChessBoard();
    ChessPiece.Color color10 = null;
    Pawn pawn11 = new Pawn(chessBoard9, color10);
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard12, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Pawn pawn18 = new Pawn(chessBoard12, color16);
    Pawn pawn19 = new Pawn(chessBoard9, color16);
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard9, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Bishop bishop25 = new Bishop(chessBoard9, color23);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Pawn pawn28 = new Pawn(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Pawn pawn35 = new Pawn(chessBoard29, color33);
    Pawn pawn36 = new Pawn(chessBoard26, color33);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Bishop bishop41 = new Bishop(chessBoard37, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    King king53 = new King(chessBoard37, color49);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Pawn pawn56 = new Pawn(chessBoard54, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    Pawn pawn63 = new Pawn(chessBoard57, color61);
    Pawn pawn64 = new Pawn(chessBoard54, color61);
    Bishop bishop65 = new Bishop(chessBoard37, color61);
    Rook rook66 = new Rook(chessBoard26, color61);
    Knight knight67 = new Knight(chessBoard9, color61);
    Queen queen68 = new Queen(chessBoard0, color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test107"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = new ChessBoard();
    ChessPiece.Color color3 = null;
    Knight knight4 = new Knight(chessBoard2, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Bishop bishop31 = new Bishop(chessBoard27, color30);
    King king32 = new King(chessBoard16, color30);
    Bishop bishop33 = new Bishop(chessBoard5, color30);
    Rook rook34 = new Rook(chessBoard2, color30);
    Rook rook35 = new Rook(chessBoard0, color30);
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard0, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Pawn pawn40 = new Pawn(chessBoard38, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessBoard chessBoard44 = null;
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard44, color45);
    Pawn pawn47 = new Pawn(chessBoard41, color45);
    Pawn pawn48 = new Pawn(chessBoard38, color45);
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard38, color49);
    ChessPiece.Color color51 = null;
    Knight knight52 = new Knight(chessBoard38, color51);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Pawn pawn66 = new Pawn(chessBoard64, color65);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Knight knight69 = new Knight(chessBoard67, color68);
    ChessBoard chessBoard70 = null;
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard70, color71);
    Pawn pawn73 = new Pawn(chessBoard67, color71);
    Pawn pawn74 = new Pawn(chessBoard64, color71);
    ChessBoard chessBoard75 = new ChessBoard();
    ChessPiece.Color color76 = null;
    Knight knight77 = new Knight(chessBoard75, color76);
    ChessPiece.Color color78 = ChessPiece.Color.WHITE;
    Bishop bishop79 = new Bishop(chessBoard75, color78);
    King king80 = new King(chessBoard64, color78);
    Bishop bishop81 = new Bishop(chessBoard53, color78);
    Queen queen82 = new Queen(chessBoard38, color78);
    java.lang.String str83 = queen82.toString();
    java.lang.String str84 = queen82.toString();
    queen82.setColumn(56);
    // The following exception was thrown during execution in test generation
    try {
      boolean b88 = chessBoard0.placePiece((ChessPiece)queen82, "\u2657");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "\u2655"+ "'", str83.equals("\u2655"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "\u2655"+ "'", str84.equals("\u2655"));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test108"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Pawn pawn43 = new Pawn(chessBoard17, color41);
    Knight knight44 = new Knight(chessBoard0, color41);
    java.lang.String str45 = knight44.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\u2658"+ "'", str45.equals("\u2658"));

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test109"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    chessBoard0.initialize();
    java.lang.String str15 = chessBoard0.toString();
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard19, color30);
    Bishop bishop32 = new Bishop(chessBoard16, color30);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Pawn pawn38 = new Pawn(chessBoard36, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Knight knight41 = new Knight(chessBoard39, color40);
    ChessBoard chessBoard42 = null;
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Rook rook44 = new Rook(chessBoard42, color43);
    Pawn pawn45 = new Pawn(chessBoard39, color43);
    Pawn pawn46 = new Pawn(chessBoard36, color43);
    King king47 = new King(chessBoard33, color43);
    ChessPiece.Color color48 = ChessPiece.Color.BLACK;
    King king49 = new King(chessBoard33, color48);
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Knight knight52 = new Knight(chessBoard50, color51);
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Bishop bishop54 = new Bishop(chessBoard50, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Pawn pawn57 = new Pawn(chessBoard55, color56);
    ChessBoard chessBoard58 = new ChessBoard();
    ChessPiece.Color color59 = null;
    Knight knight60 = new Knight(chessBoard58, color59);
    ChessBoard chessBoard61 = null;
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard61, color62);
    Pawn pawn64 = new Pawn(chessBoard58, color62);
    Pawn pawn65 = new Pawn(chessBoard55, color62);
    King king66 = new King(chessBoard50, color62);
    chessBoard50.initialize();
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Pawn pawn70 = new Pawn(chessBoard68, color69);
    java.lang.String str71 = chessBoard68.toString();
    java.lang.String str72 = chessBoard68.toString();
    ChessPiece.Color color73 = ChessPiece.Color.WHITE;
    Pawn pawn74 = new Pawn(chessBoard68, color73);
    Pawn pawn75 = new Pawn(chessBoard50, color73);
    Pawn pawn76 = new Pawn(chessBoard33, color73);
    Pawn pawn77 = new Pawn(chessBoard16, color73);
    Knight knight78 = new Knight(chessBoard0, color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str15.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str71.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str72.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test110"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    King king33 = new King(chessBoard19, color29);
    ChessPiece.Color color34 = ChessPiece.Color.BLACK;
    King king35 = new King(chessBoard19, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Pawn pawn38 = new Pawn(chessBoard36, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Knight knight41 = new Knight(chessBoard39, color40);
    ChessBoard chessBoard42 = null;
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Rook rook44 = new Rook(chessBoard42, color43);
    Pawn pawn45 = new Pawn(chessBoard39, color43);
    Pawn pawn46 = new Pawn(chessBoard36, color43);
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Rook rook48 = new Rook(chessBoard36, color47);
    King king49 = new King(chessBoard19, color47);
    Knight knight50 = new Knight(chessBoard0, color47);
    java.lang.String str51 = knight50.toString();
    java.lang.String str52 = knight50.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\u2658"+ "'", str51.equals("\u2658"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\u2658"+ "'", str52.equals("\u2658"));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test111"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.lang.String str4 = knight2.toString();
    java.lang.String str5 = knight2.toString();
    java.lang.String str6 = knight2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u265E"+ "'", str4.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u265E"+ "'", str5.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265E"+ "'", str6.equals("\u265E"));

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test112"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    Pawn pawn53 = new Pawn(chessBoard47, color51);
    Pawn pawn54 = new Pawn(chessBoard44, color51);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Bishop bishop59 = new Bishop(chessBoard55, color58);
    King king60 = new King(chessBoard44, color58);
    Bishop bishop61 = new Bishop(chessBoard33, color58);
    java.lang.String str62 = bishop61.toString();
    ChessPiece.Color color63 = bishop61.getColor();
    Pawn pawn64 = new Pawn(chessBoard0, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Knight knight78 = new Knight(chessBoard76, color77);
    ChessPiece.Color color79 = ChessPiece.Color.WHITE;
    Bishop bishop80 = new Bishop(chessBoard76, color79);
    King king81 = new King(chessBoard65, color79);
    ChessBoard chessBoard82 = new ChessBoard();
    ChessPiece.Color color83 = null;
    Knight knight84 = new Knight(chessBoard82, color83);
    ChessBoard chessBoard85 = null;
    ChessPiece.Color color86 = ChessPiece.Color.WHITE;
    Rook rook87 = new Rook(chessBoard85, color86);
    Pawn pawn88 = new Pawn(chessBoard82, color86);
    Bishop bishop89 = new Bishop(chessBoard65, color86);
    Queen queen90 = new Queen(chessBoard0, color86);
    java.lang.String str91 = queen90.toString();
    queen90.setRow((-1));
    queen90.setColumn(100);
    java.lang.String str96 = queen90.toString();
    queen90.setRow((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "\u2657"+ "'", str62.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "\u2655"+ "'", str91.equals("\u2655"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "\u2655"+ "'", str96.equals("\u2655"));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test113"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessBoard chessBoard7 = new ChessBoard();
    ChessPiece.Color color8 = null;
    Knight knight9 = new Knight(chessBoard7, color8);
    ChessBoard chessBoard10 = null;
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard10, color11);
    Pawn pawn13 = new Pawn(chessBoard7, color11);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Bishop bishop18 = new Bishop(chessBoard14, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    King king30 = new King(chessBoard14, color26);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessBoard chessBoard37 = null;
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard37, color38);
    Pawn pawn40 = new Pawn(chessBoard34, color38);
    Pawn pawn41 = new Pawn(chessBoard31, color38);
    Bishop bishop42 = new Bishop(chessBoard14, color38);
    King king43 = new King(chessBoard7, color38);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Bishop bishop48 = new Bishop(chessBoard44, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Pawn pawn51 = new Pawn(chessBoard49, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessBoard chessBoard55 = null;
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Rook rook57 = new Rook(chessBoard55, color56);
    Pawn pawn58 = new Pawn(chessBoard52, color56);
    Pawn pawn59 = new Pawn(chessBoard49, color56);
    King king60 = new King(chessBoard44, color56);
    Knight knight61 = new Knight(chessBoard7, color56);
    Pawn pawn62 = new Pawn(chessBoard0, color56);
    java.util.ArrayList arrayList63 = pawn62.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList63);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test114"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    pawn6.setColumn(0);
    java.lang.String str9 = pawn6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2659"+ "'", str9.equals("\u2659"));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test115"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Rook rook4 = new Rook(chessBoard2, color3);
    rook4.setRow(100);
    java.util.ArrayList arrayList7 = rook4.legalMoves();
    int i8 = rook4.getColumn();
    ChessPiece.Color color9 = rook4.getColor();
    Bishop bishop10 = new Bishop(chessBoard0, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    boolean b19 = chessBoard0.move("a101", " 1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test116"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    java.lang.String str20 = chessBoard17.toString();
    java.lang.String str21 = chessBoard17.toString();
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Pawn pawn23 = new Pawn(chessBoard17, color22);
    Queen queen24 = new Queen(chessBoard0, color22);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Bishop bishop29 = new Bishop(chessBoard25, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    King king41 = new King(chessBoard25, color37);
    chessBoard25.initialize();
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Pawn pawn45 = new Pawn(chessBoard43, color44);
    java.lang.String str46 = chessBoard43.toString();
    java.lang.String str47 = chessBoard43.toString();
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Pawn pawn49 = new Pawn(chessBoard43, color48);
    Pawn pawn50 = new Pawn(chessBoard25, color48);
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard51, color52);
    rook53.setRow(100);
    java.util.ArrayList arrayList56 = rook53.legalMoves();
    int i57 = rook53.getColumn();
    ChessPiece.Color color58 = rook53.getColor();
    Rook rook59 = new Rook(chessBoard25, color58);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Bishop bishop64 = new Bishop(chessBoard60, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Pawn pawn80 = new Pawn(chessBoard78, color79);
    ChessBoard chessBoard81 = new ChessBoard();
    ChessPiece.Color color82 = null;
    Knight knight83 = new Knight(chessBoard81, color82);
    ChessBoard chessBoard84 = null;
    ChessPiece.Color color85 = ChessPiece.Color.WHITE;
    Rook rook86 = new Rook(chessBoard84, color85);
    Pawn pawn87 = new Pawn(chessBoard81, color85);
    Pawn pawn88 = new Pawn(chessBoard78, color85);
    ChessPiece.Color color89 = ChessPiece.Color.WHITE;
    Rook rook90 = new Rook(chessBoard78, color89);
    Pawn pawn91 = new Pawn(chessBoard65, color89);
    Pawn pawn92 = new Pawn(chessBoard60, color89);
    java.lang.String str93 = pawn92.toString();
    ChessPiece.Color color94 = pawn92.getColor();
    Knight knight95 = new Knight(chessBoard25, color94);
    Bishop bishop96 = new Bishop(chessBoard0, color94);
    int i97 = bishop96.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str20.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str21.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str46.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str47.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "\u2659"+ "'", str93.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test117"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard3, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    bishop16.setRow(56);
    int i19 = bishop16.getColumn();
    java.lang.String str20 = bishop16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u2657"+ "'", str20.equals("\u2657"));

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test118"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    boolean b17 = chessBoard0.move("b1", "\u2654");
    boolean b20 = chessBoard0.move("a2", "\u2654");
    ChessPiece chessPiece22 = chessBoard0.getPiece("a101");
    java.lang.String str23 = chessBoard0.toString();
    ChessPiece.Color color24 = null;
    Queen queen25 = new Queen(chessBoard0, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Bishop bishop37 = new Bishop(chessBoard33, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Pawn pawn40 = new Pawn(chessBoard38, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessBoard chessBoard44 = null;
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard44, color45);
    Pawn pawn47 = new Pawn(chessBoard41, color45);
    Pawn pawn48 = new Pawn(chessBoard38, color45);
    King king49 = new King(chessBoard33, color45);
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Pawn pawn52 = new Pawn(chessBoard50, color51);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Knight knight55 = new Knight(chessBoard53, color54);
    ChessBoard chessBoard56 = null;
    ChessPiece.Color color57 = ChessPiece.Color.WHITE;
    Rook rook58 = new Rook(chessBoard56, color57);
    Pawn pawn59 = new Pawn(chessBoard53, color57);
    Pawn pawn60 = new Pawn(chessBoard50, color57);
    Bishop bishop61 = new Bishop(chessBoard33, color57);
    King king62 = new King(chessBoard26, color57);
    // The following exception was thrown during execution in test generation
    try {
      boolean b64 = chessBoard0.placePiece((ChessPiece)king62, "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str23.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test119"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    Bishop bishop28 = new Bishop(chessBoard0, color24);
    chessBoard0.initialize();
    chessBoard0.initialize();
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Bishop bishop35 = new Bishop(chessBoard31, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Pawn pawn38 = new Pawn(chessBoard36, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Knight knight41 = new Knight(chessBoard39, color40);
    ChessBoard chessBoard42 = null;
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Rook rook44 = new Rook(chessBoard42, color43);
    Pawn pawn45 = new Pawn(chessBoard39, color43);
    Pawn pawn46 = new Pawn(chessBoard36, color43);
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Rook rook48 = new Rook(chessBoard36, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Pawn pawn51 = new Pawn(chessBoard49, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessBoard chessBoard55 = null;
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Rook rook57 = new Rook(chessBoard55, color56);
    Pawn pawn58 = new Pawn(chessBoard52, color56);
    Pawn pawn59 = new Pawn(chessBoard49, color56);
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard49, color60);
    Pawn pawn62 = new Pawn(chessBoard36, color60);
    Pawn pawn63 = new Pawn(chessBoard31, color60);
    Rook rook64 = new Rook(chessBoard0, color60);
    boolean b67 = chessBoard0.move(" 57", "\u2655");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test120"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard63, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    King king77 = new King(chessBoard0, color74);
    chessBoard0.initialize();
    ChessBoard chessBoard79 = new ChessBoard();
    java.lang.String str80 = chessBoard79.toString();
    ChessBoard chessBoard81 = null;
    ChessPiece.Color color82 = ChessPiece.Color.WHITE;
    Rook rook83 = new Rook(chessBoard81, color82);
    rook83.setRow(100);
    java.util.ArrayList arrayList86 = rook83.legalMoves();
    int i87 = rook83.getColumn();
    ChessPiece.Color color88 = rook83.getColor();
    Bishop bishop89 = new Bishop(chessBoard79, color88);
    Rook rook90 = new Rook(chessBoard0, color88);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str80.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color88);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test121"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    ChessPiece.Color color5 = ChessPiece.Color.WHITE;
    Pawn pawn6 = new Pawn(chessBoard0, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    ChessPiece.Color color10 = rook9.getColor();
    Bishop bishop11 = new Bishop(chessBoard0, color10);
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard12, color23);
    java.lang.String str25 = chessBoard12.toString();
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Pawn pawn28 = new Pawn(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Pawn pawn35 = new Pawn(chessBoard29, color33);
    Pawn pawn36 = new Pawn(chessBoard26, color33);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard26, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard39, color50);
    Pawn pawn52 = new Pawn(chessBoard26, color50);
    Bishop bishop53 = new Bishop(chessBoard12, color50);
    Rook rook54 = new Rook(chessBoard0, color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str25.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test122"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    Pawn pawn26 = new Pawn(chessBoard0, color24);
    java.lang.String str27 = pawn26.toString();
    java.util.ArrayList arrayList28 = pawn26.legalMoves();
    java.lang.String str29 = pawn26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\u2659"+ "'", str27.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\u2659"+ "'", str29.equals("\u2659"));

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test123"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    Bishop bishop28 = new Bishop(chessBoard0, color24);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Pawn pawn34 = new Pawn(chessBoard32, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    Pawn pawn41 = new Pawn(chessBoard35, color39);
    Pawn pawn42 = new Pawn(chessBoard32, color39);
    King king43 = new King(chessBoard29, color39);
    ChessPiece.Color color44 = ChessPiece.Color.BLACK;
    King king45 = new King(chessBoard29, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Bishop bishop50 = new Bishop(chessBoard46, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Pawn pawn53 = new Pawn(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessBoard chessBoard57 = null;
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard57, color58);
    Pawn pawn60 = new Pawn(chessBoard54, color58);
    Pawn pawn61 = new Pawn(chessBoard51, color58);
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard51, color62);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Pawn pawn66 = new Pawn(chessBoard64, color65);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Knight knight69 = new Knight(chessBoard67, color68);
    ChessBoard chessBoard70 = null;
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard70, color71);
    Pawn pawn73 = new Pawn(chessBoard67, color71);
    Pawn pawn74 = new Pawn(chessBoard64, color71);
    ChessPiece.Color color75 = ChessPiece.Color.WHITE;
    Rook rook76 = new Rook(chessBoard64, color75);
    Pawn pawn77 = new Pawn(chessBoard51, color75);
    Pawn pawn78 = new Pawn(chessBoard46, color75);
    Rook rook79 = new Rook(chessBoard29, color75);
    ChessBoard chessBoard80 = null;
    ChessPiece.Color color81 = ChessPiece.Color.WHITE;
    Rook rook82 = new Rook(chessBoard80, color81);
    ChessPiece.Color color83 = rook82.getColor();
    Queen queen84 = new Queen(chessBoard29, color83);
    Queen queen85 = new Queen(chessBoard0, color83);
    java.util.ArrayList arrayList86 = queen85.legalMoves();
    queen85.setRow(0);
    int i89 = queen85.getRow();
    java.util.ArrayList arrayList90 = queen85.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList90);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test124"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.lang.String str4 = knight2.toString();
    java.lang.String str5 = knight2.toString();
    java.lang.String str6 = knight2.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u265E"+ "'", str4.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u265E"+ "'", str5.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a1"+ "'", str6.equals("a1"));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test125"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    java.util.ArrayList arrayList4 = king2.legalMoves();
    int i5 = king2.getRow();
    java.lang.String str6 = king2.toString();
    java.lang.String str7 = king2.toString();
    java.util.ArrayList arrayList8 = king2.legalMoves();
    int i9 = king2.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265A"+ "'", str6.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u265A"+ "'", str7.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test126"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.util.ArrayList arrayList8 = bishop7.legalMoves();
    java.lang.String str9 = bishop7.toString();
    java.lang.String str10 = bishop7.getPosition();
    java.lang.String str11 = bishop7.toString();
    bishop7.setColumn(0);
    java.lang.String str14 = bishop7.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2657"+ "'", str9.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "a1"+ "'", str10.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u2657"+ "'", str11.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a1"+ "'", str14.equals("a1"));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test127"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    java.util.ArrayList arrayList17 = bishop16.legalMoves();
    java.util.ArrayList arrayList18 = bishop16.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test128"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    boolean b17 = chessBoard0.move("b1", "\u2654");
    boolean b20 = chessBoard0.move("a2", "\u2654");
    boolean b23 = chessBoard0.move(" 1", "\u265D");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test129"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    King king30 = new King(chessBoard0, color28);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Pawn pawn36 = new Pawn(chessBoard34, color35);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessBoard chessBoard40 = null;
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard40, color41);
    Pawn pawn43 = new Pawn(chessBoard37, color41);
    Pawn pawn44 = new Pawn(chessBoard34, color41);
    King king45 = new King(chessBoard31, color41);
    ChessPiece.Color color46 = ChessPiece.Color.BLACK;
    King king47 = new King(chessBoard31, color46);
    java.lang.String str48 = chessBoard31.toString();
    ChessPiece.Color color49 = ChessPiece.Color.BLACK;
    Bishop bishop50 = new Bishop(chessBoard31, color49);
    Rook rook51 = new Rook(chessBoard0, color49);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    java.lang.String str65 = rook64.toString();
    java.lang.String str66 = rook64.toString();
    boolean b68 = chessBoard0.placePiece((ChessPiece)rook64, "a1");
    // The following exception was thrown during execution in test generation
    try {
      boolean b71 = chessBoard0.move("", "\u265D");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str48.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\u2656"+ "'", str65.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\u2656"+ "'", str66.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test130"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.lang.String str22 = queen18.toString();
    java.util.ArrayList arrayList23 = queen18.legalMoves();
    java.util.ArrayList arrayList24 = queen18.legalMoves();
    java.lang.String str25 = queen18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\u265B"+ "'", str25.equals("\u265B"));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test131"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = new ChessBoard();
    ChessPiece.Color color3 = null;
    Knight knight4 = new Knight(chessBoard2, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Bishop bishop31 = new Bishop(chessBoard27, color30);
    King king32 = new King(chessBoard16, color30);
    Bishop bishop33 = new Bishop(chessBoard5, color30);
    Rook rook34 = new Rook(chessBoard2, color30);
    Rook rook35 = new Rook(chessBoard0, color30);
    java.lang.String str36 = rook35.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\u2656"+ "'", str36.equals("\u2656"));

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test132"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece4 = chessBoard0.getPiece("\u2659");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test133"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.lang.String str22 = queen18.toString();
    java.lang.String str23 = queen18.toString();
    java.lang.String str24 = queen18.toString();
    java.lang.String str25 = queen18.toString();
    java.util.ArrayList arrayList26 = queen18.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u265B"+ "'", str23.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\u265B"+ "'", str24.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\u265B"+ "'", str25.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test134"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    java.lang.String str5 = chessBoard0.toString();
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Bishop bishop29 = new Bishop(chessBoard13, color27);
    ChessPiece.Color color30 = ChessPiece.Color.BLACK;
    Queen queen31 = new Queen(chessBoard13, color30);
    Queen queen32 = new Queen(chessBoard6, color30);
    Bishop bishop33 = new Bishop(chessBoard0, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    King king50 = new King(chessBoard34, color46);
    chessBoard34.initialize();
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    java.lang.String str55 = chessBoard52.toString();
    java.lang.String str56 = chessBoard52.toString();
    ChessPiece.Color color57 = ChessPiece.Color.WHITE;
    Pawn pawn58 = new Pawn(chessBoard52, color57);
    Pawn pawn59 = new Pawn(chessBoard34, color57);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    rook62.setRow(100);
    java.util.ArrayList arrayList65 = rook62.legalMoves();
    int i66 = rook62.getColumn();
    ChessPiece.Color color67 = rook62.getColor();
    Rook rook68 = new Rook(chessBoard34, color67);
    Bishop bishop69 = new Bishop(chessBoard0, color67);
    java.lang.String str70 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str5.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str55.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str56.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str70.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test135"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    java.lang.String str3 = knight2.getPosition();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    knight2.setRow(1);
    java.util.ArrayList arrayList7 = knight2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1"+ "'", str3.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test136"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.util.ArrayList arrayList21 = queen18.legalMoves();
    java.lang.String str22 = queen18.toString();
    java.lang.String str23 = queen18.toString();
    queen18.setColumn(1);
    int i26 = queen18.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u265B"+ "'", str23.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test137"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Pawn pawn26 = new Pawn(chessBoard24, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Pawn pawn33 = new Pawn(chessBoard27, color31);
    Pawn pawn34 = new Pawn(chessBoard24, color31);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Bishop bishop39 = new Bishop(chessBoard35, color38);
    King king40 = new King(chessBoard24, color38);
    Bishop bishop41 = new Bishop(chessBoard13, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Knight knight55 = new Knight(chessBoard53, color54);
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Bishop bishop57 = new Bishop(chessBoard53, color56);
    King king58 = new King(chessBoard42, color56);
    Knight knight59 = new Knight(chessBoard13, color56);
    King king60 = new King(chessBoard12, color56);
    Rook rook61 = new Rook(chessBoard11, color56);
    // The following exception was thrown during execution in test generation
    try {
      boolean b63 = chessBoard0.placePiece((ChessPiece)rook61, "\u2659");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test138"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    java.lang.String str60 = pawn59.toString();
    java.lang.String str61 = pawn59.toString();
    java.lang.String str62 = pawn59.toString();
    int i63 = pawn59.getColumn();
    java.lang.String str64 = pawn59.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\u2659"+ "'", str60.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "\u2659"+ "'", str61.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "\u2659"+ "'", str62.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\u2659"+ "'", str64.equals("\u2659"));

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test139"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Bishop bishop32 = new Bishop(chessBoard28, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    King king44 = new King(chessBoard28, color40);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Pawn pawn47 = new Pawn(chessBoard45, color46);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Knight knight50 = new Knight(chessBoard48, color49);
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard51, color52);
    Pawn pawn54 = new Pawn(chessBoard48, color52);
    Pawn pawn55 = new Pawn(chessBoard45, color52);
    Bishop bishop56 = new Bishop(chessBoard28, color52);
    Rook rook57 = new Rook(chessBoard17, color52);
    Knight knight58 = new Knight(chessBoard0, color52);
    chessBoard0.initialize();
    java.lang.String str60 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str60.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test140"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    rook12.setColumn(0);
    java.lang.String str15 = rook12.toString();
    java.util.ArrayList arrayList16 = rook12.legalMoves();
    java.util.ArrayList arrayList17 = rook12.legalMoves();
    java.util.ArrayList arrayList18 = rook12.legalMoves();
    java.lang.String str19 = rook12.toString();
    java.lang.String str20 = rook12.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\u2656"+ "'", str15.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u2656"+ "'", str19.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1"+ "'", str20.equals("a1"));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test141"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    java.lang.String str11 = chessBoard0.toString();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard12, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Pawn pawn18 = new Pawn(chessBoard12, color16);
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    King king20 = new King(chessBoard12, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Pawn pawn23 = new Pawn(chessBoard21, color22);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Knight knight26 = new Knight(chessBoard24, color25);
    ChessBoard chessBoard27 = null;
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard27, color28);
    Pawn pawn30 = new Pawn(chessBoard24, color28);
    Pawn pawn31 = new Pawn(chessBoard21, color28);
    ChessPiece.Color color32 = ChessPiece.Color.WHITE;
    Rook rook33 = new Rook(chessBoard21, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Bishop bishop37 = new Bishop(chessBoard21, color35);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Pawn pawn40 = new Pawn(chessBoard38, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessBoard chessBoard44 = null;
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard44, color45);
    Pawn pawn47 = new Pawn(chessBoard41, color45);
    Pawn pawn48 = new Pawn(chessBoard38, color45);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Knight knight51 = new Knight(chessBoard49, color50);
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Bishop bishop53 = new Bishop(chessBoard49, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Pawn pawn56 = new Pawn(chessBoard54, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    Pawn pawn63 = new Pawn(chessBoard57, color61);
    Pawn pawn64 = new Pawn(chessBoard54, color61);
    King king65 = new King(chessBoard49, color61);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Pawn pawn68 = new Pawn(chessBoard66, color67);
    ChessBoard chessBoard69 = new ChessBoard();
    ChessPiece.Color color70 = null;
    Knight knight71 = new Knight(chessBoard69, color70);
    ChessBoard chessBoard72 = null;
    ChessPiece.Color color73 = ChessPiece.Color.WHITE;
    Rook rook74 = new Rook(chessBoard72, color73);
    Pawn pawn75 = new Pawn(chessBoard69, color73);
    Pawn pawn76 = new Pawn(chessBoard66, color73);
    Bishop bishop77 = new Bishop(chessBoard49, color73);
    Rook rook78 = new Rook(chessBoard38, color73);
    Knight knight79 = new Knight(chessBoard21, color73);
    java.lang.String str80 = chessBoard21.toString();
    ChessBoard chessBoard81 = new ChessBoard();
    ChessPiece.Color color82 = null;
    Pawn pawn83 = new Pawn(chessBoard81, color82);
    ChessBoard chessBoard84 = new ChessBoard();
    ChessPiece.Color color85 = null;
    Knight knight86 = new Knight(chessBoard84, color85);
    ChessBoard chessBoard87 = null;
    ChessPiece.Color color88 = ChessPiece.Color.WHITE;
    Rook rook89 = new Rook(chessBoard87, color88);
    Pawn pawn90 = new Pawn(chessBoard84, color88);
    Pawn pawn91 = new Pawn(chessBoard81, color88);
    ChessPiece.Color color92 = ChessPiece.Color.WHITE;
    Rook rook93 = new Rook(chessBoard81, color92);
    ChessPiece.Color color94 = ChessPiece.Color.BLACK;
    Bishop bishop95 = new Bishop(chessBoard81, color94);
    Knight knight96 = new Knight(chessBoard21, color94);
    Bishop bishop97 = new Bishop(chessBoard12, color94);
    Bishop bishop98 = new Bishop(chessBoard0, color94);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str11.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str80.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color94);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test142"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    Knight knight12 = new Knight(chessBoard0, color8);
    chessBoard0.initialize();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    java.lang.String str27 = chessBoard14.toString();
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard28, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard41, color52);
    Pawn pawn54 = new Pawn(chessBoard28, color52);
    Bishop bishop55 = new Bishop(chessBoard14, color52);
    Knight knight56 = new Knight(chessBoard0, color52);
    // The following exception was thrown during execution in test generation
    try {
      boolean b59 = chessBoard0.move("\u265B", "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str27.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test143"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = ChessPiece.Color.BLACK;
    Bishop bishop14 = new Bishop(chessBoard0, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Queen queen18 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard19, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Pawn pawn34 = new Pawn(chessBoard32, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    Pawn pawn41 = new Pawn(chessBoard35, color39);
    Pawn pawn42 = new Pawn(chessBoard32, color39);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Rook rook44 = new Rook(chessBoard32, color43);
    Pawn pawn45 = new Pawn(chessBoard19, color43);
    chessBoard19.initialize();
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    ChessPiece.Color color53 = rook52.getColor();
    Bishop bishop54 = new Bishop(chessBoard47, color53);
    Knight knight55 = new Knight(chessBoard19, color53);
    Rook rook56 = new Rook(chessBoard0, color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test144"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    King king32 = new King(chessBoard0, color30);
    java.lang.String str33 = chessBoard0.toString();
    chessBoard0.initialize();
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard35, color46);
    rook47.setRow((-1));
    java.lang.String str50 = rook47.toString();
    rook47.setRow(0);
    rook47.setRow((-1));
    ChessPiece.Color color55 = rook47.getColor();
    King king56 = new King(chessBoard0, color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str33.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\u2656"+ "'", str50.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test145"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    Bishop bishop28 = new Bishop(chessBoard0, color24);
    chessBoard0.initialize();
    chessBoard0.initialize();
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Bishop bishop35 = new Bishop(chessBoard31, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Pawn pawn38 = new Pawn(chessBoard36, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Knight knight41 = new Knight(chessBoard39, color40);
    ChessBoard chessBoard42 = null;
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Rook rook44 = new Rook(chessBoard42, color43);
    Pawn pawn45 = new Pawn(chessBoard39, color43);
    Pawn pawn46 = new Pawn(chessBoard36, color43);
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Rook rook48 = new Rook(chessBoard36, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Pawn pawn51 = new Pawn(chessBoard49, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessBoard chessBoard55 = null;
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Rook rook57 = new Rook(chessBoard55, color56);
    Pawn pawn58 = new Pawn(chessBoard52, color56);
    Pawn pawn59 = new Pawn(chessBoard49, color56);
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard49, color60);
    Pawn pawn62 = new Pawn(chessBoard36, color60);
    Pawn pawn63 = new Pawn(chessBoard31, color60);
    Rook rook64 = new Rook(chessBoard0, color60);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece66 = chessBoard0.getPiece("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test146"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    java.lang.String str11 = chessBoard0.toString();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard12, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Pawn pawn18 = new Pawn(chessBoard12, color16);
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    King king20 = new King(chessBoard12, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Pawn pawn23 = new Pawn(chessBoard21, color22);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Knight knight26 = new Knight(chessBoard24, color25);
    ChessBoard chessBoard27 = null;
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard27, color28);
    Pawn pawn30 = new Pawn(chessBoard24, color28);
    Pawn pawn31 = new Pawn(chessBoard21, color28);
    ChessPiece.Color color32 = ChessPiece.Color.WHITE;
    Rook rook33 = new Rook(chessBoard21, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Bishop bishop37 = new Bishop(chessBoard21, color35);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Pawn pawn40 = new Pawn(chessBoard38, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessBoard chessBoard44 = null;
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard44, color45);
    Pawn pawn47 = new Pawn(chessBoard41, color45);
    Pawn pawn48 = new Pawn(chessBoard38, color45);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Knight knight51 = new Knight(chessBoard49, color50);
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Bishop bishop53 = new Bishop(chessBoard49, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Pawn pawn56 = new Pawn(chessBoard54, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    Pawn pawn63 = new Pawn(chessBoard57, color61);
    Pawn pawn64 = new Pawn(chessBoard54, color61);
    King king65 = new King(chessBoard49, color61);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Pawn pawn68 = new Pawn(chessBoard66, color67);
    ChessBoard chessBoard69 = new ChessBoard();
    ChessPiece.Color color70 = null;
    Knight knight71 = new Knight(chessBoard69, color70);
    ChessBoard chessBoard72 = null;
    ChessPiece.Color color73 = ChessPiece.Color.WHITE;
    Rook rook74 = new Rook(chessBoard72, color73);
    Pawn pawn75 = new Pawn(chessBoard69, color73);
    Pawn pawn76 = new Pawn(chessBoard66, color73);
    Bishop bishop77 = new Bishop(chessBoard49, color73);
    Rook rook78 = new Rook(chessBoard38, color73);
    Knight knight79 = new Knight(chessBoard21, color73);
    java.lang.String str80 = chessBoard21.toString();
    ChessBoard chessBoard81 = new ChessBoard();
    ChessPiece.Color color82 = null;
    Pawn pawn83 = new Pawn(chessBoard81, color82);
    ChessBoard chessBoard84 = new ChessBoard();
    ChessPiece.Color color85 = null;
    Knight knight86 = new Knight(chessBoard84, color85);
    ChessBoard chessBoard87 = null;
    ChessPiece.Color color88 = ChessPiece.Color.WHITE;
    Rook rook89 = new Rook(chessBoard87, color88);
    Pawn pawn90 = new Pawn(chessBoard84, color88);
    Pawn pawn91 = new Pawn(chessBoard81, color88);
    ChessPiece.Color color92 = ChessPiece.Color.WHITE;
    Rook rook93 = new Rook(chessBoard81, color92);
    ChessPiece.Color color94 = ChessPiece.Color.BLACK;
    Bishop bishop95 = new Bishop(chessBoard81, color94);
    Knight knight96 = new Knight(chessBoard21, color94);
    Bishop bishop97 = new Bishop(chessBoard12, color94);
    Bishop bishop98 = new Bishop(chessBoard0, color94);
    java.lang.String str99 = bishop98.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str11.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str80.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "\u265D"+ "'", str99.equals("\u265D"));

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test147"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Rook rook4 = new Rook(chessBoard2, color3);
    rook4.setRow(100);
    java.util.ArrayList arrayList7 = rook4.legalMoves();
    int i8 = rook4.getColumn();
    ChessPiece.Color color9 = rook4.getColor();
    Bishop bishop10 = new Bishop(chessBoard0, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    King king38 = new King(chessBoard22, color34);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    Bishop bishop50 = new Bishop(chessBoard22, color46);
    Rook rook51 = new Rook(chessBoard11, color46);
    Pawn pawn52 = new Pawn(chessBoard0, color46);
    java.lang.String str53 = chessBoard0.toString();
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessPiece.Color color57 = ChessPiece.Color.WHITE;
    Bishop bishop58 = new Bishop(chessBoard54, color57);
    Knight knight59 = new Knight(chessBoard0, color57);
    java.util.ArrayList arrayList60 = knight59.legalMoves();
    java.lang.String str61 = knight59.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str53.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "\u2658"+ "'", str61.equals("\u2658"));

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test148"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    Pawn pawn78 = new Pawn(chessBoard52, color76);
    Pawn pawn79 = new Pawn(chessBoard47, color76);
    java.util.ArrayList arrayList80 = pawn79.legalMoves();
    int i81 = pawn79.getRow();
    ChessPiece.Color color82 = pawn79.getColor();
    King king83 = new King(chessBoard0, color82);
    ChessPiece.Color color84 = null;
    Queen queen85 = new Queen(chessBoard0, color84);
    java.util.ArrayList arrayList86 = queen85.legalMoves();
    queen85.setColumn(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList86);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test149"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    chessBoard0.initialize();
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    java.lang.String str21 = chessBoard18.toString();
    java.lang.String str22 = chessBoard18.toString();
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Pawn pawn24 = new Pawn(chessBoard18, color23);
    Pawn pawn25 = new Pawn(chessBoard0, color23);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    King king40 = new King(chessBoard26, color36);
    ChessPiece.Color color41 = ChessPiece.Color.BLACK;
    King king42 = new King(chessBoard26, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Knight knight45 = new Knight(chessBoard43, color44);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Bishop bishop47 = new Bishop(chessBoard43, color46);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Pawn pawn50 = new Pawn(chessBoard48, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = null;
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Rook rook56 = new Rook(chessBoard54, color55);
    Pawn pawn57 = new Pawn(chessBoard51, color55);
    Pawn pawn58 = new Pawn(chessBoard48, color55);
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard48, color59);
    ChessBoard chessBoard61 = new ChessBoard();
    ChessPiece.Color color62 = null;
    Pawn pawn63 = new Pawn(chessBoard61, color62);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessBoard chessBoard67 = null;
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Rook rook69 = new Rook(chessBoard67, color68);
    Pawn pawn70 = new Pawn(chessBoard64, color68);
    Pawn pawn71 = new Pawn(chessBoard61, color68);
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard61, color72);
    Pawn pawn74 = new Pawn(chessBoard48, color72);
    Pawn pawn75 = new Pawn(chessBoard43, color72);
    Rook rook76 = new Rook(chessBoard26, color72);
    Knight knight77 = new Knight(chessBoard0, color72);
    ChessPiece.Color color78 = knight77.getColor();
    java.lang.String str79 = knight77.toString();
    java.lang.String str80 = knight77.toString();
    java.lang.String str81 = knight77.toString();
    java.util.ArrayList arrayList82 = knight77.legalMoves();
    java.lang.String str83 = knight77.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str21.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str22.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\u2658"+ "'", str79.equals("\u2658"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "\u2658"+ "'", str80.equals("\u2658"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "\u2658"+ "'", str81.equals("\u2658"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "a1"+ "'", str83.equals("a1"));

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test150"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Pawn pawn18 = new Pawn(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard20, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Rook rook45 = new Rook(chessBoard33, color44);
    Pawn pawn46 = new Pawn(chessBoard20, color44);
    Queen queen47 = new Queen(chessBoard0, color44);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test151"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    java.lang.String str12 = chessBoard0.toString();
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Knight knight15 = new Knight(chessBoard13, color14);
    ChessBoard chessBoard16 = null;
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Rook rook18 = new Rook(chessBoard16, color17);
    Pawn pawn19 = new Pawn(chessBoard13, color17);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Bishop bishop24 = new Bishop(chessBoard20, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Pawn pawn27 = new Pawn(chessBoard25, color26);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessBoard chessBoard31 = null;
    ChessPiece.Color color32 = ChessPiece.Color.WHITE;
    Rook rook33 = new Rook(chessBoard31, color32);
    Pawn pawn34 = new Pawn(chessBoard28, color32);
    Pawn pawn35 = new Pawn(chessBoard25, color32);
    King king36 = new King(chessBoard20, color32);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Pawn pawn39 = new Pawn(chessBoard37, color38);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessBoard chessBoard43 = null;
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Rook rook45 = new Rook(chessBoard43, color44);
    Pawn pawn46 = new Pawn(chessBoard40, color44);
    Pawn pawn47 = new Pawn(chessBoard37, color44);
    Bishop bishop48 = new Bishop(chessBoard20, color44);
    King king49 = new King(chessBoard13, color44);
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Knight knight52 = new Knight(chessBoard50, color51);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Pawn pawn66 = new Pawn(chessBoard64, color65);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Knight knight69 = new Knight(chessBoard67, color68);
    ChessBoard chessBoard70 = null;
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard70, color71);
    Pawn pawn73 = new Pawn(chessBoard67, color71);
    Pawn pawn74 = new Pawn(chessBoard64, color71);
    ChessBoard chessBoard75 = new ChessBoard();
    ChessPiece.Color color76 = null;
    Knight knight77 = new Knight(chessBoard75, color76);
    ChessPiece.Color color78 = ChessPiece.Color.WHITE;
    Bishop bishop79 = new Bishop(chessBoard75, color78);
    King king80 = new King(chessBoard64, color78);
    Bishop bishop81 = new Bishop(chessBoard53, color78);
    Rook rook82 = new Rook(chessBoard50, color78);
    King king83 = new King(chessBoard13, color78);
    Bishop bishop84 = new Bishop(chessBoard0, color78);
    ChessBoard chessBoard85 = new ChessBoard();
    ChessPiece.Color color86 = null;
    Knight knight87 = new Knight(chessBoard85, color86);
    ChessBoard chessBoard88 = null;
    ChessPiece.Color color89 = ChessPiece.Color.WHITE;
    Rook rook90 = new Rook(chessBoard88, color89);
    Pawn pawn91 = new Pawn(chessBoard85, color89);
    int i92 = pawn91.getColumn();
    java.util.ArrayList arrayList93 = pawn91.legalMoves();
    pawn91.setRow(56);
    ChessPiece.Color color96 = pawn91.getColor();
    Queen queen97 = new Queen(chessBoard0, color96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str12.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color96);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test152"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    ChessPiece.Color color42 = bishop41.getColor();
    java.lang.String str43 = bishop41.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "a1"+ "'", str43.equals("a1"));

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test153"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    Pawn pawn78 = new Pawn(chessBoard52, color76);
    Pawn pawn79 = new Pawn(chessBoard47, color76);
    java.util.ArrayList arrayList80 = pawn79.legalMoves();
    int i81 = pawn79.getRow();
    ChessPiece.Color color82 = pawn79.getColor();
    King king83 = new King(chessBoard0, color82);
    ChessPiece.Color color84 = null;
    Queen queen85 = new Queen(chessBoard0, color84);
    int i86 = queen85.getColumn();
    java.lang.String str87 = queen85.getPosition();
    java.util.ArrayList arrayList88 = queen85.legalMoves();
    java.util.ArrayList arrayList89 = queen85.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "a1"+ "'", str87.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList89);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test154"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Pawn pawn10 = new Pawn(chessBoard8, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessBoard chessBoard14 = null;
    ChessPiece.Color color15 = ChessPiece.Color.WHITE;
    Rook rook16 = new Rook(chessBoard14, color15);
    Pawn pawn17 = new Pawn(chessBoard11, color15);
    Pawn pawn18 = new Pawn(chessBoard8, color15);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Bishop bishop23 = new Bishop(chessBoard19, color22);
    King king24 = new King(chessBoard8, color22);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Bishop bishop32 = new Bishop(chessBoard8, color29);
    Pawn pawn33 = new Pawn(chessBoard0, color29);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard39, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    Pawn pawn65 = new Pawn(chessBoard39, color63);
    Pawn pawn66 = new Pawn(chessBoard34, color63);
    java.lang.String str67 = pawn66.toString();
    ChessPiece.Color color68 = pawn66.getColor();
    Bishop bishop69 = new Bishop(chessBoard0, color68);
    java.util.ArrayList arrayList70 = bishop69.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "\u2659"+ "'", str67.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList70);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test155"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    bishop4.setColumn(1);
    java.util.ArrayList arrayList7 = bishop4.legalMoves();
    int i8 = bishop4.getColumn();
    java.util.ArrayList arrayList9 = bishop4.legalMoves();
    java.lang.String str10 = bishop4.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "b1"+ "'", str10.equals("b1"));

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test156"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessBoard chessBoard73 = null;
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard73, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    Rook rook77 = new Rook(chessBoard0, color74);
    rook77.setColumn(7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test157"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.util.ArrayList arrayList22 = queen18.legalMoves();
    java.lang.String str23 = queen18.toString();
    java.lang.String str24 = queen18.toString();
    ChessPiece.Color color25 = queen18.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u265B"+ "'", str23.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\u265B"+ "'", str24.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test158"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Pawn pawn43 = new Pawn(chessBoard17, color41);
    Knight knight44 = new Knight(chessBoard0, color41);
    knight44.setRow(10);
    java.util.ArrayList arrayList47 = knight44.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList47);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test159"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    ChessPiece.Color color5 = ChessPiece.Color.WHITE;
    Pawn pawn6 = new Pawn(chessBoard0, color5);
    java.util.ArrayList arrayList7 = pawn6.legalMoves();
    int i8 = pawn6.getRow();
    java.util.ArrayList arrayList9 = pawn6.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test160"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Pawn pawn10 = new Pawn(chessBoard8, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessBoard chessBoard14 = null;
    ChessPiece.Color color15 = ChessPiece.Color.WHITE;
    Rook rook16 = new Rook(chessBoard14, color15);
    Pawn pawn17 = new Pawn(chessBoard11, color15);
    Pawn pawn18 = new Pawn(chessBoard8, color15);
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard8, color19);
    ChessPiece.Color color21 = ChessPiece.Color.BLACK;
    Bishop bishop22 = new Bishop(chessBoard8, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Pawn pawn36 = new Pawn(chessBoard34, color35);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessBoard chessBoard40 = null;
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard40, color41);
    Pawn pawn43 = new Pawn(chessBoard37, color41);
    Pawn pawn44 = new Pawn(chessBoard34, color41);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Bishop bishop49 = new Bishop(chessBoard45, color48);
    King king50 = new King(chessBoard34, color48);
    Bishop bishop51 = new Bishop(chessBoard23, color48);
    ChessBoard chessBoard52 = null;
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Rook rook54 = new Rook(chessBoard52, color53);
    King king55 = new King(chessBoard23, color53);
    Queen queen56 = new Queen(chessBoard8, color53);
    chessBoard8.initialize();
    ChessBoard chessBoard58 = new ChessBoard();
    ChessPiece.Color color59 = null;
    Knight knight60 = new Knight(chessBoard58, color59);
    ChessBoard chessBoard61 = new ChessBoard();
    ChessPiece.Color color62 = null;
    Pawn pawn63 = new Pawn(chessBoard61, color62);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessBoard chessBoard67 = null;
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Rook rook69 = new Rook(chessBoard67, color68);
    Pawn pawn70 = new Pawn(chessBoard64, color68);
    Pawn pawn71 = new Pawn(chessBoard61, color68);
    King king72 = new King(chessBoard58, color68);
    ChessPiece.Color color73 = ChessPiece.Color.BLACK;
    King king74 = new King(chessBoard58, color73);
    ChessBoard chessBoard75 = new ChessBoard();
    ChessPiece.Color color76 = null;
    Pawn pawn77 = new Pawn(chessBoard75, color76);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Knight knight80 = new Knight(chessBoard78, color79);
    ChessBoard chessBoard81 = null;
    ChessPiece.Color color82 = ChessPiece.Color.WHITE;
    Rook rook83 = new Rook(chessBoard81, color82);
    Pawn pawn84 = new Pawn(chessBoard78, color82);
    Pawn pawn85 = new Pawn(chessBoard75, color82);
    ChessPiece.Color color86 = ChessPiece.Color.WHITE;
    Rook rook87 = new Rook(chessBoard75, color86);
    King king88 = new King(chessBoard58, color86);
    Knight knight89 = new Knight(chessBoard8, color86);
    Rook rook90 = new Rook(chessBoard0, color86);
    chessBoard0.initialize();
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color86);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test161"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Knight knight3 = new Knight(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Pawn pawn6 = new Pawn(chessBoard4, color5);
    ChessBoard chessBoard7 = new ChessBoard();
    ChessPiece.Color color8 = null;
    Knight knight9 = new Knight(chessBoard7, color8);
    ChessBoard chessBoard10 = null;
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard10, color11);
    Pawn pawn13 = new Pawn(chessBoard7, color11);
    Pawn pawn14 = new Pawn(chessBoard4, color11);
    King king15 = new King(chessBoard1, color11);
    ChessPiece.Color color16 = ChessPiece.Color.BLACK;
    King king17 = new King(chessBoard1, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Bishop bishop22 = new Bishop(chessBoard18, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard23, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Pawn pawn38 = new Pawn(chessBoard36, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Knight knight41 = new Knight(chessBoard39, color40);
    ChessBoard chessBoard42 = null;
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Rook rook44 = new Rook(chessBoard42, color43);
    Pawn pawn45 = new Pawn(chessBoard39, color43);
    Pawn pawn46 = new Pawn(chessBoard36, color43);
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Rook rook48 = new Rook(chessBoard36, color47);
    Pawn pawn49 = new Pawn(chessBoard23, color47);
    Pawn pawn50 = new Pawn(chessBoard18, color47);
    Rook rook51 = new Rook(chessBoard1, color47);
    ChessBoard chessBoard52 = null;
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Rook rook54 = new Rook(chessBoard52, color53);
    ChessPiece.Color color55 = rook54.getColor();
    Queen queen56 = new Queen(chessBoard1, color55);
    Pawn pawn57 = new Pawn(chessBoard0, color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test162"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard3, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Bishop bishop33 = new Bishop(chessBoard17, color31);
    ChessPiece.Color color34 = ChessPiece.Color.BLACK;
    Queen queen35 = new Queen(chessBoard17, color34);
    Rook rook36 = new Rook(chessBoard0, color34);
    java.lang.String str37 = rook36.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\u265C"+ "'", str37.equals("\u265C"));

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test163"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Bishop bishop27 = new Bishop(chessBoard23, color26);
    King king28 = new King(chessBoard12, color26);
    Bishop bishop29 = new Bishop(chessBoard1, color26);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Bishop bishop45 = new Bishop(chessBoard41, color44);
    King king46 = new King(chessBoard30, color44);
    Knight knight47 = new Knight(chessBoard1, color44);
    King king48 = new King(chessBoard0, color44);
    java.lang.String str49 = chessBoard0.toString();
    chessBoard0.initialize();
    ChessPiece.Color color51 = null;
    Rook rook52 = new Rook(chessBoard0, color51);
    java.lang.String str53 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str49.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str53.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test164"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    Pawn pawn26 = new Pawn(chessBoard0, color24);
    java.lang.String str27 = pawn26.toString();
    java.lang.String str28 = pawn26.getPosition();
    java.lang.String str29 = pawn26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\u2659"+ "'", str27.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1"+ "'", str28.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\u2659"+ "'", str29.equals("\u2659"));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test165"); }


    ChessBoard chessBoard0 = null;
    ChessBoard chessBoard1 = new ChessBoard();
    java.lang.String str2 = chessBoard1.toString();
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    rook5.setRow(100);
    java.util.ArrayList arrayList8 = rook5.legalMoves();
    int i9 = rook5.getColumn();
    ChessPiece.Color color10 = rook5.getColor();
    Bishop bishop11 = new Bishop(chessBoard1, color10);
    Bishop bishop12 = new Bishop(chessBoard0, color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str2.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test166"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Pawn pawn43 = new Pawn(chessBoard17, color41);
    Knight knight44 = new Knight(chessBoard0, color41);
    boolean b47 = chessBoard0.move("a1", "b1");
    chessBoard0.initialize();
    ChessPiece chessPiece50 = chessBoard0.getPiece("a1");
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessPiece.Color color54 = ChessPiece.Color.WHITE;
    Bishop bishop55 = new Bishop(chessBoard51, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Pawn pawn58 = new Pawn(chessBoard56, color57);
    ChessBoard chessBoard59 = new ChessBoard();
    ChessPiece.Color color60 = null;
    Knight knight61 = new Knight(chessBoard59, color60);
    ChessBoard chessBoard62 = null;
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard62, color63);
    Pawn pawn65 = new Pawn(chessBoard59, color63);
    Pawn pawn66 = new Pawn(chessBoard56, color63);
    King king67 = new King(chessBoard51, color63);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Pawn pawn70 = new Pawn(chessBoard68, color69);
    ChessBoard chessBoard71 = new ChessBoard();
    ChessPiece.Color color72 = null;
    Knight knight73 = new Knight(chessBoard71, color72);
    ChessBoard chessBoard74 = null;
    ChessPiece.Color color75 = ChessPiece.Color.WHITE;
    Rook rook76 = new Rook(chessBoard74, color75);
    Pawn pawn77 = new Pawn(chessBoard71, color75);
    Pawn pawn78 = new Pawn(chessBoard68, color75);
    Bishop bishop79 = new Bishop(chessBoard51, color75);
    Rook rook80 = new Rook(chessBoard0, color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chessPiece50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test167"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Bishop bishop27 = new Bishop(chessBoard23, color26);
    King king28 = new King(chessBoard12, color26);
    Bishop bishop29 = new Bishop(chessBoard1, color26);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Bishop bishop45 = new Bishop(chessBoard41, color44);
    King king46 = new King(chessBoard30, color44);
    Knight knight47 = new Knight(chessBoard1, color44);
    King king48 = new King(chessBoard0, color44);
    java.lang.String str49 = chessBoard0.toString();
    chessBoard0.initialize();
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str49.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test168"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessBoard chessBoard7 = new ChessBoard();
    ChessPiece.Color color8 = null;
    Knight knight9 = new Knight(chessBoard7, color8);
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Bishop bishop11 = new Bishop(chessBoard7, color10);
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    King king23 = new King(chessBoard7, color19);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Pawn pawn26 = new Pawn(chessBoard24, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Pawn pawn33 = new Pawn(chessBoard27, color31);
    Pawn pawn34 = new Pawn(chessBoard24, color31);
    Bishop bishop35 = new Bishop(chessBoard7, color31);
    King king36 = new King(chessBoard0, color31);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Pawn pawn42 = new Pawn(chessBoard40, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Knight knight45 = new Knight(chessBoard43, color44);
    ChessBoard chessBoard46 = null;
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Rook rook48 = new Rook(chessBoard46, color47);
    Pawn pawn49 = new Pawn(chessBoard43, color47);
    Pawn pawn50 = new Pawn(chessBoard40, color47);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Pawn pawn53 = new Pawn(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessBoard chessBoard57 = null;
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard57, color58);
    Pawn pawn60 = new Pawn(chessBoard54, color58);
    Pawn pawn61 = new Pawn(chessBoard51, color58);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Knight knight64 = new Knight(chessBoard62, color63);
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Bishop bishop66 = new Bishop(chessBoard62, color65);
    King king67 = new King(chessBoard51, color65);
    Bishop bishop68 = new Bishop(chessBoard40, color65);
    Rook rook69 = new Rook(chessBoard37, color65);
    King king70 = new King(chessBoard0, color65);
    java.util.ArrayList arrayList71 = king70.legalMoves();
    java.lang.String str72 = king70.toString();
    java.lang.String str73 = king70.toString();
    java.util.ArrayList arrayList74 = king70.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\u2654"+ "'", str72.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "\u2654"+ "'", str73.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList74);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test169"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    java.lang.String str3 = knight2.toString();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    java.util.ArrayList arrayList5 = knight2.legalMoves();
    java.util.ArrayList arrayList6 = knight2.legalMoves();
    ChessPiece.Color color7 = knight2.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u265E"+ "'", str3.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color7);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test170"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.util.ArrayList arrayList22 = queen18.legalMoves();
    java.lang.String str23 = queen18.getPosition();
    int i24 = queen18.getColumn();
    queen18.setColumn(1);
    java.util.ArrayList arrayList27 = queen18.legalMoves();
    java.util.ArrayList arrayList28 = queen18.legalMoves();
    java.lang.String str29 = queen18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "a1"+ "'", str23.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\u265B"+ "'", str29.equals("\u265B"));

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test171"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    Pawn pawn26 = new Pawn(chessBoard0, color24);
    pawn26.setColumn(0);
    java.lang.String str29 = pawn26.toString();
    java.lang.String str30 = pawn26.getPosition();
    java.lang.String str31 = pawn26.toString();
    java.lang.String str32 = pawn26.getPosition();
    // The following exception was thrown during execution in test generation
    try {
      pawn26.setPosition("");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\u2659"+ "'", str29.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "a1"+ "'", str30.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\u2659"+ "'", str31.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "a1"+ "'", str32.equals("a1"));

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test172"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    java.util.ArrayList arrayList17 = king16.legalMoves();
    java.util.ArrayList arrayList18 = king16.legalMoves();
    java.lang.String str19 = king16.toString();
    java.util.ArrayList arrayList20 = king16.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265A"+ "'", str19.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test173"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.getPosition();
    java.lang.String str21 = queen18.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1"+ "'", str20.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "a1"+ "'", str21.equals("a1"));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test174"); }


    ChessBoard chessBoard0 = null;
    ChessBoard chessBoard1 = new ChessBoard();
    java.lang.String str2 = chessBoard1.toString();
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = null;
    King king5 = new King(chessBoard3, color4);
    ChessPiece.Color color6 = king5.getColor();
    king5.setRow(0);
    java.util.ArrayList arrayList9 = king5.legalMoves();
    boolean b11 = chessBoard1.placePiece((ChessPiece)king5, "a1");
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Bishop bishop13 = new Bishop(chessBoard1, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    java.lang.String str15 = chessBoard14.toString();
    ChessBoard chessBoard16 = null;
    ChessPiece.Color color17 = null;
    King king18 = new King(chessBoard16, color17);
    ChessPiece.Color color19 = king18.getColor();
    king18.setRow(0);
    java.util.ArrayList arrayList22 = king18.legalMoves();
    boolean b24 = chessBoard14.placePiece((ChessPiece)king18, "a1");
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard14, color25);
    Pawn pawn27 = new Pawn(chessBoard1, color25);
    Rook rook28 = new Rook(chessBoard0, color25);
    rook28.setPosition("b1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str2.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str15.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test175"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    java.lang.String str9 = king8.toString();
    java.lang.String str10 = king8.toString();
    java.util.ArrayList arrayList11 = king8.legalMoves();
    java.util.ArrayList arrayList12 = king8.legalMoves();
    king8.setPosition(" 1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2654"+ "'", str9.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u2654"+ "'", str10.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test176"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessBoard chessBoard7 = new ChessBoard();
    ChessPiece.Color color8 = null;
    Pawn pawn9 = new Pawn(chessBoard7, color8);
    ChessBoard chessBoard10 = new ChessBoard();
    ChessPiece.Color color11 = null;
    Knight knight12 = new Knight(chessBoard10, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Pawn pawn16 = new Pawn(chessBoard10, color14);
    Pawn pawn17 = new Pawn(chessBoard7, color14);
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard7, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Bishop bishop23 = new Bishop(chessBoard7, color21);
    ChessPiece.Color color24 = ChessPiece.Color.BLACK;
    Queen queen25 = new Queen(chessBoard7, color24);
    Queen queen26 = new Queen(chessBoard0, color24);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test177"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Pawn pawn43 = new Pawn(chessBoard17, color41);
    Knight knight44 = new Knight(chessBoard0, color41);
    boolean b47 = chessBoard0.move("a1", "b1");
    chessBoard0.initialize();
    ChessBoard chessBoard49 = null;
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard49, color50);
    ChessPiece.Color color52 = rook51.getColor();
    Bishop bishop53 = new Bishop(chessBoard0, color52);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test178"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = new ChessBoard();
    ChessPiece.Color color3 = null;
    Pawn pawn4 = new Pawn(chessBoard2, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Knight knight7 = new Knight(chessBoard5, color6);
    ChessBoard chessBoard8 = null;
    ChessPiece.Color color9 = ChessPiece.Color.WHITE;
    Rook rook10 = new Rook(chessBoard8, color9);
    Pawn pawn11 = new Pawn(chessBoard5, color9);
    Pawn pawn12 = new Pawn(chessBoard2, color9);
    ChessPiece.Color color13 = ChessPiece.Color.WHITE;
    Rook rook14 = new Rook(chessBoard2, color13);
    java.lang.String str15 = chessBoard2.toString();
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard16, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard29, color40);
    Pawn pawn42 = new Pawn(chessBoard16, color40);
    Bishop bishop43 = new Bishop(chessBoard2, color40);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    Pawn pawn53 = new Pawn(chessBoard47, color51);
    Pawn pawn54 = new Pawn(chessBoard44, color51);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Pawn pawn57 = new Pawn(chessBoard55, color56);
    ChessBoard chessBoard58 = new ChessBoard();
    ChessPiece.Color color59 = null;
    Knight knight60 = new Knight(chessBoard58, color59);
    ChessBoard chessBoard61 = null;
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard61, color62);
    Pawn pawn64 = new Pawn(chessBoard58, color62);
    Pawn pawn65 = new Pawn(chessBoard55, color62);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessPiece.Color color69 = ChessPiece.Color.WHITE;
    Bishop bishop70 = new Bishop(chessBoard66, color69);
    King king71 = new King(chessBoard55, color69);
    Bishop bishop72 = new Bishop(chessBoard44, color69);
    Rook rook73 = new Rook(chessBoard2, color69);
    Bishop bishop74 = new Bishop(chessBoard0, color69);
    ChessPiece chessPiece76 = chessBoard0.getPiece("a1");
    ChessBoard chessBoard77 = new ChessBoard();
    ChessPiece.Color color78 = null;
    Pawn pawn79 = new Pawn(chessBoard77, color78);
    ChessBoard chessBoard80 = new ChessBoard();
    ChessPiece.Color color81 = null;
    Knight knight82 = new Knight(chessBoard80, color81);
    ChessBoard chessBoard83 = null;
    ChessPiece.Color color84 = ChessPiece.Color.WHITE;
    Rook rook85 = new Rook(chessBoard83, color84);
    Pawn pawn86 = new Pawn(chessBoard80, color84);
    Pawn pawn87 = new Pawn(chessBoard77, color84);
    Queen queen88 = new Queen(chessBoard0, color84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str15.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color84);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test179"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece4 = chessBoard0.getPiece("\u2658");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test180"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.lang.String str22 = queen18.toString();
    java.util.ArrayList arrayList23 = queen18.legalMoves();
    java.lang.String str24 = queen18.toString();
    java.lang.String str25 = queen18.toString();
    java.util.ArrayList arrayList26 = queen18.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\u265B"+ "'", str24.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\u265B"+ "'", str25.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test181"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    Pawn pawn78 = new Pawn(chessBoard52, color76);
    Pawn pawn79 = new Pawn(chessBoard47, color76);
    java.util.ArrayList arrayList80 = pawn79.legalMoves();
    int i81 = pawn79.getRow();
    ChessPiece.Color color82 = pawn79.getColor();
    King king83 = new King(chessBoard0, color82);
    java.lang.String str84 = king83.toString();
    king83.setColumn(0);
    java.lang.String str87 = king83.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "\u2654"+ "'", str84.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "\u2654"+ "'", str87.equals("\u2654"));

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test182"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    boolean b17 = chessBoard0.move("b1", "\u2654");
    boolean b20 = chessBoard0.move("a2", "\u2654");
    ChessPiece chessPiece22 = chessBoard0.getPiece("a101");
    ChessBoard chessBoard23 = null;
    ChessBoard chessBoard24 = new ChessBoard();
    java.lang.String str25 = chessBoard24.toString();
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    rook28.setRow(100);
    java.util.ArrayList arrayList31 = rook28.legalMoves();
    int i32 = rook28.getColumn();
    ChessPiece.Color color33 = rook28.getColor();
    Bishop bishop34 = new Bishop(chessBoard24, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Bishop bishop50 = new Bishop(chessBoard46, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Pawn pawn53 = new Pawn(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessBoard chessBoard57 = null;
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard57, color58);
    Pawn pawn60 = new Pawn(chessBoard54, color58);
    Pawn pawn61 = new Pawn(chessBoard51, color58);
    King king62 = new King(chessBoard46, color58);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    Bishop bishop74 = new Bishop(chessBoard46, color70);
    Rook rook75 = new Rook(chessBoard35, color70);
    Pawn pawn76 = new Pawn(chessBoard24, color70);
    java.lang.String str77 = chessBoard24.toString();
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Knight knight80 = new Knight(chessBoard78, color79);
    ChessPiece.Color color81 = ChessPiece.Color.WHITE;
    Bishop bishop82 = new Bishop(chessBoard78, color81);
    Knight knight83 = new Knight(chessBoard24, color81);
    Queen queen84 = new Queen(chessBoard23, color81);
    Pawn pawn85 = new Pawn(chessBoard0, color81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str25.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str77.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color81);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test183"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    java.lang.String str20 = chessBoard17.toString();
    java.lang.String str21 = chessBoard17.toString();
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Pawn pawn23 = new Pawn(chessBoard17, color22);
    Queen queen24 = new Queen(chessBoard0, color22);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Pawn pawn27 = new Pawn(chessBoard25, color26);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessBoard chessBoard31 = null;
    ChessPiece.Color color32 = ChessPiece.Color.WHITE;
    Rook rook33 = new Rook(chessBoard31, color32);
    Pawn pawn34 = new Pawn(chessBoard28, color32);
    Pawn pawn35 = new Pawn(chessBoard25, color32);
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard25, color36);
    ChessPiece.Color color38 = ChessPiece.Color.BLACK;
    Bishop bishop39 = new Bishop(chessBoard25, color38);
    ChessBoard chessBoard40 = null;
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard40, color41);
    Queen queen43 = new Queen(chessBoard25, color41);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    Pawn pawn53 = new Pawn(chessBoard47, color51);
    Pawn pawn54 = new Pawn(chessBoard44, color51);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Rook rook56 = new Rook(chessBoard44, color55);
    ChessBoard chessBoard57 = null;
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard57, color58);
    Bishop bishop60 = new Bishop(chessBoard44, color58);
    ChessPiece.Color color61 = ChessPiece.Color.BLACK;
    Queen queen62 = new Queen(chessBoard44, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Pawn pawn68 = new Pawn(chessBoard66, color67);
    ChessBoard chessBoard69 = new ChessBoard();
    ChessPiece.Color color70 = null;
    Knight knight71 = new Knight(chessBoard69, color70);
    ChessBoard chessBoard72 = null;
    ChessPiece.Color color73 = ChessPiece.Color.WHITE;
    Rook rook74 = new Rook(chessBoard72, color73);
    Pawn pawn75 = new Pawn(chessBoard69, color73);
    Pawn pawn76 = new Pawn(chessBoard66, color73);
    King king77 = new King(chessBoard63, color73);
    ChessPiece.Color color78 = ChessPiece.Color.BLACK;
    King king79 = new King(chessBoard63, color78);
    ChessBoard chessBoard80 = new ChessBoard();
    ChessPiece.Color color81 = null;
    Pawn pawn82 = new Pawn(chessBoard80, color81);
    ChessBoard chessBoard83 = new ChessBoard();
    ChessPiece.Color color84 = null;
    Knight knight85 = new Knight(chessBoard83, color84);
    ChessBoard chessBoard86 = null;
    ChessPiece.Color color87 = ChessPiece.Color.WHITE;
    Rook rook88 = new Rook(chessBoard86, color87);
    Pawn pawn89 = new Pawn(chessBoard83, color87);
    Pawn pawn90 = new Pawn(chessBoard80, color87);
    ChessPiece.Color color91 = ChessPiece.Color.WHITE;
    Rook rook92 = new Rook(chessBoard80, color91);
    King king93 = new King(chessBoard63, color91);
    Knight knight94 = new Knight(chessBoard44, color91);
    Knight knight95 = new Knight(chessBoard25, color91);
    Queen queen96 = new Queen(chessBoard0, color91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str20.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str21.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color91);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test184"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Pawn pawn49 = new Pawn(chessBoard47, color48);
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Knight knight52 = new Knight(chessBoard50, color51);
    ChessBoard chessBoard53 = null;
    ChessPiece.Color color54 = ChessPiece.Color.WHITE;
    Rook rook55 = new Rook(chessBoard53, color54);
    Pawn pawn56 = new Pawn(chessBoard50, color54);
    Pawn pawn57 = new Pawn(chessBoard47, color54);
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard47, color58);
    ChessPiece.Color color60 = null;
    Knight knight61 = new Knight(chessBoard47, color60);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Pawn pawn64 = new Pawn(chessBoard62, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Knight knight67 = new Knight(chessBoard65, color66);
    ChessBoard chessBoard68 = null;
    ChessPiece.Color color69 = ChessPiece.Color.WHITE;
    Rook rook70 = new Rook(chessBoard68, color69);
    Pawn pawn71 = new Pawn(chessBoard65, color69);
    Pawn pawn72 = new Pawn(chessBoard62, color69);
    ChessBoard chessBoard73 = new ChessBoard();
    ChessPiece.Color color74 = null;
    Pawn pawn75 = new Pawn(chessBoard73, color74);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Knight knight78 = new Knight(chessBoard76, color77);
    ChessBoard chessBoard79 = null;
    ChessPiece.Color color80 = ChessPiece.Color.WHITE;
    Rook rook81 = new Rook(chessBoard79, color80);
    Pawn pawn82 = new Pawn(chessBoard76, color80);
    Pawn pawn83 = new Pawn(chessBoard73, color80);
    ChessBoard chessBoard84 = new ChessBoard();
    ChessPiece.Color color85 = null;
    Knight knight86 = new Knight(chessBoard84, color85);
    ChessPiece.Color color87 = ChessPiece.Color.WHITE;
    Bishop bishop88 = new Bishop(chessBoard84, color87);
    King king89 = new King(chessBoard73, color87);
    Bishop bishop90 = new Bishop(chessBoard62, color87);
    Queen queen91 = new Queen(chessBoard47, color87);
    Bishop bishop92 = new Bishop(chessBoard0, color87);
    java.util.ArrayList arrayList93 = bishop92.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList93);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test185"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.lang.String str4 = knight2.toString();
    knight2.setRow(100);
    knight2.setRow((-1));
    ChessPiece.Color color9 = knight2.getColor();
    knight2.setColumn(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u265E"+ "'", str4.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color9);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test186"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    King king27 = new King(chessBoard11, color23);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    Bishop bishop39 = new Bishop(chessBoard11, color35);
    Rook rook40 = new Rook(chessBoard0, color35);
    int i41 = rook40.getColumn();
    java.lang.String str42 = rook40.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\u2656"+ "'", str42.equals("\u2656"));

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test187"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    Knight knight12 = new Knight(chessBoard0, color8);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Knight knight15 = new Knight(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    King king27 = new King(chessBoard13, color23);
    ChessPiece.Color color28 = ChessPiece.Color.BLACK;
    King king29 = new King(chessBoard13, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    King king43 = new King(chessBoard13, color41);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    java.lang.String str47 = chessBoard44.toString();
    java.lang.String str48 = chessBoard44.toString();
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Pawn pawn50 = new Pawn(chessBoard44, color49);
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard51, color52);
    ChessPiece.Color color54 = rook53.getColor();
    Bishop bishop55 = new Bishop(chessBoard44, color54);
    Bishop bishop56 = new Bishop(chessBoard13, color54);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Bishop bishop61 = new Bishop(chessBoard57, color60);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Knight knight64 = new Knight(chessBoard62, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    King king76 = new King(chessBoard62, color72);
    ChessPiece.Color color77 = ChessPiece.Color.BLACK;
    King king78 = new King(chessBoard62, color77);
    ChessBoard chessBoard79 = new ChessBoard();
    ChessPiece.Color color80 = null;
    Pawn pawn81 = new Pawn(chessBoard79, color80);
    ChessBoard chessBoard82 = new ChessBoard();
    ChessPiece.Color color83 = null;
    Knight knight84 = new Knight(chessBoard82, color83);
    ChessBoard chessBoard85 = null;
    ChessPiece.Color color86 = ChessPiece.Color.WHITE;
    Rook rook87 = new Rook(chessBoard85, color86);
    Pawn pawn88 = new Pawn(chessBoard82, color86);
    Pawn pawn89 = new Pawn(chessBoard79, color86);
    ChessPiece.Color color90 = ChessPiece.Color.WHITE;
    Rook rook91 = new Rook(chessBoard79, color90);
    King king92 = new King(chessBoard62, color90);
    Rook rook93 = new Rook(chessBoard57, color90);
    Pawn pawn94 = new Pawn(chessBoard13, color90);
    Queen queen95 = new Queen(chessBoard0, color90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str47.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str48.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color90);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test188"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    Pawn pawn26 = new Pawn(chessBoard0, color24);
    pawn26.setColumn(0);
    java.lang.String str29 = pawn26.toString();
    java.lang.String str30 = pawn26.getPosition();
    pawn26.setRow(100);
    int i33 = pawn26.getRow();
    pawn26.setRow(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\u2659"+ "'", str29.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "a1"+ "'", str30.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 100);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test189"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Bishop bishop32 = new Bishop(chessBoard28, color31);
    King king33 = new King(chessBoard17, color31);
    Knight knight34 = new Knight(chessBoard0, color31);
    ChessBoard chessBoard35 = null;
    ChessBoard chessBoard36 = new ChessBoard();
    java.lang.String str37 = chessBoard36.toString();
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = null;
    King king40 = new King(chessBoard38, color39);
    ChessPiece.Color color41 = king40.getColor();
    king40.setRow(0);
    java.util.ArrayList arrayList44 = king40.legalMoves();
    boolean b46 = chessBoard36.placePiece((ChessPiece)king40, "a1");
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Bishop bishop48 = new Bishop(chessBoard36, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    java.lang.String str50 = chessBoard49.toString();
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = null;
    King king53 = new King(chessBoard51, color52);
    ChessPiece.Color color54 = king53.getColor();
    king53.setRow(0);
    java.util.ArrayList arrayList57 = king53.legalMoves();
    boolean b59 = chessBoard49.placePiece((ChessPiece)king53, "a1");
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Bishop bishop61 = new Bishop(chessBoard49, color60);
    Pawn pawn62 = new Pawn(chessBoard36, color60);
    Rook rook63 = new Rook(chessBoard35, color60);
    Queen queen64 = new Queen(chessBoard0, color60);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Knight knight67 = new Knight(chessBoard65, color66);
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Bishop bishop69 = new Bishop(chessBoard65, color68);
    ChessBoard chessBoard70 = new ChessBoard();
    ChessPiece.Color color71 = null;
    Pawn pawn72 = new Pawn(chessBoard70, color71);
    ChessBoard chessBoard73 = new ChessBoard();
    ChessPiece.Color color74 = null;
    Knight knight75 = new Knight(chessBoard73, color74);
    ChessBoard chessBoard76 = null;
    ChessPiece.Color color77 = ChessPiece.Color.WHITE;
    Rook rook78 = new Rook(chessBoard76, color77);
    Pawn pawn79 = new Pawn(chessBoard73, color77);
    Pawn pawn80 = new Pawn(chessBoard70, color77);
    ChessPiece.Color color81 = ChessPiece.Color.WHITE;
    Rook rook82 = new Rook(chessBoard70, color81);
    ChessBoard chessBoard83 = new ChessBoard();
    ChessPiece.Color color84 = null;
    Pawn pawn85 = new Pawn(chessBoard83, color84);
    ChessBoard chessBoard86 = new ChessBoard();
    ChessPiece.Color color87 = null;
    Knight knight88 = new Knight(chessBoard86, color87);
    ChessBoard chessBoard89 = null;
    ChessPiece.Color color90 = ChessPiece.Color.WHITE;
    Rook rook91 = new Rook(chessBoard89, color90);
    Pawn pawn92 = new Pawn(chessBoard86, color90);
    Pawn pawn93 = new Pawn(chessBoard83, color90);
    ChessPiece.Color color94 = ChessPiece.Color.WHITE;
    Rook rook95 = new Rook(chessBoard83, color94);
    Pawn pawn96 = new Pawn(chessBoard70, color94);
    Pawn pawn97 = new Pawn(chessBoard65, color94);
    King king98 = new King(chessBoard0, color94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str37.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str50.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color94);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test190"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    Bishop bishop28 = new Bishop(chessBoard0, color24);
    chessBoard0.initialize();
    java.lang.String str30 = chessBoard0.toString();
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Bishop bishop42 = new Bishop(chessBoard38, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Pawn pawn45 = new Pawn(chessBoard43, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessBoard chessBoard49 = null;
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard49, color50);
    Pawn pawn52 = new Pawn(chessBoard46, color50);
    Pawn pawn53 = new Pawn(chessBoard43, color50);
    King king54 = new King(chessBoard38, color50);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Pawn pawn57 = new Pawn(chessBoard55, color56);
    ChessBoard chessBoard58 = new ChessBoard();
    ChessPiece.Color color59 = null;
    Knight knight60 = new Knight(chessBoard58, color59);
    ChessBoard chessBoard61 = null;
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard61, color62);
    Pawn pawn64 = new Pawn(chessBoard58, color62);
    Pawn pawn65 = new Pawn(chessBoard55, color62);
    Bishop bishop66 = new Bishop(chessBoard38, color62);
    King king67 = new King(chessBoard31, color62);
    Bishop bishop68 = new Bishop(chessBoard0, color62);
    chessBoard0.initialize();
    ChessPiece chessPiece70 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b72 = chessBoard0.placePiece(chessPiece70, "\u265B");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str30.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test191"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    King king30 = new King(chessBoard0, color28);
    java.util.ArrayList arrayList31 = king30.legalMoves();
    int i32 = king30.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test192"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Bishop bishop32 = new Bishop(chessBoard28, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    King king44 = new King(chessBoard28, color40);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Pawn pawn47 = new Pawn(chessBoard45, color46);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Knight knight50 = new Knight(chessBoard48, color49);
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard51, color52);
    Pawn pawn54 = new Pawn(chessBoard48, color52);
    Pawn pawn55 = new Pawn(chessBoard45, color52);
    Bishop bishop56 = new Bishop(chessBoard28, color52);
    Rook rook57 = new Rook(chessBoard17, color52);
    Knight knight58 = new Knight(chessBoard0, color52);
    java.lang.String str59 = chessBoard0.toString();
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessPiece.Color color73 = ChessPiece.Color.BLACK;
    Bishop bishop74 = new Bishop(chessBoard60, color73);
    Knight knight75 = new Knight(chessBoard0, color73);
    knight75.setRow(10);
    java.lang.String str78 = knight75.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str59.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "a11"+ "'", str78.equals("a11"));

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test193"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard12, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Pawn pawn18 = new Pawn(chessBoard12, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard19, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Bishop bishop35 = new Bishop(chessBoard19, color33);
    ChessPiece.Color color36 = ChessPiece.Color.BLACK;
    Queen queen37 = new Queen(chessBoard19, color36);
    Queen queen38 = new Queen(chessBoard12, color36);
    Bishop bishop39 = new Bishop(chessBoard0, color36);
    bishop39.setColumn(100);
    java.util.ArrayList arrayList42 = bishop39.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList42);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test194"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    java.lang.String str5 = chessBoard0.toString();
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Bishop bishop29 = new Bishop(chessBoard13, color27);
    ChessPiece.Color color30 = ChessPiece.Color.BLACK;
    Queen queen31 = new Queen(chessBoard13, color30);
    Queen queen32 = new Queen(chessBoard6, color30);
    Bishop bishop33 = new Bishop(chessBoard0, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Pawn pawn36 = new Pawn(chessBoard34, color35);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessBoard chessBoard40 = null;
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard40, color41);
    Pawn pawn43 = new Pawn(chessBoard37, color41);
    Pawn pawn44 = new Pawn(chessBoard34, color41);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Bishop bishop49 = new Bishop(chessBoard45, color48);
    King king50 = new King(chessBoard34, color48);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Pawn pawn56 = new Pawn(chessBoard54, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    Pawn pawn63 = new Pawn(chessBoard57, color61);
    Pawn pawn64 = new Pawn(chessBoard54, color61);
    King king65 = new King(chessBoard51, color61);
    ChessPiece.Color color66 = ChessPiece.Color.BLACK;
    King king67 = new King(chessBoard51, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Bishop bishop72 = new Bishop(chessBoard68, color71);
    ChessBoard chessBoard73 = new ChessBoard();
    ChessPiece.Color color74 = null;
    Pawn pawn75 = new Pawn(chessBoard73, color74);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Knight knight78 = new Knight(chessBoard76, color77);
    ChessBoard chessBoard79 = null;
    ChessPiece.Color color80 = ChessPiece.Color.WHITE;
    Rook rook81 = new Rook(chessBoard79, color80);
    Pawn pawn82 = new Pawn(chessBoard76, color80);
    Pawn pawn83 = new Pawn(chessBoard73, color80);
    King king84 = new King(chessBoard68, color80);
    chessBoard68.initialize();
    ChessBoard chessBoard86 = new ChessBoard();
    ChessPiece.Color color87 = null;
    Pawn pawn88 = new Pawn(chessBoard86, color87);
    java.lang.String str89 = chessBoard86.toString();
    java.lang.String str90 = chessBoard86.toString();
    ChessPiece.Color color91 = ChessPiece.Color.WHITE;
    Pawn pawn92 = new Pawn(chessBoard86, color91);
    Pawn pawn93 = new Pawn(chessBoard68, color91);
    Pawn pawn94 = new Pawn(chessBoard51, color91);
    Rook rook95 = new Rook(chessBoard34, color91);
    java.util.ArrayList arrayList96 = rook95.legalMoves();
    java.lang.String str97 = rook95.getPosition();
    boolean b99 = chessBoard0.placePiece((ChessPiece)rook95, "a1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str5.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str89.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str90.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "a1"+ "'", str97.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == true);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test195"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Pawn pawn28 = new Pawn(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Pawn pawn35 = new Pawn(chessBoard29, color33);
    Pawn pawn36 = new Pawn(chessBoard26, color33);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard26, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Bishop bishop42 = new Bishop(chessBoard26, color40);
    ChessPiece.Color color43 = ChessPiece.Color.BLACK;
    Queen queen44 = new Queen(chessBoard26, color43);
    Queen queen45 = new Queen(chessBoard19, color43);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Bishop bishop50 = new Bishop(chessBoard46, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Pawn pawn53 = new Pawn(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessBoard chessBoard57 = null;
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard57, color58);
    Pawn pawn60 = new Pawn(chessBoard54, color58);
    Pawn pawn61 = new Pawn(chessBoard51, color58);
    King king62 = new King(chessBoard46, color58);
    chessBoard46.initialize();
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Bishop bishop68 = new Bishop(chessBoard64, color67);
    ChessBoard chessBoard69 = new ChessBoard();
    ChessPiece.Color color70 = null;
    Pawn pawn71 = new Pawn(chessBoard69, color70);
    ChessBoard chessBoard72 = new ChessBoard();
    ChessPiece.Color color73 = null;
    Knight knight74 = new Knight(chessBoard72, color73);
    ChessBoard chessBoard75 = null;
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard75, color76);
    Pawn pawn78 = new Pawn(chessBoard72, color76);
    Pawn pawn79 = new Pawn(chessBoard69, color76);
    King king80 = new King(chessBoard64, color76);
    ChessBoard chessBoard81 = new ChessBoard();
    ChessPiece.Color color82 = null;
    Pawn pawn83 = new Pawn(chessBoard81, color82);
    ChessBoard chessBoard84 = new ChessBoard();
    ChessPiece.Color color85 = null;
    Knight knight86 = new Knight(chessBoard84, color85);
    ChessBoard chessBoard87 = null;
    ChessPiece.Color color88 = ChessPiece.Color.WHITE;
    Rook rook89 = new Rook(chessBoard87, color88);
    Pawn pawn90 = new Pawn(chessBoard84, color88);
    Pawn pawn91 = new Pawn(chessBoard81, color88);
    Bishop bishop92 = new Bishop(chessBoard64, color88);
    Rook rook93 = new Rook(chessBoard46, color88);
    Pawn pawn94 = new Pawn(chessBoard19, color88);
    King king95 = new King(chessBoard0, color88);
    java.lang.String str96 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str96.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test196"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    int i9 = king8.getRow();
    java.lang.String str10 = king8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u2654"+ "'", str10.equals("\u2654"));

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test197"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Pawn pawn18 = new Pawn(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard20, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Rook rook45 = new Rook(chessBoard33, color44);
    Pawn pawn46 = new Pawn(chessBoard20, color44);
    Queen queen47 = new Queen(chessBoard0, color44);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece49 = chessBoard0.getPiece("\u2655");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test198"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Bishop bishop68 = new Bishop(chessBoard64, color67);
    King king69 = new King(chessBoard53, color67);
    Bishop bishop70 = new Bishop(chessBoard42, color67);
    Rook rook71 = new Rook(chessBoard0, color67);
    java.lang.String str72 = rook71.toString();
    java.util.ArrayList arrayList73 = rook71.legalMoves();
    java.lang.String str74 = rook71.toString();
    java.lang.String str75 = rook71.toString();
    int i76 = rook71.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\u2656"+ "'", str72.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "\u2656"+ "'", str74.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "\u2656"+ "'", str75.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test199"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessBoard chessBoard73 = null;
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard73, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    Rook rook77 = new Rook(chessBoard0, color74);
    java.util.ArrayList arrayList78 = rook77.legalMoves();
    java.util.ArrayList arrayList79 = rook77.legalMoves();
    ChessPiece.Color color80 = rook77.getColor();
    rook77.setColumn(7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color80);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test200"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard0, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Pawn pawn17 = new Pawn(chessBoard15, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessBoard chessBoard21 = null;
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Rook rook23 = new Rook(chessBoard21, color22);
    Pawn pawn24 = new Pawn(chessBoard18, color22);
    Pawn pawn25 = new Pawn(chessBoard15, color22);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Pawn pawn28 = new Pawn(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Pawn pawn35 = new Pawn(chessBoard29, color33);
    Pawn pawn36 = new Pawn(chessBoard26, color33);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Bishop bishop41 = new Bishop(chessBoard37, color40);
    King king42 = new King(chessBoard26, color40);
    Bishop bishop43 = new Bishop(chessBoard15, color40);
    Queen queen44 = new Queen(chessBoard0, color40);
    java.lang.String str45 = queen44.toString();
    java.lang.String str46 = queen44.toString();
    java.util.ArrayList arrayList47 = queen44.legalMoves();
    java.lang.String str48 = queen44.toString();
    // The following exception was thrown during execution in test generation
    try {
      queen44.setPosition("\u2655");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\u2655"+ "'", str45.equals("\u2655"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\u2655"+ "'", str46.equals("\u2655"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\u2655"+ "'", str48.equals("\u2655"));

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test201"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Bishop bishop32 = new Bishop(chessBoard28, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    King king44 = new King(chessBoard28, color40);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Pawn pawn47 = new Pawn(chessBoard45, color46);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Knight knight50 = new Knight(chessBoard48, color49);
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard51, color52);
    Pawn pawn54 = new Pawn(chessBoard48, color52);
    Pawn pawn55 = new Pawn(chessBoard45, color52);
    Bishop bishop56 = new Bishop(chessBoard28, color52);
    Rook rook57 = new Rook(chessBoard17, color52);
    Knight knight58 = new Knight(chessBoard0, color52);
    java.lang.String str59 = chessBoard0.toString();
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessPiece.Color color73 = ChessPiece.Color.BLACK;
    Bishop bishop74 = new Bishop(chessBoard60, color73);
    Knight knight75 = new Knight(chessBoard0, color73);
    java.lang.String str76 = knight75.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str59.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "\u265E"+ "'", str76.equals("\u265E"));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test202"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Pawn pawn18 = new Pawn(chessBoard0, color17);
    java.util.ArrayList arrayList19 = pawn18.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test203"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    java.util.ArrayList arrayList4 = king2.legalMoves();
    int i5 = king2.getRow();
    java.lang.String str6 = king2.toString();
    java.lang.String str7 = king2.getPosition();
    java.lang.String str8 = king2.toString();
    java.util.ArrayList arrayList9 = king2.legalMoves();
    int i10 = king2.getRow();
    ChessPiece.Color color11 = king2.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265A"+ "'", str6.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1"+ "'", str7.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\u265A"+ "'", str8.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color11);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test204"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    boolean b17 = chessBoard0.move("b1", "\u2654");
    boolean b20 = chessBoard0.move("a2", "\u2654");
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Pawn pawn26 = new Pawn(chessBoard24, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Pawn pawn33 = new Pawn(chessBoard27, color31);
    Pawn pawn34 = new Pawn(chessBoard24, color31);
    King king35 = new King(chessBoard21, color31);
    ChessPiece.Color color36 = ChessPiece.Color.BLACK;
    King king37 = new King(chessBoard21, color36);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Pawn pawn39 = new Pawn(chessBoard21, color38);
    java.lang.String str40 = chessBoard21.toString();
    java.lang.String str41 = chessBoard21.toString();
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Rook rook54 = new Rook(chessBoard42, color53);
    java.lang.String str55 = chessBoard42.toString();
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Pawn pawn58 = new Pawn(chessBoard56, color57);
    ChessBoard chessBoard59 = new ChessBoard();
    ChessPiece.Color color60 = null;
    Knight knight61 = new Knight(chessBoard59, color60);
    ChessBoard chessBoard62 = null;
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard62, color63);
    Pawn pawn65 = new Pawn(chessBoard59, color63);
    Pawn pawn66 = new Pawn(chessBoard56, color63);
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard56, color67);
    ChessBoard chessBoard69 = new ChessBoard();
    ChessPiece.Color color70 = null;
    Pawn pawn71 = new Pawn(chessBoard69, color70);
    ChessBoard chessBoard72 = new ChessBoard();
    ChessPiece.Color color73 = null;
    Knight knight74 = new Knight(chessBoard72, color73);
    ChessBoard chessBoard75 = null;
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard75, color76);
    Pawn pawn78 = new Pawn(chessBoard72, color76);
    Pawn pawn79 = new Pawn(chessBoard69, color76);
    ChessPiece.Color color80 = ChessPiece.Color.WHITE;
    Rook rook81 = new Rook(chessBoard69, color80);
    Pawn pawn82 = new Pawn(chessBoard56, color80);
    Bishop bishop83 = new Bishop(chessBoard42, color80);
    Queen queen84 = new Queen(chessBoard21, color80);
    Pawn pawn85 = new Pawn(chessBoard0, color80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str40.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str41.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str55.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color80);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test205"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test206"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    java.util.ArrayList arrayList33 = pawn32.legalMoves();
    java.lang.String str34 = pawn32.toString();
    java.lang.String str35 = pawn32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\u2659"+ "'", str34.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "\u2659"+ "'", str35.equals("\u2659"));

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test207"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard12, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Pawn pawn18 = new Pawn(chessBoard12, color16);
    pawn18.setRow(1);
    ChessPiece.Color color21 = pawn18.getColor();
    Queen queen22 = new Queen(chessBoard0, color21);
    java.lang.String str23 = queen22.toString();
    int i24 = queen22.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u2655"+ "'", str23.equals("\u2655"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test208"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    Pawn pawn78 = new Pawn(chessBoard52, color76);
    Pawn pawn79 = new Pawn(chessBoard47, color76);
    java.util.ArrayList arrayList80 = pawn79.legalMoves();
    int i81 = pawn79.getRow();
    ChessPiece.Color color82 = pawn79.getColor();
    King king83 = new King(chessBoard0, color82);
    ChessPiece.Color color84 = null;
    Queen queen85 = new Queen(chessBoard0, color84);
    chessBoard0.initialize();
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece88 = chessBoard0.getPiece("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test209"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    Pawn pawn52 = new Pawn(chessBoard0, color50);
    ChessPiece.Color color53 = pawn52.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test210"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    Pawn pawn78 = new Pawn(chessBoard52, color76);
    Pawn pawn79 = new Pawn(chessBoard47, color76);
    java.util.ArrayList arrayList80 = pawn79.legalMoves();
    int i81 = pawn79.getRow();
    ChessPiece.Color color82 = pawn79.getColor();
    King king83 = new King(chessBoard0, color82);
    ChessPiece.Color color84 = null;
    Queen queen85 = new Queen(chessBoard0, color84);
    int i86 = queen85.getColumn();
    java.util.ArrayList arrayList87 = queen85.legalMoves();
    java.lang.String str88 = queen85.toString();
    java.util.ArrayList arrayList89 = queen85.legalMoves();
    int i90 = queen85.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "\u265B"+ "'", str88.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test211"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    king2.setRow(0);
    king2.setRow(0);
    king2.setRow(0);
    king2.setRow((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test212"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    Pawn pawn26 = new Pawn(chessBoard0, color24);
    pawn26.setColumn(0);
    java.lang.String str29 = pawn26.toString();
    int i30 = pawn26.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\u2659"+ "'", str29.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test213"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    Pawn pawn26 = new Pawn(chessBoard0, color24);
    pawn26.setColumn(0);
    java.lang.String str29 = pawn26.toString();
    java.lang.String str30 = pawn26.getPosition();
    java.lang.String str31 = pawn26.toString();
    java.lang.String str32 = pawn26.getPosition();
    java.util.ArrayList arrayList33 = pawn26.legalMoves();
    java.lang.String str34 = pawn26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\u2659"+ "'", str29.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "a1"+ "'", str30.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\u2659"+ "'", str31.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "a1"+ "'", str32.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\u2659"+ "'", str34.equals("\u2659"));

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test214"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = null;
    King king4 = new King(chessBoard2, color3);
    ChessPiece.Color color5 = king4.getColor();
    king4.setRow(0);
    java.util.ArrayList arrayList8 = king4.legalMoves();
    boolean b10 = chessBoard0.placePiece((ChessPiece)king4, "a1");
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Bishop bishop12 = new Bishop(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Pawn pawn26 = new Pawn(chessBoard24, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Pawn pawn33 = new Pawn(chessBoard27, color31);
    Pawn pawn34 = new Pawn(chessBoard24, color31);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Bishop bishop39 = new Bishop(chessBoard35, color38);
    King king40 = new King(chessBoard24, color38);
    Bishop bishop41 = new Bishop(chessBoard13, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Knight knight55 = new Knight(chessBoard53, color54);
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Bishop bishop57 = new Bishop(chessBoard53, color56);
    King king58 = new King(chessBoard42, color56);
    Knight knight59 = new Knight(chessBoard13, color56);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    java.lang.String str63 = chessBoard60.toString();
    java.lang.String str64 = chessBoard60.toString();
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Pawn pawn66 = new Pawn(chessBoard60, color65);
    King king67 = new King(chessBoard13, color65);
    Bishop bishop68 = new Bishop(chessBoard0, color65);
    java.lang.String str69 = bishop68.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str63.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str64.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "\u2657"+ "'", str69.equals("\u2657"));

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test215"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.util.ArrayList arrayList8 = bishop7.legalMoves();
    java.lang.String str9 = bishop7.toString();
    java.util.ArrayList arrayList10 = bishop7.legalMoves();
    java.lang.String str11 = bishop7.toString();
    int i12 = bishop7.getColumn();
    int i13 = bishop7.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2657"+ "'", str9.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u2657"+ "'", str11.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test216"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    java.util.ArrayList arrayList7 = pawn6.legalMoves();
    java.util.ArrayList arrayList8 = pawn6.legalMoves();
    int i9 = pawn6.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test217"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    java.lang.String str3 = knight2.toString();
    java.lang.String str4 = knight2.toString();
    java.lang.String str5 = knight2.toString();
    knight2.setRow((-1));
    java.util.ArrayList arrayList8 = knight2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u265E"+ "'", str3.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u265E"+ "'", str4.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u265E"+ "'", str5.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test218"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.lang.String str4 = knight2.getPosition();
    java.lang.String str5 = knight2.toString();
    int i6 = knight2.getRow();
    java.util.ArrayList arrayList7 = knight2.legalMoves();
    knight2.setRow(56);
    java.lang.String str10 = knight2.toString();
    java.util.ArrayList arrayList11 = knight2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a1"+ "'", str4.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u265E"+ "'", str5.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u265E"+ "'", str10.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test219"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    ChessPiece.Color color16 = null;
    Queen queen17 = new Queen(chessBoard0, color16);
    java.lang.String str18 = queen17.toString();
    ChessPiece.Color color19 = queen17.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\u265B"+ "'", str18.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color19);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test220"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = ChessPiece.Color.WHITE;
    Rook rook2 = new Rook(chessBoard0, color1);
    rook2.setRow(100);
    java.util.ArrayList arrayList5 = rook2.legalMoves();
    int i6 = rook2.getColumn();
    java.lang.String str7 = rook2.toString();
    java.lang.String str8 = rook2.getPosition();
    int i9 = rook2.getColumn();
    // The following exception was thrown during execution in test generation
    try {
      rook2.setPosition("\u265F");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u2656"+ "'", str7.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a101"+ "'", str8.equals("a101"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test221"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    chessBoard0.initialize();
    chessBoard0.initialize();
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Pawn pawn23 = new Pawn(chessBoard21, color22);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Knight knight26 = new Knight(chessBoard24, color25);
    ChessBoard chessBoard27 = null;
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard27, color28);
    Pawn pawn30 = new Pawn(chessBoard24, color28);
    Pawn pawn31 = new Pawn(chessBoard21, color28);
    ChessPiece.Color color32 = ChessPiece.Color.WHITE;
    Rook rook33 = new Rook(chessBoard21, color32);
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard21, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Pawn pawn38 = new Pawn(chessBoard36, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Knight knight41 = new Knight(chessBoard39, color40);
    ChessBoard chessBoard42 = null;
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Rook rook44 = new Rook(chessBoard42, color43);
    Pawn pawn45 = new Pawn(chessBoard39, color43);
    Pawn pawn46 = new Pawn(chessBoard36, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Pawn pawn49 = new Pawn(chessBoard47, color48);
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Knight knight52 = new Knight(chessBoard50, color51);
    ChessBoard chessBoard53 = null;
    ChessPiece.Color color54 = ChessPiece.Color.WHITE;
    Rook rook55 = new Rook(chessBoard53, color54);
    Pawn pawn56 = new Pawn(chessBoard50, color54);
    Pawn pawn57 = new Pawn(chessBoard47, color54);
    ChessBoard chessBoard58 = new ChessBoard();
    ChessPiece.Color color59 = null;
    Knight knight60 = new Knight(chessBoard58, color59);
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Bishop bishop62 = new Bishop(chessBoard58, color61);
    King king63 = new King(chessBoard47, color61);
    Bishop bishop64 = new Bishop(chessBoard36, color61);
    Queen queen65 = new Queen(chessBoard21, color61);
    Bishop bishop66 = new Bishop(chessBoard0, color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test222"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    java.util.ArrayList arrayList42 = bishop41.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList42);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test223"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    java.lang.String str17 = king16.toString();
    java.lang.String str18 = king16.toString();
    ChessPiece.Color color19 = king16.getColor();
    int i20 = king16.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u2654"+ "'", str17.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\u2654"+ "'", str18.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test224"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = new ChessBoard();
    ChessPiece.Color color3 = null;
    Pawn pawn4 = new Pawn(chessBoard2, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Knight knight7 = new Knight(chessBoard5, color6);
    ChessBoard chessBoard8 = null;
    ChessPiece.Color color9 = ChessPiece.Color.WHITE;
    Rook rook10 = new Rook(chessBoard8, color9);
    Pawn pawn11 = new Pawn(chessBoard5, color9);
    Pawn pawn12 = new Pawn(chessBoard2, color9);
    ChessPiece.Color color13 = ChessPiece.Color.WHITE;
    Rook rook14 = new Rook(chessBoard2, color13);
    java.lang.String str15 = chessBoard2.toString();
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard16, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard29, color40);
    Pawn pawn42 = new Pawn(chessBoard16, color40);
    Bishop bishop43 = new Bishop(chessBoard2, color40);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    Pawn pawn53 = new Pawn(chessBoard47, color51);
    Pawn pawn54 = new Pawn(chessBoard44, color51);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Pawn pawn57 = new Pawn(chessBoard55, color56);
    ChessBoard chessBoard58 = new ChessBoard();
    ChessPiece.Color color59 = null;
    Knight knight60 = new Knight(chessBoard58, color59);
    ChessBoard chessBoard61 = null;
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard61, color62);
    Pawn pawn64 = new Pawn(chessBoard58, color62);
    Pawn pawn65 = new Pawn(chessBoard55, color62);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessPiece.Color color69 = ChessPiece.Color.WHITE;
    Bishop bishop70 = new Bishop(chessBoard66, color69);
    King king71 = new King(chessBoard55, color69);
    Bishop bishop72 = new Bishop(chessBoard44, color69);
    Rook rook73 = new Rook(chessBoard2, color69);
    Bishop bishop74 = new Bishop(chessBoard0, color69);
    chessBoard0.initialize();
    ChessPiece.Color color76 = null;
    Queen queen77 = new Queen(chessBoard0, color76);
    java.util.ArrayList arrayList78 = queen77.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str15.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList78);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test225"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    rook19.setRow(100);
    java.util.ArrayList arrayList22 = rook19.legalMoves();
    int i23 = rook19.getColumn();
    ChessPiece.Color color24 = rook19.getColor();
    King king25 = new King(chessBoard0, color24);
    java.lang.String str26 = chessBoard0.toString();
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece28 = chessBoard0.getPiece("\u265D");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str26.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test226"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Pawn pawn10 = new Pawn(chessBoard8, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessBoard chessBoard14 = null;
    ChessPiece.Color color15 = ChessPiece.Color.WHITE;
    Rook rook16 = new Rook(chessBoard14, color15);
    Pawn pawn17 = new Pawn(chessBoard11, color15);
    Pawn pawn18 = new Pawn(chessBoard8, color15);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Bishop bishop23 = new Bishop(chessBoard19, color22);
    King king24 = new King(chessBoard8, color22);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Pawn pawn27 = new Pawn(chessBoard25, color26);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessBoard chessBoard31 = null;
    ChessPiece.Color color32 = ChessPiece.Color.WHITE;
    Rook rook33 = new Rook(chessBoard31, color32);
    Pawn pawn34 = new Pawn(chessBoard28, color32);
    Pawn pawn35 = new Pawn(chessBoard25, color32);
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard25, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Pawn pawn40 = new Pawn(chessBoard38, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessBoard chessBoard44 = null;
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard44, color45);
    Pawn pawn47 = new Pawn(chessBoard41, color45);
    Pawn pawn48 = new Pawn(chessBoard38, color45);
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard38, color49);
    Pawn pawn51 = new Pawn(chessBoard25, color49);
    Knight knight52 = new Knight(chessBoard8, color49);
    Bishop bishop53 = new Bishop(chessBoard0, color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test227"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Bishop bishop29 = new Bishop(chessBoard25, color28);
    King king30 = new King(chessBoard14, color28);
    Bishop bishop31 = new Bishop(chessBoard3, color28);
    Rook rook32 = new Rook(chessBoard0, color28);
    java.util.ArrayList arrayList33 = rook32.legalMoves();
    java.lang.String str34 = rook32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\u2656"+ "'", str34.equals("\u2656"));

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test228"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    Knight knight12 = new Knight(chessBoard0, color8);
    chessBoard0.initialize();
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test229"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Rook rook4 = new Rook(chessBoard2, color3);
    rook4.setRow(100);
    java.util.ArrayList arrayList7 = rook4.legalMoves();
    int i8 = rook4.getColumn();
    ChessPiece.Color color9 = rook4.getColor();
    Bishop bishop10 = new Bishop(chessBoard0, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    java.util.ArrayList arrayList17 = bishop16.legalMoves();
    java.lang.String str18 = bishop16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\u2657"+ "'", str18.equals("\u2657"));

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test230"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    King king30 = new King(chessBoard0, color28);
    java.lang.String str31 = king30.toString();
    king30.setRow(56);
    java.lang.String str34 = king30.toString();
    java.util.ArrayList arrayList35 = king30.legalMoves();
    int i36 = king30.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\u2654"+ "'", str31.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\u2654"+ "'", str34.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test231"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    java.lang.String str17 = king16.toString();
    java.lang.String str18 = king16.toString();
    java.util.ArrayList arrayList19 = king16.legalMoves();
    java.lang.String str20 = king16.toString();
    java.util.ArrayList arrayList21 = king16.legalMoves();
    java.util.ArrayList arrayList22 = king16.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u2654"+ "'", str17.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\u2654"+ "'", str18.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u2654"+ "'", str20.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test232"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Bishop bishop32 = new Bishop(chessBoard28, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    King king44 = new King(chessBoard28, color40);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Pawn pawn47 = new Pawn(chessBoard45, color46);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Knight knight50 = new Knight(chessBoard48, color49);
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard51, color52);
    Pawn pawn54 = new Pawn(chessBoard48, color52);
    Pawn pawn55 = new Pawn(chessBoard45, color52);
    Bishop bishop56 = new Bishop(chessBoard28, color52);
    Rook rook57 = new Rook(chessBoard17, color52);
    Knight knight58 = new Knight(chessBoard0, color52);
    java.util.ArrayList arrayList59 = knight58.legalMoves();
    java.util.ArrayList arrayList60 = knight58.legalMoves();
    java.lang.String str61 = knight58.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "\u2658"+ "'", str61.equals("\u2658"));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test233"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessBoard chessBoard73 = null;
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard73, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    Rook rook77 = new Rook(chessBoard0, color74);
    java.lang.String str78 = rook77.toString();
    rook77.setPosition("hi!");
    rook77.setPosition("hi!");
    rook77.setRow(7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "\u2656"+ "'", str78.equals("\u2656"));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test234"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Rook rook4 = new Rook(chessBoard2, color3);
    rook4.setRow(100);
    java.util.ArrayList arrayList7 = rook4.legalMoves();
    int i8 = rook4.getColumn();
    ChessPiece.Color color9 = rook4.getColor();
    Bishop bishop10 = new Bishop(chessBoard0, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    // The following exception was thrown during execution in test generation
    try {
      boolean b19 = chessBoard0.move("hi!", "\u265F");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test235"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    King king30 = new King(chessBoard0, color28);
    java.lang.String str31 = king30.toString();
    king30.setRow(56);
    java.lang.String str34 = king30.toString();
    king30.setColumn((-1));
    int i37 = king30.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\u2654"+ "'", str31.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\u2654"+ "'", str34.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 56);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test236"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = null;
    King king4 = new King(chessBoard2, color3);
    ChessPiece.Color color5 = king4.getColor();
    king4.setRow(0);
    java.util.ArrayList arrayList8 = king4.legalMoves();
    boolean b10 = chessBoard0.placePiece((ChessPiece)king4, "a1");
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Bishop bishop12 = new Bishop(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Pawn pawn26 = new Pawn(chessBoard24, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Pawn pawn33 = new Pawn(chessBoard27, color31);
    Pawn pawn34 = new Pawn(chessBoard24, color31);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Bishop bishop39 = new Bishop(chessBoard35, color38);
    King king40 = new King(chessBoard24, color38);
    Bishop bishop41 = new Bishop(chessBoard13, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Knight knight55 = new Knight(chessBoard53, color54);
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Bishop bishop57 = new Bishop(chessBoard53, color56);
    King king58 = new King(chessBoard42, color56);
    Knight knight59 = new Knight(chessBoard13, color56);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    java.lang.String str63 = chessBoard60.toString();
    java.lang.String str64 = chessBoard60.toString();
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Pawn pawn66 = new Pawn(chessBoard60, color65);
    King king67 = new King(chessBoard13, color65);
    Bishop bishop68 = new Bishop(chessBoard0, color65);
    ChessPiece.Color color69 = ChessPiece.Color.WHITE;
    Bishop bishop70 = new Bishop(chessBoard0, color69);
    java.lang.String str71 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str63.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str64.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265A \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str71.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265A \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test237"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    java.lang.String str12 = chessBoard0.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b15 = chessBoard0.move("\u2657", "\u265B");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str12.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test238"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Bishop bishop29 = new Bishop(chessBoard25, color28);
    King king30 = new King(chessBoard14, color28);
    Bishop bishop31 = new Bishop(chessBoard3, color28);
    Rook rook32 = new Rook(chessBoard0, color28);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Pawn pawn38 = new Pawn(chessBoard36, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Knight knight41 = new Knight(chessBoard39, color40);
    ChessBoard chessBoard42 = null;
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Rook rook44 = new Rook(chessBoard42, color43);
    Pawn pawn45 = new Pawn(chessBoard39, color43);
    Pawn pawn46 = new Pawn(chessBoard36, color43);
    King king47 = new King(chessBoard33, color43);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Knight knight50 = new Knight(chessBoard48, color49);
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Bishop bishop52 = new Bishop(chessBoard48, color51);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    King king64 = new King(chessBoard48, color60);
    chessBoard48.initialize();
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessPiece.Color color69 = ChessPiece.Color.WHITE;
    Bishop bishop70 = new Bishop(chessBoard66, color69);
    ChessBoard chessBoard71 = new ChessBoard();
    ChessPiece.Color color72 = null;
    Pawn pawn73 = new Pawn(chessBoard71, color72);
    ChessBoard chessBoard74 = new ChessBoard();
    ChessPiece.Color color75 = null;
    Knight knight76 = new Knight(chessBoard74, color75);
    ChessBoard chessBoard77 = null;
    ChessPiece.Color color78 = ChessPiece.Color.WHITE;
    Rook rook79 = new Rook(chessBoard77, color78);
    Pawn pawn80 = new Pawn(chessBoard74, color78);
    Pawn pawn81 = new Pawn(chessBoard71, color78);
    King king82 = new King(chessBoard66, color78);
    ChessBoard chessBoard83 = new ChessBoard();
    ChessPiece.Color color84 = null;
    Pawn pawn85 = new Pawn(chessBoard83, color84);
    ChessBoard chessBoard86 = new ChessBoard();
    ChessPiece.Color color87 = null;
    Knight knight88 = new Knight(chessBoard86, color87);
    ChessBoard chessBoard89 = null;
    ChessPiece.Color color90 = ChessPiece.Color.WHITE;
    Rook rook91 = new Rook(chessBoard89, color90);
    Pawn pawn92 = new Pawn(chessBoard86, color90);
    Pawn pawn93 = new Pawn(chessBoard83, color90);
    Bishop bishop94 = new Bishop(chessBoard66, color90);
    Rook rook95 = new Rook(chessBoard48, color90);
    Pawn pawn96 = new Pawn(chessBoard33, color90);
    King king97 = new King(chessBoard0, color90);
    java.util.ArrayList arrayList98 = king97.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList98);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test239"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    ChessPiece.Color color5 = knight2.getColor();
    java.lang.String str6 = knight2.toString();
    java.lang.String str7 = knight2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265E"+ "'", str6.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u265E"+ "'", str7.equals("\u265E"));

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test240"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    chessBoard0.initialize();
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Bishop bishop22 = new Bishop(chessBoard18, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    King king34 = new King(chessBoard18, color30);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    Bishop bishop46 = new Bishop(chessBoard18, color42);
    Rook rook47 = new Rook(chessBoard0, color42);
    java.util.ArrayList arrayList48 = rook47.legalMoves();
    java.lang.String str49 = rook47.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "\u2656"+ "'", str49.equals("\u2656"));

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test241"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    java.lang.String str5 = chessBoard0.toString();
    java.lang.String str6 = chessBoard0.toString();
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = null;
    King king9 = new King(chessBoard7, color8);
    ChessPiece.Color color10 = king9.getColor();
    java.util.ArrayList arrayList11 = king9.legalMoves();
    int i12 = king9.getColumn();
    java.lang.String str13 = king9.toString();
    java.lang.String str14 = king9.toString();
    java.lang.String str15 = king9.toString();
    ChessPiece.Color color16 = king9.getColor();
    java.lang.String str17 = king9.toString();
    boolean b19 = chessBoard0.placePiece((ChessPiece)king9, " 1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str5.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str6.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u265A"+ "'", str13.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\u265A"+ "'", str14.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\u265A"+ "'", str15.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u265A"+ "'", str17.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test242"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Bishop bishop68 = new Bishop(chessBoard64, color67);
    King king69 = new King(chessBoard53, color67);
    Bishop bishop70 = new Bishop(chessBoard42, color67);
    Rook rook71 = new Rook(chessBoard0, color67);
    java.lang.String str72 = rook71.toString();
    java.lang.String str73 = rook71.toString();
    java.lang.String str74 = rook71.toString();
    java.lang.String str75 = rook71.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\u2656"+ "'", str72.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "\u2656"+ "'", str73.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "\u2656"+ "'", str74.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "\u2656"+ "'", str75.equals("\u2656"));

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test243"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    chessBoard0.initialize();
    java.lang.String str17 = chessBoard0.toString();
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Pawn pawn23 = new Pawn(chessBoard21, color22);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Knight knight26 = new Knight(chessBoard24, color25);
    ChessBoard chessBoard27 = null;
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard27, color28);
    Pawn pawn30 = new Pawn(chessBoard24, color28);
    Pawn pawn31 = new Pawn(chessBoard21, color28);
    ChessPiece.Color color32 = ChessPiece.Color.WHITE;
    Rook rook33 = new Rook(chessBoard21, color32);
    Bishop bishop34 = new Bishop(chessBoard18, color32);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard35, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Bishop bishop51 = new Bishop(chessBoard35, color49);
    ChessPiece.Color color52 = ChessPiece.Color.BLACK;
    Queen queen53 = new Queen(chessBoard35, color52);
    Rook rook54 = new Rook(chessBoard18, color52);
    Queen queen55 = new Queen(chessBoard0, color52);
    java.lang.String str56 = queen55.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str17.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\u265B"+ "'", str56.equals("\u265B"));

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test244"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    java.util.ArrayList arrayList4 = king2.legalMoves();
    int i5 = king2.getRow();
    java.lang.String str6 = king2.toString();
    java.lang.String str7 = king2.toString();
    java.lang.String str8 = king2.getPosition();
    java.util.ArrayList arrayList9 = king2.legalMoves();
    java.util.ArrayList arrayList10 = king2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265A"+ "'", str6.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u265A"+ "'", str7.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a1"+ "'", str8.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test245"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = null;
    ChessPiece.Color color6 = ChessPiece.Color.WHITE;
    Rook rook7 = new Rook(chessBoard5, color6);
    Rook rook8 = new Rook(chessBoard0, color6);
    ChessBoard chessBoard9 = new ChessBoard();
    ChessPiece.Color color10 = null;
    Knight knight11 = new Knight(chessBoard9, color10);
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Bishop bishop13 = new Bishop(chessBoard9, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    King king25 = new King(chessBoard9, color21);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Pawn pawn28 = new Pawn(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Pawn pawn35 = new Pawn(chessBoard29, color33);
    Pawn pawn36 = new Pawn(chessBoard26, color33);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Bishop bishop41 = new Bishop(chessBoard37, color40);
    King king42 = new King(chessBoard26, color40);
    Knight knight43 = new Knight(chessBoard9, color40);
    ChessBoard chessBoard44 = null;
    ChessBoard chessBoard45 = new ChessBoard();
    java.lang.String str46 = chessBoard45.toString();
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = null;
    King king49 = new King(chessBoard47, color48);
    ChessPiece.Color color50 = king49.getColor();
    king49.setRow(0);
    java.util.ArrayList arrayList53 = king49.legalMoves();
    boolean b55 = chessBoard45.placePiece((ChessPiece)king49, "a1");
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Bishop bishop57 = new Bishop(chessBoard45, color56);
    ChessBoard chessBoard58 = new ChessBoard();
    java.lang.String str59 = chessBoard58.toString();
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = null;
    King king62 = new King(chessBoard60, color61);
    ChessPiece.Color color63 = king62.getColor();
    king62.setRow(0);
    java.util.ArrayList arrayList66 = king62.legalMoves();
    boolean b68 = chessBoard58.placePiece((ChessPiece)king62, "a1");
    ChessPiece.Color color69 = ChessPiece.Color.WHITE;
    Bishop bishop70 = new Bishop(chessBoard58, color69);
    Pawn pawn71 = new Pawn(chessBoard45, color69);
    Rook rook72 = new Rook(chessBoard44, color69);
    Queen queen73 = new Queen(chessBoard9, color69);
    Rook rook74 = new Rook(chessBoard0, color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str46.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str59.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test246"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    ChessPiece.Color color5 = ChessPiece.Color.WHITE;
    Pawn pawn6 = new Pawn(chessBoard0, color5);
    java.util.ArrayList arrayList7 = pawn6.legalMoves();
    java.util.ArrayList arrayList8 = pawn6.legalMoves();
    java.util.ArrayList arrayList9 = pawn6.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test247"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard0, color20);
    java.lang.String str22 = pawn21.toString();
    java.lang.String str23 = pawn21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265F"+ "'", str22.equals("\u265F"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u265F"+ "'", str23.equals("\u265F"));

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test248"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Knight knight15 = new Knight(chessBoard13, color14);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Bishop bishop17 = new Bishop(chessBoard13, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    King king29 = new King(chessBoard13, color25);
    Bishop bishop30 = new Bishop(chessBoard0, color25);
    java.util.ArrayList arrayList31 = bishop30.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList31);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test249"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard12, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Pawn pawn18 = new Pawn(chessBoard12, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard19, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Bishop bishop35 = new Bishop(chessBoard19, color33);
    ChessPiece.Color color36 = ChessPiece.Color.BLACK;
    Queen queen37 = new Queen(chessBoard19, color36);
    Queen queen38 = new Queen(chessBoard12, color36);
    Bishop bishop39 = new Bishop(chessBoard0, color36);
    java.util.ArrayList arrayList40 = bishop39.legalMoves();
    java.lang.String str41 = bishop39.getPosition();
    java.lang.String str42 = bishop39.toString();
    int i43 = bishop39.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "a1"+ "'", str41.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\u265D"+ "'", str42.equals("\u265D"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test250"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    ChessPiece.Color color16 = null;
    Queen queen17 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Bishop bishop45 = new Bishop(chessBoard41, color44);
    King king46 = new King(chessBoard30, color44);
    Bishop bishop47 = new Bishop(chessBoard19, color44);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Pawn pawn50 = new Pawn(chessBoard48, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = null;
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Rook rook56 = new Rook(chessBoard54, color55);
    Pawn pawn57 = new Pawn(chessBoard51, color55);
    Pawn pawn58 = new Pawn(chessBoard48, color55);
    ChessBoard chessBoard59 = new ChessBoard();
    ChessPiece.Color color60 = null;
    Knight knight61 = new Knight(chessBoard59, color60);
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Bishop bishop63 = new Bishop(chessBoard59, color62);
    King king64 = new King(chessBoard48, color62);
    Knight knight65 = new Knight(chessBoard19, color62);
    King king66 = new King(chessBoard18, color62);
    ChessPiece.Color color67 = null;
    Pawn pawn68 = new Pawn(chessBoard18, color67);
    ChessBoard chessBoard69 = new ChessBoard();
    ChessPiece.Color color70 = null;
    Knight knight71 = new Knight(chessBoard69, color70);
    ChessBoard chessBoard72 = null;
    ChessPiece.Color color73 = ChessPiece.Color.WHITE;
    Rook rook74 = new Rook(chessBoard72, color73);
    ChessPiece.Color color75 = rook74.getColor();
    Bishop bishop76 = new Bishop(chessBoard69, color75);
    Pawn pawn77 = new Pawn(chessBoard18, color75);
    Rook rook78 = new Rook(chessBoard0, color75);
    // The following exception was thrown during execution in test generation
    try {
      rook78.setPosition("");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test251"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.lang.String str4 = knight2.getPosition();
    java.util.ArrayList arrayList5 = knight2.legalMoves();
    java.lang.String str6 = knight2.toString();
    int i7 = knight2.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a1"+ "'", str4.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265E"+ "'", str6.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test252"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    king8.setColumn(56);
    int i11 = king8.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test253"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.util.ArrayList arrayList8 = bishop7.legalMoves();
    java.lang.String str9 = bishop7.toString();
    java.lang.String str10 = bishop7.getPosition();
    bishop7.setColumn(56);
    java.util.ArrayList arrayList13 = bishop7.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2657"+ "'", str9.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "a1"+ "'", str10.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test254"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    ChessPiece.Color color5 = knight2.getColor();
    java.lang.String str6 = knight2.toString();
    java.util.ArrayList arrayList7 = knight2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265E"+ "'", str6.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test255"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Pawn pawn49 = new Pawn(chessBoard47, color48);
    java.lang.String str50 = chessBoard47.toString();
    java.lang.String str51 = chessBoard47.toString();
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Pawn pawn53 = new Pawn(chessBoard47, color52);
    King king54 = new King(chessBoard0, color52);
    java.lang.String str55 = king54.toString();
    java.lang.String str56 = king54.toString();
    java.util.ArrayList arrayList57 = king54.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str50.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str51.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\u2654"+ "'", str55.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\u2654"+ "'", str56.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList57);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test256"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Pawn pawn49 = new Pawn(chessBoard47, color48);
    java.lang.String str50 = chessBoard47.toString();
    java.lang.String str51 = chessBoard47.toString();
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Pawn pawn53 = new Pawn(chessBoard47, color52);
    King king54 = new King(chessBoard0, color52);
    java.lang.String str55 = king54.toString();
    java.lang.String str56 = king54.toString();
    java.lang.String str57 = king54.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str50.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str51.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\u2654"+ "'", str55.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\u2654"+ "'", str56.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "a1"+ "'", str57.equals("a1"));

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test257"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    java.lang.String str5 = chessBoard0.toString();
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Bishop bishop29 = new Bishop(chessBoard13, color27);
    ChessPiece.Color color30 = ChessPiece.Color.BLACK;
    Queen queen31 = new Queen(chessBoard13, color30);
    Queen queen32 = new Queen(chessBoard6, color30);
    Bishop bishop33 = new Bishop(chessBoard0, color30);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str5.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test258"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Bishop bishop21 = new Bishop(chessBoard17, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard22, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard35, color46);
    Pawn pawn48 = new Pawn(chessBoard22, color46);
    Pawn pawn49 = new Pawn(chessBoard17, color46);
    Rook rook50 = new Rook(chessBoard0, color46);
    java.lang.String str51 = rook50.toString();
    java.util.ArrayList arrayList52 = rook50.legalMoves();
    ChessPiece.Color color53 = rook50.getColor();
    java.util.ArrayList arrayList54 = rook50.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\u2656"+ "'", str51.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList54);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test259"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    java.util.ArrayList arrayList7 = pawn6.legalMoves();
    java.lang.String str8 = pawn6.toString();
    int i9 = pawn6.getRow();
    java.lang.String str10 = pawn6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\u2659"+ "'", str8.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u2659"+ "'", str10.equals("\u2659"));

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test260"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = ChessPiece.Color.BLACK;
    Bishop bishop14 = new Bishop(chessBoard0, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Queen queen18 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard0, color23);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Knight knight52 = new Knight(chessBoard50, color51);
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Bishop bishop54 = new Bishop(chessBoard50, color53);
    King king55 = new King(chessBoard39, color53);
    Bishop bishop56 = new Bishop(chessBoard28, color53);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Pawn pawn59 = new Pawn(chessBoard57, color58);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = null;
    ChessPiece.Color color64 = ChessPiece.Color.WHITE;
    Rook rook65 = new Rook(chessBoard63, color64);
    Pawn pawn66 = new Pawn(chessBoard60, color64);
    Pawn pawn67 = new Pawn(chessBoard57, color64);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Bishop bishop72 = new Bishop(chessBoard68, color71);
    King king73 = new King(chessBoard57, color71);
    Knight knight74 = new Knight(chessBoard28, color71);
    King king75 = new King(chessBoard27, color71);
    ChessPiece.Color color76 = null;
    Pawn pawn77 = new Pawn(chessBoard27, color76);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Knight knight80 = new Knight(chessBoard78, color79);
    ChessBoard chessBoard81 = null;
    ChessPiece.Color color82 = ChessPiece.Color.WHITE;
    Rook rook83 = new Rook(chessBoard81, color82);
    ChessPiece.Color color84 = rook83.getColor();
    Bishop bishop85 = new Bishop(chessBoard78, color84);
    Pawn pawn86 = new Pawn(chessBoard27, color84);
    Rook rook87 = new Rook(chessBoard0, color84);
    java.lang.String str88 = rook87.toString();
    java.lang.String str89 = rook87.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "\u2656"+ "'", str88.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "\u2656"+ "'", str89.equals("\u2656"));

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test261"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    java.lang.String str11 = chessBoard0.toString();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    Knight knight24 = new Knight(chessBoard12, color20);
    Queen queen25 = new Queen(chessBoard0, color20);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    Knight knight38 = new Knight(chessBoard26, color34);
    chessBoard26.initialize();
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Pawn pawn42 = new Pawn(chessBoard40, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Knight knight45 = new Knight(chessBoard43, color44);
    ChessBoard chessBoard46 = null;
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Rook rook48 = new Rook(chessBoard46, color47);
    Pawn pawn49 = new Pawn(chessBoard43, color47);
    Pawn pawn50 = new Pawn(chessBoard40, color47);
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard40, color51);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Knight knight55 = new Knight(chessBoard53, color54);
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Bishop bishop57 = new Bishop(chessBoard53, color56);
    ChessBoard chessBoard58 = new ChessBoard();
    ChessPiece.Color color59 = null;
    Pawn pawn60 = new Pawn(chessBoard58, color59);
    ChessBoard chessBoard61 = new ChessBoard();
    ChessPiece.Color color62 = null;
    Knight knight63 = new Knight(chessBoard61, color62);
    ChessBoard chessBoard64 = null;
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Rook rook66 = new Rook(chessBoard64, color65);
    Pawn pawn67 = new Pawn(chessBoard61, color65);
    Pawn pawn68 = new Pawn(chessBoard58, color65);
    King king69 = new King(chessBoard53, color65);
    Bishop bishop70 = new Bishop(chessBoard40, color65);
    java.lang.String str71 = bishop70.toString();
    ChessPiece.Color color72 = bishop70.getColor();
    King king73 = new King(chessBoard26, color72);
    Rook rook74 = new Rook(chessBoard0, color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str11.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "\u2657"+ "'", str71.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test262"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    java.lang.String str3 = knight2.toString();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    java.util.ArrayList arrayList5 = knight2.legalMoves();
    java.util.ArrayList arrayList6 = knight2.legalMoves();
    java.lang.String str7 = knight2.toString();
    // The following exception was thrown during execution in test generation
    try {
      knight2.setPosition("\u265C");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u265E"+ "'", str3.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u265E"+ "'", str7.equals("\u265E"));

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test263"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    king2.setRow(0);
    java.util.ArrayList arrayList6 = king2.legalMoves();
    java.util.ArrayList arrayList7 = king2.legalMoves();
    ChessPiece.Color color8 = king2.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color8);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test264"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessBoard chessBoard7 = new ChessBoard();
    ChessPiece.Color color8 = null;
    Pawn pawn9 = new Pawn(chessBoard7, color8);
    java.lang.String str10 = chessBoard7.toString();
    java.lang.String str11 = chessBoard7.toString();
    java.lang.String str12 = chessBoard7.toString();
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Knight knight15 = new Knight(chessBoard13, color14);
    ChessBoard chessBoard16 = null;
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Rook rook18 = new Rook(chessBoard16, color17);
    Pawn pawn19 = new Pawn(chessBoard13, color17);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard20, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Bishop bishop36 = new Bishop(chessBoard20, color34);
    ChessPiece.Color color37 = ChessPiece.Color.BLACK;
    Queen queen38 = new Queen(chessBoard20, color37);
    Queen queen39 = new Queen(chessBoard13, color37);
    Bishop bishop40 = new Bishop(chessBoard7, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Bishop bishop45 = new Bishop(chessBoard41, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Pawn pawn48 = new Pawn(chessBoard46, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Knight knight51 = new Knight(chessBoard49, color50);
    ChessBoard chessBoard52 = null;
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Rook rook54 = new Rook(chessBoard52, color53);
    Pawn pawn55 = new Pawn(chessBoard49, color53);
    Pawn pawn56 = new Pawn(chessBoard46, color53);
    King king57 = new King(chessBoard41, color53);
    chessBoard41.initialize();
    ChessBoard chessBoard59 = new ChessBoard();
    ChessPiece.Color color60 = null;
    Pawn pawn61 = new Pawn(chessBoard59, color60);
    java.lang.String str62 = chessBoard59.toString();
    java.lang.String str63 = chessBoard59.toString();
    ChessPiece.Color color64 = ChessPiece.Color.WHITE;
    Pawn pawn65 = new Pawn(chessBoard59, color64);
    Pawn pawn66 = new Pawn(chessBoard41, color64);
    ChessBoard chessBoard67 = null;
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Rook rook69 = new Rook(chessBoard67, color68);
    rook69.setRow(100);
    java.util.ArrayList arrayList72 = rook69.legalMoves();
    int i73 = rook69.getColumn();
    ChessPiece.Color color74 = rook69.getColor();
    Rook rook75 = new Rook(chessBoard41, color74);
    Bishop bishop76 = new Bishop(chessBoard7, color74);
    Bishop bishop77 = new Bishop(chessBoard0, color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str10.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str11.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str12.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str62.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str63.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test265"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.getPosition();
    int i21 = queen18.getRow();
    java.util.ArrayList arrayList22 = queen18.legalMoves();
    java.lang.String str23 = queen18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1"+ "'", str20.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u265B"+ "'", str23.equals("\u265B"));

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test266"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    java.util.ArrayList arrayList33 = pawn32.legalMoves();
    int i34 = pawn32.getRow();
    ChessPiece.Color color35 = pawn32.getColor();
    int i36 = pawn32.getColumn();
    java.lang.String str37 = pawn32.toString();
    java.util.ArrayList arrayList38 = pawn32.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\u2659"+ "'", str37.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList38);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test267"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    java.util.ArrayList arrayList4 = king2.legalMoves();
    int i5 = king2.getColumn();
    java.lang.String str6 = king2.toString();
    java.lang.String str7 = king2.toString();
    java.lang.String str8 = king2.toString();
    ChessPiece.Color color9 = king2.getColor();
    java.lang.String str10 = king2.toString();
    java.lang.String str11 = king2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265A"+ "'", str6.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u265A"+ "'", str7.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\u265A"+ "'", str8.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u265A"+ "'", str10.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u265A"+ "'", str11.equals("\u265A"));

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test268"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    Pawn pawn53 = new Pawn(chessBoard47, color51);
    Pawn pawn54 = new Pawn(chessBoard44, color51);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Bishop bishop59 = new Bishop(chessBoard55, color58);
    King king60 = new King(chessBoard44, color58);
    Bishop bishop61 = new Bishop(chessBoard33, color58);
    java.lang.String str62 = bishop61.toString();
    ChessPiece.Color color63 = bishop61.getColor();
    Pawn pawn64 = new Pawn(chessBoard0, color63);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece66 = chessBoard0.getPiece("\u2658");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "\u2657"+ "'", str62.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test269"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    java.lang.String str2 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str2.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test270"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard19, color30);
    Bishop bishop32 = new Bishop(chessBoard16, color30);
    Rook rook33 = new Rook(chessBoard0, color30);
    java.util.ArrayList arrayList34 = rook33.legalMoves();
    ChessPiece.Color color35 = rook33.getColor();
    java.util.ArrayList arrayList36 = rook33.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList36);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test271"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    king2.setColumn(1);
    java.lang.String str6 = king2.getPosition();
    king2.setRow(56);
    java.util.ArrayList arrayList9 = king2.legalMoves();
    java.lang.String str10 = king2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "b1"+ "'", str6.equals("b1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u265A"+ "'", str10.equals("\u265A"));

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test272"); }


    ChessBoard chessBoard0 = null;
    ChessBoard chessBoard1 = null;
    ChessPiece.Color color2 = ChessPiece.Color.WHITE;
    Rook rook3 = new Rook(chessBoard1, color2);
    Pawn pawn4 = new Pawn(chessBoard0, color2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color2);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test273"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    java.lang.String str3 = king2.toString();
    java.lang.String str4 = king2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u265A"+ "'", str3.equals("\u265A"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u265A"+ "'", str4.equals("\u265A"));

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test274"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Pawn pawn43 = new Pawn(chessBoard17, color41);
    Knight knight44 = new Knight(chessBoard0, color41);
    boolean b47 = chessBoard0.move("a1", "b1");
    chessBoard0.initialize();
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Knight knight51 = new Knight(chessBoard49, color50);
    ChessBoard chessBoard52 = null;
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Rook rook54 = new Rook(chessBoard52, color53);
    ChessPiece.Color color55 = rook54.getColor();
    Bishop bishop56 = new Bishop(chessBoard49, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    java.lang.String str58 = chessBoard57.toString();
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    rook61.setRow(100);
    java.util.ArrayList arrayList64 = rook61.legalMoves();
    int i65 = rook61.getColumn();
    ChessPiece.Color color66 = rook61.getColor();
    Bishop bishop67 = new Bishop(chessBoard57, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Bishop bishop72 = new Bishop(chessBoard68, color71);
    Bishop bishop73 = new Bishop(chessBoard57, color71);
    Bishop bishop74 = new Bishop(chessBoard49, color71);
    Queen queen75 = new Queen(chessBoard0, color71);
    java.lang.String str76 = queen75.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str58.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "\u2655"+ "'", str76.equals("\u2655"));

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test275"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Bishop bishop24 = new Bishop(chessBoard0, color21);
    int i25 = bishop24.getRow();
    java.util.ArrayList arrayList26 = bishop24.legalMoves();
    java.lang.String str27 = bishop24.toString();
    java.util.ArrayList arrayList28 = bishop24.legalMoves();
    java.util.ArrayList arrayList29 = bishop24.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\u2657"+ "'", str27.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList29);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test276"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    ChessPiece.Color color5 = ChessPiece.Color.WHITE;
    Pawn pawn6 = new Pawn(chessBoard0, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    ChessPiece.Color color10 = rook9.getColor();
    Bishop bishop11 = new Bishop(chessBoard0, color10);
    java.util.ArrayList arrayList12 = bishop11.legalMoves();
    java.lang.String str13 = bishop11.toString();
    int i14 = bishop11.getColumn();
    java.util.ArrayList arrayList15 = bishop11.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u2657"+ "'", str13.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test277"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    int i7 = pawn6.getColumn();
    java.util.ArrayList arrayList8 = pawn6.legalMoves();
    java.util.ArrayList arrayList9 = pawn6.legalMoves();
    java.lang.String str10 = pawn6.toString();
    java.util.ArrayList arrayList11 = pawn6.legalMoves();
    java.lang.String str12 = pawn6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u2659"+ "'", str10.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u2659"+ "'", str12.equals("\u2659"));

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test278"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    Knight knight12 = new Knight(chessBoard0, color8);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Knight knight15 = new Knight(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    King king27 = new King(chessBoard13, color23);
    ChessPiece.Color color28 = ChessPiece.Color.BLACK;
    King king29 = new King(chessBoard13, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Bishop bishop34 = new Bishop(chessBoard30, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    King king46 = new King(chessBoard30, color42);
    chessBoard30.initialize();
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Pawn pawn50 = new Pawn(chessBoard48, color49);
    java.lang.String str51 = chessBoard48.toString();
    java.lang.String str52 = chessBoard48.toString();
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Pawn pawn54 = new Pawn(chessBoard48, color53);
    Pawn pawn55 = new Pawn(chessBoard30, color53);
    Pawn pawn56 = new Pawn(chessBoard13, color53);
    Knight knight57 = new Knight(chessBoard0, color53);
    java.util.ArrayList arrayList58 = knight57.legalMoves();
    java.util.ArrayList arrayList59 = knight57.legalMoves();
    knight57.setRow(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str51.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str52.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList59);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test279"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    java.lang.String str17 = chessBoard0.toString();
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessBoard chessBoard21 = null;
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Rook rook23 = new Rook(chessBoard21, color22);
    Pawn pawn24 = new Pawn(chessBoard18, color22);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    King king26 = new King(chessBoard18, color25);
    chessBoard18.initialize();
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard28, color39);
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard28, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Knight knight45 = new Knight(chessBoard43, color44);
    ChessBoard chessBoard46 = null;
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Rook rook48 = new Rook(chessBoard46, color47);
    Pawn pawn49 = new Pawn(chessBoard43, color47);
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Pawn pawn52 = new Pawn(chessBoard50, color51);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Knight knight55 = new Knight(chessBoard53, color54);
    ChessBoard chessBoard56 = null;
    ChessPiece.Color color57 = ChessPiece.Color.WHITE;
    Rook rook58 = new Rook(chessBoard56, color57);
    Pawn pawn59 = new Pawn(chessBoard53, color57);
    Pawn pawn60 = new Pawn(chessBoard50, color57);
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard50, color61);
    ChessBoard chessBoard63 = null;
    ChessPiece.Color color64 = ChessPiece.Color.WHITE;
    Rook rook65 = new Rook(chessBoard63, color64);
    Bishop bishop66 = new Bishop(chessBoard50, color64);
    ChessPiece.Color color67 = ChessPiece.Color.BLACK;
    Queen queen68 = new Queen(chessBoard50, color67);
    Queen queen69 = new Queen(chessBoard43, color67);
    Bishop bishop70 = new Bishop(chessBoard28, color67);
    Pawn pawn71 = new Pawn(chessBoard18, color67);
    Pawn pawn72 = new Pawn(chessBoard0, color67);
    ChessPiece.Color color73 = null;
    Queen queen74 = new Queen(chessBoard0, color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str17.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test280"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Bishop bishop21 = new Bishop(chessBoard17, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard22, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard35, color46);
    Pawn pawn48 = new Pawn(chessBoard22, color46);
    Pawn pawn49 = new Pawn(chessBoard17, color46);
    Rook rook50 = new Rook(chessBoard0, color46);
    ChessBoard chessBoard51 = new ChessBoard();
    java.lang.String str52 = chessBoard51.toString();
    ChessBoard chessBoard53 = null;
    ChessPiece.Color color54 = ChessPiece.Color.WHITE;
    Rook rook55 = new Rook(chessBoard53, color54);
    rook55.setRow(100);
    java.util.ArrayList arrayList58 = rook55.legalMoves();
    int i59 = rook55.getColumn();
    ChessPiece.Color color60 = rook55.getColor();
    Bishop bishop61 = new Bishop(chessBoard51, color60);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Knight knight64 = new Knight(chessBoard62, color63);
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Bishop bishop66 = new Bishop(chessBoard62, color65);
    Bishop bishop67 = new Bishop(chessBoard51, color65);
    Knight knight68 = new Knight(chessBoard0, color65);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    ChessPiece.Color color72 = rook71.getColor();
    Queen queen73 = new Queen(chessBoard0, color72);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str52.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test281"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessBoard chessBoard7 = new ChessBoard();
    ChessPiece.Color color8 = null;
    Pawn pawn9 = new Pawn(chessBoard7, color8);
    ChessBoard chessBoard10 = new ChessBoard();
    ChessPiece.Color color11 = null;
    Knight knight12 = new Knight(chessBoard10, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Pawn pawn16 = new Pawn(chessBoard10, color14);
    Pawn pawn17 = new Pawn(chessBoard7, color14);
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard7, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Bishop bishop23 = new Bishop(chessBoard7, color21);
    ChessPiece.Color color24 = ChessPiece.Color.BLACK;
    Queen queen25 = new Queen(chessBoard7, color24);
    Queen queen26 = new Queen(chessBoard0, color24);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    ChessPiece.Color color33 = rook32.getColor();
    Bishop bishop34 = new Bishop(chessBoard27, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Bishop bishop50 = new Bishop(chessBoard46, color49);
    King king51 = new King(chessBoard35, color49);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessBoard chessBoard55 = null;
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Rook rook57 = new Rook(chessBoard55, color56);
    Pawn pawn58 = new Pawn(chessBoard52, color56);
    Bishop bishop59 = new Bishop(chessBoard35, color56);
    Pawn pawn60 = new Pawn(chessBoard27, color56);
    chessBoard27.initialize();
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Knight knight64 = new Knight(chessBoard62, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Pawn pawn78 = new Pawn(chessBoard76, color77);
    ChessBoard chessBoard79 = new ChessBoard();
    ChessPiece.Color color80 = null;
    Knight knight81 = new Knight(chessBoard79, color80);
    ChessBoard chessBoard82 = null;
    ChessPiece.Color color83 = ChessPiece.Color.WHITE;
    Rook rook84 = new Rook(chessBoard82, color83);
    Pawn pawn85 = new Pawn(chessBoard79, color83);
    Pawn pawn86 = new Pawn(chessBoard76, color83);
    ChessBoard chessBoard87 = new ChessBoard();
    ChessPiece.Color color88 = null;
    Knight knight89 = new Knight(chessBoard87, color88);
    ChessPiece.Color color90 = ChessPiece.Color.WHITE;
    Bishop bishop91 = new Bishop(chessBoard87, color90);
    King king92 = new King(chessBoard76, color90);
    Bishop bishop93 = new Bishop(chessBoard65, color90);
    Rook rook94 = new Rook(chessBoard62, color90);
    Knight knight95 = new Knight(chessBoard27, color90);
    Queen queen96 = new Queen(chessBoard0, color90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color90);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test282"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    java.lang.String str5 = chessBoard0.toString();
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Bishop bishop29 = new Bishop(chessBoard13, color27);
    ChessPiece.Color color30 = ChessPiece.Color.BLACK;
    Queen queen31 = new Queen(chessBoard13, color30);
    Queen queen32 = new Queen(chessBoard6, color30);
    Bishop bishop33 = new Bishop(chessBoard0, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Pawn pawn36 = new Pawn(chessBoard34, color35);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessBoard chessBoard40 = null;
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard40, color41);
    Pawn pawn43 = new Pawn(chessBoard37, color41);
    Pawn pawn44 = new Pawn(chessBoard34, color41);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Bishop bishop49 = new Bishop(chessBoard45, color48);
    King king50 = new King(chessBoard34, color48);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Pawn pawn56 = new Pawn(chessBoard54, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    Pawn pawn63 = new Pawn(chessBoard57, color61);
    Pawn pawn64 = new Pawn(chessBoard54, color61);
    King king65 = new King(chessBoard51, color61);
    ChessPiece.Color color66 = ChessPiece.Color.BLACK;
    King king67 = new King(chessBoard51, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Bishop bishop72 = new Bishop(chessBoard68, color71);
    ChessBoard chessBoard73 = new ChessBoard();
    ChessPiece.Color color74 = null;
    Pawn pawn75 = new Pawn(chessBoard73, color74);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Knight knight78 = new Knight(chessBoard76, color77);
    ChessBoard chessBoard79 = null;
    ChessPiece.Color color80 = ChessPiece.Color.WHITE;
    Rook rook81 = new Rook(chessBoard79, color80);
    Pawn pawn82 = new Pawn(chessBoard76, color80);
    Pawn pawn83 = new Pawn(chessBoard73, color80);
    King king84 = new King(chessBoard68, color80);
    chessBoard68.initialize();
    ChessBoard chessBoard86 = new ChessBoard();
    ChessPiece.Color color87 = null;
    Pawn pawn88 = new Pawn(chessBoard86, color87);
    java.lang.String str89 = chessBoard86.toString();
    java.lang.String str90 = chessBoard86.toString();
    ChessPiece.Color color91 = ChessPiece.Color.WHITE;
    Pawn pawn92 = new Pawn(chessBoard86, color91);
    Pawn pawn93 = new Pawn(chessBoard68, color91);
    Pawn pawn94 = new Pawn(chessBoard51, color91);
    Rook rook95 = new Rook(chessBoard34, color91);
    Pawn pawn96 = new Pawn(chessBoard0, color91);
    // The following exception was thrown during execution in test generation
    try {
      boolean b99 = chessBoard0.move("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265A \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518", "a101");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str5.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str89.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str90.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color91);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test283"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    ChessPiece.Color color16 = null;
    Queen queen17 = new Queen(chessBoard0, color16);
    java.lang.String str18 = queen17.toString();
    java.lang.String str19 = queen17.toString();
    java.lang.String str20 = queen17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\u265B"+ "'", str18.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test284"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.util.ArrayList arrayList8 = bishop7.legalMoves();
    java.lang.String str9 = bishop7.toString();
    java.util.ArrayList arrayList10 = bishop7.legalMoves();
    java.lang.String str11 = bishop7.toString();
    java.lang.String str12 = bishop7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2657"+ "'", str9.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u2657"+ "'", str11.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u2657"+ "'", str12.equals("\u2657"));

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test285"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Bishop bishop27 = new Bishop(chessBoard23, color26);
    King king28 = new King(chessBoard12, color26);
    Bishop bishop29 = new Bishop(chessBoard1, color26);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Bishop bishop45 = new Bishop(chessBoard41, color44);
    King king46 = new King(chessBoard30, color44);
    Knight knight47 = new Knight(chessBoard1, color44);
    King king48 = new King(chessBoard0, color44);
    java.lang.String str49 = chessBoard0.toString();
    chessBoard0.initialize();
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece52 = chessBoard0.getPiece("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str49.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test286"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = ChessPiece.Color.BLACK;
    Bishop bishop14 = new Bishop(chessBoard0, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Queen queen18 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    java.lang.String str20 = chessBoard19.toString();
    ChessBoard chessBoard21 = null;
    ChessPiece.Color color22 = null;
    King king23 = new King(chessBoard21, color22);
    ChessPiece.Color color24 = king23.getColor();
    king23.setRow(0);
    java.util.ArrayList arrayList27 = king23.legalMoves();
    boolean b29 = chessBoard19.placePiece((ChessPiece)king23, "a1");
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Bishop bishop31 = new Bishop(chessBoard19, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Pawn pawn34 = new Pawn(chessBoard32, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    Pawn pawn41 = new Pawn(chessBoard35, color39);
    Pawn pawn42 = new Pawn(chessBoard32, color39);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Pawn pawn45 = new Pawn(chessBoard43, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessBoard chessBoard49 = null;
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard49, color50);
    Pawn pawn52 = new Pawn(chessBoard46, color50);
    Pawn pawn53 = new Pawn(chessBoard43, color50);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessPiece.Color color57 = ChessPiece.Color.WHITE;
    Bishop bishop58 = new Bishop(chessBoard54, color57);
    King king59 = new King(chessBoard43, color57);
    Bishop bishop60 = new Bishop(chessBoard32, color57);
    ChessBoard chessBoard61 = new ChessBoard();
    ChessPiece.Color color62 = null;
    Pawn pawn63 = new Pawn(chessBoard61, color62);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessBoard chessBoard67 = null;
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Rook rook69 = new Rook(chessBoard67, color68);
    Pawn pawn70 = new Pawn(chessBoard64, color68);
    Pawn pawn71 = new Pawn(chessBoard61, color68);
    ChessBoard chessBoard72 = new ChessBoard();
    ChessPiece.Color color73 = null;
    Knight knight74 = new Knight(chessBoard72, color73);
    ChessPiece.Color color75 = ChessPiece.Color.WHITE;
    Bishop bishop76 = new Bishop(chessBoard72, color75);
    King king77 = new King(chessBoard61, color75);
    Knight knight78 = new Knight(chessBoard32, color75);
    ChessBoard chessBoard79 = new ChessBoard();
    ChessPiece.Color color80 = null;
    Pawn pawn81 = new Pawn(chessBoard79, color80);
    java.lang.String str82 = chessBoard79.toString();
    java.lang.String str83 = chessBoard79.toString();
    ChessPiece.Color color84 = ChessPiece.Color.WHITE;
    Pawn pawn85 = new Pawn(chessBoard79, color84);
    King king86 = new King(chessBoard32, color84);
    Bishop bishop87 = new Bishop(chessBoard19, color84);
    Queen queen88 = new Queen(chessBoard0, color84);
    ChessPiece.Color color89 = null;
    King king90 = new King(chessBoard0, color89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str20.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str82.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str83.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color84);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test287"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Pawn pawn43 = new Pawn(chessBoard17, color41);
    Knight knight44 = new Knight(chessBoard0, color41);
    boolean b47 = chessBoard0.move("a1", "b1");
    chessBoard0.initialize();
    ChessBoard chessBoard49 = null;
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard49, color50);
    ChessPiece.Color color52 = rook51.getColor();
    Bishop bishop53 = new Bishop(chessBoard0, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Pawn pawn56 = new Pawn(chessBoard54, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    Pawn pawn63 = new Pawn(chessBoard57, color61);
    Pawn pawn64 = new Pawn(chessBoard54, color61);
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Rook rook66 = new Rook(chessBoard54, color65);
    ChessBoard chessBoard67 = null;
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Rook rook69 = new Rook(chessBoard67, color68);
    Bishop bishop70 = new Bishop(chessBoard54, color68);
    ChessPiece.Color color71 = ChessPiece.Color.BLACK;
    Queen queen72 = new Queen(chessBoard54, color71);
    King king73 = new King(chessBoard0, color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test288"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    java.lang.String str11 = chessBoard0.toString();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    Knight knight24 = new Knight(chessBoard12, color20);
    Queen queen25 = new Queen(chessBoard0, color20);
    queen25.setPosition("a101");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str11.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test289"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Rook rook23 = new Rook(chessBoard11, color22);
    java.lang.String str24 = chessBoard11.toString();
    ChessPiece chessPiece26 = chessBoard11.getPiece("a1");
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Bishop bishop43 = new Bishop(chessBoard27, color41);
    Rook rook44 = new Rook(chessBoard11, color41);
    Queen queen45 = new Queen(chessBoard0, color41);
    java.lang.String str46 = queen45.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str24.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "a1"+ "'", str46.equals("a1"));

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test290"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    king8.setColumn(56);
    java.util.ArrayList arrayList11 = king8.legalMoves();
    king8.setRow(10);
    java.util.ArrayList arrayList14 = king8.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test291"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Bishop bishop32 = new Bishop(chessBoard28, color31);
    King king33 = new King(chessBoard17, color31);
    Knight knight34 = new Knight(chessBoard0, color31);
    ChessBoard chessBoard35 = null;
    ChessBoard chessBoard36 = new ChessBoard();
    java.lang.String str37 = chessBoard36.toString();
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = null;
    King king40 = new King(chessBoard38, color39);
    ChessPiece.Color color41 = king40.getColor();
    king40.setRow(0);
    java.util.ArrayList arrayList44 = king40.legalMoves();
    boolean b46 = chessBoard36.placePiece((ChessPiece)king40, "a1");
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Bishop bishop48 = new Bishop(chessBoard36, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    java.lang.String str50 = chessBoard49.toString();
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = null;
    King king53 = new King(chessBoard51, color52);
    ChessPiece.Color color54 = king53.getColor();
    king53.setRow(0);
    java.util.ArrayList arrayList57 = king53.legalMoves();
    boolean b59 = chessBoard49.placePiece((ChessPiece)king53, "a1");
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Bishop bishop61 = new Bishop(chessBoard49, color60);
    Pawn pawn62 = new Pawn(chessBoard36, color60);
    Rook rook63 = new Rook(chessBoard35, color60);
    Queen queen64 = new Queen(chessBoard0, color60);
    java.lang.String str65 = queen64.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str37.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str50.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\u2655"+ "'", str65.equals("\u2655"));

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test292"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard20, color31);
    ChessPiece.Color color33 = ChessPiece.Color.BLACK;
    Bishop bishop34 = new Bishop(chessBoard20, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Pawn pawn48 = new Pawn(chessBoard46, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Knight knight51 = new Knight(chessBoard49, color50);
    ChessBoard chessBoard52 = null;
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Rook rook54 = new Rook(chessBoard52, color53);
    Pawn pawn55 = new Pawn(chessBoard49, color53);
    Pawn pawn56 = new Pawn(chessBoard46, color53);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Bishop bishop61 = new Bishop(chessBoard57, color60);
    King king62 = new King(chessBoard46, color60);
    Bishop bishop63 = new Bishop(chessBoard35, color60);
    ChessBoard chessBoard64 = null;
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Rook rook66 = new Rook(chessBoard64, color65);
    King king67 = new King(chessBoard35, color65);
    Queen queen68 = new Queen(chessBoard20, color65);
    Pawn pawn69 = new Pawn(chessBoard0, color65);
    java.util.ArrayList arrayList70 = pawn69.legalMoves();
    int i71 = pawn69.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test293"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessBoard chessBoard7 = new ChessBoard();
    ChessPiece.Color color8 = null;
    Knight knight9 = new Knight(chessBoard7, color8);
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Bishop bishop11 = new Bishop(chessBoard7, color10);
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    King king23 = new King(chessBoard7, color19);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Pawn pawn26 = new Pawn(chessBoard24, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Pawn pawn33 = new Pawn(chessBoard27, color31);
    Pawn pawn34 = new Pawn(chessBoard24, color31);
    Bishop bishop35 = new Bishop(chessBoard7, color31);
    King king36 = new King(chessBoard0, color31);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Pawn pawn42 = new Pawn(chessBoard40, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Knight knight45 = new Knight(chessBoard43, color44);
    ChessBoard chessBoard46 = null;
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Rook rook48 = new Rook(chessBoard46, color47);
    Pawn pawn49 = new Pawn(chessBoard43, color47);
    Pawn pawn50 = new Pawn(chessBoard40, color47);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Pawn pawn53 = new Pawn(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessBoard chessBoard57 = null;
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard57, color58);
    Pawn pawn60 = new Pawn(chessBoard54, color58);
    Pawn pawn61 = new Pawn(chessBoard51, color58);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Knight knight64 = new Knight(chessBoard62, color63);
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Bishop bishop66 = new Bishop(chessBoard62, color65);
    King king67 = new King(chessBoard51, color65);
    Bishop bishop68 = new Bishop(chessBoard40, color65);
    Rook rook69 = new Rook(chessBoard37, color65);
    King king70 = new King(chessBoard0, color65);
    java.lang.String str71 = king70.toString();
    java.lang.String str72 = king70.toString();
    java.lang.String str73 = king70.toString();
    java.util.ArrayList arrayList74 = king70.legalMoves();
    king70.setColumn(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "\u2654"+ "'", str71.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\u2654"+ "'", str72.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "\u2654"+ "'", str73.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList74);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test294"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    java.lang.String str5 = chessBoard0.toString();
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessPiece.Color color9 = ChessPiece.Color.WHITE;
    Bishop bishop10 = new Bishop(chessBoard6, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Rook rook14 = new Rook(chessBoard6, color12);
    Queen queen15 = new Queen(chessBoard0, color12);
    java.lang.String str16 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str5.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str16.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test295"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    java.lang.String str17 = chessBoard0.toString();
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessBoard chessBoard21 = null;
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Rook rook23 = new Rook(chessBoard21, color22);
    Pawn pawn24 = new Pawn(chessBoard18, color22);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    King king26 = new King(chessBoard18, color25);
    chessBoard18.initialize();
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard28, color39);
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard28, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Knight knight45 = new Knight(chessBoard43, color44);
    ChessBoard chessBoard46 = null;
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Rook rook48 = new Rook(chessBoard46, color47);
    Pawn pawn49 = new Pawn(chessBoard43, color47);
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Pawn pawn52 = new Pawn(chessBoard50, color51);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Knight knight55 = new Knight(chessBoard53, color54);
    ChessBoard chessBoard56 = null;
    ChessPiece.Color color57 = ChessPiece.Color.WHITE;
    Rook rook58 = new Rook(chessBoard56, color57);
    Pawn pawn59 = new Pawn(chessBoard53, color57);
    Pawn pawn60 = new Pawn(chessBoard50, color57);
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard50, color61);
    ChessBoard chessBoard63 = null;
    ChessPiece.Color color64 = ChessPiece.Color.WHITE;
    Rook rook65 = new Rook(chessBoard63, color64);
    Bishop bishop66 = new Bishop(chessBoard50, color64);
    ChessPiece.Color color67 = ChessPiece.Color.BLACK;
    Queen queen68 = new Queen(chessBoard50, color67);
    Queen queen69 = new Queen(chessBoard43, color67);
    Bishop bishop70 = new Bishop(chessBoard28, color67);
    Pawn pawn71 = new Pawn(chessBoard18, color67);
    Pawn pawn72 = new Pawn(chessBoard0, color67);
    // The following exception was thrown during execution in test generation
    try {
      boolean b75 = chessBoard0.move("\u2655", " 57");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str17.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test296"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Rook rook4 = new Rook(chessBoard2, color3);
    rook4.setRow(100);
    java.util.ArrayList arrayList7 = rook4.legalMoves();
    int i8 = rook4.getColumn();
    ChessPiece.Color color9 = rook4.getColor();
    Bishop bishop10 = new Bishop(chessBoard0, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    King king27 = new King(chessBoard11, color23);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    Bishop bishop39 = new Bishop(chessBoard11, color35);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Pawn pawn45 = new Pawn(chessBoard43, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessBoard chessBoard49 = null;
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard49, color50);
    Pawn pawn52 = new Pawn(chessBoard46, color50);
    Pawn pawn53 = new Pawn(chessBoard43, color50);
    King king54 = new King(chessBoard40, color50);
    ChessPiece.Color color55 = ChessPiece.Color.BLACK;
    King king56 = new King(chessBoard40, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Bishop bishop61 = new Bishop(chessBoard57, color60);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Pawn pawn64 = new Pawn(chessBoard62, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Knight knight67 = new Knight(chessBoard65, color66);
    ChessBoard chessBoard68 = null;
    ChessPiece.Color color69 = ChessPiece.Color.WHITE;
    Rook rook70 = new Rook(chessBoard68, color69);
    Pawn pawn71 = new Pawn(chessBoard65, color69);
    Pawn pawn72 = new Pawn(chessBoard62, color69);
    ChessPiece.Color color73 = ChessPiece.Color.WHITE;
    Rook rook74 = new Rook(chessBoard62, color73);
    ChessBoard chessBoard75 = new ChessBoard();
    ChessPiece.Color color76 = null;
    Pawn pawn77 = new Pawn(chessBoard75, color76);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Knight knight80 = new Knight(chessBoard78, color79);
    ChessBoard chessBoard81 = null;
    ChessPiece.Color color82 = ChessPiece.Color.WHITE;
    Rook rook83 = new Rook(chessBoard81, color82);
    Pawn pawn84 = new Pawn(chessBoard78, color82);
    Pawn pawn85 = new Pawn(chessBoard75, color82);
    ChessPiece.Color color86 = ChessPiece.Color.WHITE;
    Rook rook87 = new Rook(chessBoard75, color86);
    Pawn pawn88 = new Pawn(chessBoard62, color86);
    Pawn pawn89 = new Pawn(chessBoard57, color86);
    Rook rook90 = new Rook(chessBoard40, color86);
    ChessBoard chessBoard91 = null;
    ChessPiece.Color color92 = ChessPiece.Color.WHITE;
    Rook rook93 = new Rook(chessBoard91, color92);
    ChessPiece.Color color94 = rook93.getColor();
    Queen queen95 = new Queen(chessBoard40, color94);
    Queen queen96 = new Queen(chessBoard11, color94);
    Bishop bishop97 = new Bishop(chessBoard0, color94);
    java.lang.String str98 = chessBoard0.toString();
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str98.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test297"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Pawn pawn18 = new Pawn(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    java.lang.String str20 = chessBoard0.toString();
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Pawn pawn23 = new Pawn(chessBoard21, color22);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Knight knight26 = new Knight(chessBoard24, color25);
    ChessBoard chessBoard27 = null;
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard27, color28);
    Pawn pawn30 = new Pawn(chessBoard24, color28);
    Pawn pawn31 = new Pawn(chessBoard21, color28);
    ChessPiece.Color color32 = ChessPiece.Color.WHITE;
    Rook rook33 = new Rook(chessBoard21, color32);
    java.lang.String str34 = chessBoard21.toString();
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard35, color46);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Pawn pawn50 = new Pawn(chessBoard48, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = null;
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Rook rook56 = new Rook(chessBoard54, color55);
    Pawn pawn57 = new Pawn(chessBoard51, color55);
    Pawn pawn58 = new Pawn(chessBoard48, color55);
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard48, color59);
    Pawn pawn61 = new Pawn(chessBoard35, color59);
    Bishop bishop62 = new Bishop(chessBoard21, color59);
    Queen queen63 = new Queen(chessBoard0, color59);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Pawn pawn66 = new Pawn(chessBoard64, color65);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Knight knight69 = new Knight(chessBoard67, color68);
    ChessBoard chessBoard70 = null;
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard70, color71);
    Pawn pawn73 = new Pawn(chessBoard67, color71);
    Pawn pawn74 = new Pawn(chessBoard64, color71);
    ChessPiece.Color color75 = ChessPiece.Color.WHITE;
    Rook rook76 = new Rook(chessBoard64, color75);
    rook76.setColumn(0);
    java.lang.String str79 = rook76.toString();
    java.util.ArrayList arrayList80 = rook76.legalMoves();
    java.util.ArrayList arrayList81 = rook76.legalMoves();
    ChessPiece.Color color82 = rook76.getColor();
    Knight knight83 = new Knight(chessBoard0, color82);
    knight83.setRow(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str20.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str34.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\u2656"+ "'", str79.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test298"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    java.util.ArrayList arrayList60 = pawn59.legalMoves();
    java.lang.String str61 = pawn59.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "\u2659"+ "'", str61.equals("\u2659"));

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test299"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = ChessPiece.Color.BLACK;
    Bishop bishop14 = new Bishop(chessBoard0, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Queen queen18 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard0, color23);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Knight knight52 = new Knight(chessBoard50, color51);
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Bishop bishop54 = new Bishop(chessBoard50, color53);
    King king55 = new King(chessBoard39, color53);
    Bishop bishop56 = new Bishop(chessBoard28, color53);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Pawn pawn59 = new Pawn(chessBoard57, color58);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = null;
    ChessPiece.Color color64 = ChessPiece.Color.WHITE;
    Rook rook65 = new Rook(chessBoard63, color64);
    Pawn pawn66 = new Pawn(chessBoard60, color64);
    Pawn pawn67 = new Pawn(chessBoard57, color64);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Bishop bishop72 = new Bishop(chessBoard68, color71);
    King king73 = new King(chessBoard57, color71);
    Knight knight74 = new Knight(chessBoard28, color71);
    King king75 = new King(chessBoard27, color71);
    ChessPiece.Color color76 = null;
    Pawn pawn77 = new Pawn(chessBoard27, color76);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Knight knight80 = new Knight(chessBoard78, color79);
    ChessBoard chessBoard81 = null;
    ChessPiece.Color color82 = ChessPiece.Color.WHITE;
    Rook rook83 = new Rook(chessBoard81, color82);
    ChessPiece.Color color84 = rook83.getColor();
    Bishop bishop85 = new Bishop(chessBoard78, color84);
    Pawn pawn86 = new Pawn(chessBoard27, color84);
    Rook rook87 = new Rook(chessBoard0, color84);
    int i88 = rook87.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test300"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.lang.String str22 = queen18.toString();
    java.lang.String str23 = queen18.toString();
    java.util.ArrayList arrayList24 = queen18.legalMoves();
    java.lang.String str25 = queen18.toString();
    java.lang.String str26 = queen18.toString();
    java.lang.String str27 = queen18.toString();
    java.lang.String str28 = queen18.toString();
    queen18.setRow(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u265B"+ "'", str23.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\u265B"+ "'", str25.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\u265B"+ "'", str26.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\u265B"+ "'", str27.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\u265B"+ "'", str28.equals("\u265B"));

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test301"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Bishop bishop21 = new Bishop(chessBoard17, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard22, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard35, color46);
    Pawn pawn48 = new Pawn(chessBoard22, color46);
    Pawn pawn49 = new Pawn(chessBoard17, color46);
    Rook rook50 = new Rook(chessBoard0, color46);
    java.lang.String str51 = rook50.toString();
    java.util.ArrayList arrayList52 = rook50.legalMoves();
    java.util.ArrayList arrayList53 = rook50.legalMoves();
    java.util.ArrayList arrayList54 = rook50.legalMoves();
    // The following exception was thrown during execution in test generation
    try {
      rook50.setPosition("");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\u2656"+ "'", str51.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList54);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test302"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Pawn pawn43 = new Pawn(chessBoard17, color41);
    Knight knight44 = new Knight(chessBoard0, color41);
    boolean b47 = chessBoard0.move("a1", "b1");
    ChessPiece chessPiece49 = chessBoard0.getPiece(" 1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece49);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test303"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    java.lang.String str9 = chessBoard0.toString();
    ChessBoard chessBoard10 = new ChessBoard();
    ChessPiece.Color color11 = null;
    Pawn pawn12 = new Pawn(chessBoard10, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Knight knight15 = new Knight(chessBoard13, color14);
    ChessBoard chessBoard16 = null;
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Rook rook18 = new Rook(chessBoard16, color17);
    Pawn pawn19 = new Pawn(chessBoard13, color17);
    Pawn pawn20 = new Pawn(chessBoard10, color17);
    chessBoard10.initialize();
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Bishop bishop48 = new Bishop(chessBoard44, color47);
    King king49 = new King(chessBoard33, color47);
    Bishop bishop50 = new Bishop(chessBoard22, color47);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Pawn pawn53 = new Pawn(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessBoard chessBoard57 = null;
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard57, color58);
    Pawn pawn60 = new Pawn(chessBoard54, color58);
    Pawn pawn61 = new Pawn(chessBoard51, color58);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Knight knight64 = new Knight(chessBoard62, color63);
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Bishop bishop66 = new Bishop(chessBoard62, color65);
    King king67 = new King(chessBoard51, color65);
    Knight knight68 = new Knight(chessBoard22, color65);
    Pawn pawn69 = new Pawn(chessBoard10, color65);
    ChessBoard chessBoard70 = new ChessBoard();
    ChessPiece.Color color71 = null;
    Pawn pawn72 = new Pawn(chessBoard70, color71);
    ChessBoard chessBoard73 = new ChessBoard();
    ChessPiece.Color color74 = null;
    Knight knight75 = new Knight(chessBoard73, color74);
    ChessBoard chessBoard76 = null;
    ChessPiece.Color color77 = ChessPiece.Color.WHITE;
    Rook rook78 = new Rook(chessBoard76, color77);
    Pawn pawn79 = new Pawn(chessBoard73, color77);
    Pawn pawn80 = new Pawn(chessBoard70, color77);
    ChessPiece.Color color81 = ChessPiece.Color.WHITE;
    Rook rook82 = new Rook(chessBoard70, color81);
    ChessBoard chessBoard83 = null;
    ChessPiece.Color color84 = ChessPiece.Color.WHITE;
    Rook rook85 = new Rook(chessBoard83, color84);
    Bishop bishop86 = new Bishop(chessBoard70, color84);
    Rook rook87 = new Rook(chessBoard10, color84);
    King king88 = new King(chessBoard0, color84);
    ChessPiece.Color color89 = null;
    Rook rook90 = new Rook(chessBoard0, color89);
    // The following exception was thrown during execution in test generation
    try {
      boolean b93 = chessBoard0.move("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518", "a11");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str9.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color84);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test304"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    java.lang.String str17 = chessBoard0.toString();
    ChessPiece.Color color18 = ChessPiece.Color.BLACK;
    Bishop bishop19 = new Bishop(chessBoard0, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessBoard chessBoard37 = null;
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard37, color38);
    Pawn pawn40 = new Pawn(chessBoard34, color38);
    Pawn pawn41 = new Pawn(chessBoard31, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Bishop bishop46 = new Bishop(chessBoard42, color45);
    King king47 = new King(chessBoard31, color45);
    Bishop bishop48 = new Bishop(chessBoard20, color45);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Pawn pawn51 = new Pawn(chessBoard49, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessBoard chessBoard55 = null;
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Rook rook57 = new Rook(chessBoard55, color56);
    Pawn pawn58 = new Pawn(chessBoard52, color56);
    Pawn pawn59 = new Pawn(chessBoard49, color56);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Bishop bishop64 = new Bishop(chessBoard60, color63);
    King king65 = new King(chessBoard49, color63);
    Knight knight66 = new Knight(chessBoard20, color63);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Pawn pawn69 = new Pawn(chessBoard67, color68);
    java.lang.String str70 = chessBoard67.toString();
    java.lang.String str71 = chessBoard67.toString();
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Pawn pawn73 = new Pawn(chessBoard67, color72);
    King king74 = new King(chessBoard20, color72);
    King king75 = new King(chessBoard0, color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str17.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str70.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str71.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test305"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Bishop bishop21 = new Bishop(chessBoard17, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard22, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard35, color46);
    Pawn pawn48 = new Pawn(chessBoard22, color46);
    Pawn pawn49 = new Pawn(chessBoard17, color46);
    Rook rook50 = new Rook(chessBoard0, color46);
    ChessBoard chessBoard51 = new ChessBoard();
    java.lang.String str52 = chessBoard51.toString();
    ChessBoard chessBoard53 = null;
    ChessPiece.Color color54 = ChessPiece.Color.WHITE;
    Rook rook55 = new Rook(chessBoard53, color54);
    rook55.setRow(100);
    java.util.ArrayList arrayList58 = rook55.legalMoves();
    int i59 = rook55.getColumn();
    ChessPiece.Color color60 = rook55.getColor();
    Bishop bishop61 = new Bishop(chessBoard51, color60);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Knight knight64 = new Knight(chessBoard62, color63);
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Bishop bishop66 = new Bishop(chessBoard62, color65);
    Bishop bishop67 = new Bishop(chessBoard51, color65);
    Knight knight68 = new Knight(chessBoard0, color65);
    java.lang.String str69 = chessBoard0.toString();
    chessBoard0.initialize();
    // The following exception was thrown during execution in test generation
    try {
      boolean b73 = chessBoard0.move("\u265D", " 57");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str52.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str69.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test306"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    King king24 = new King(chessBoard16, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Bishop bishop29 = new Bishop(chessBoard25, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    King king41 = new King(chessBoard25, color37);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    Bishop bishop53 = new Bishop(chessBoard25, color49);
    chessBoard25.initialize();
    java.lang.String str55 = chessBoard25.toString();
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessPiece.Color color66 = ChessPiece.Color.WHITE;
    Bishop bishop67 = new Bishop(chessBoard63, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Pawn pawn70 = new Pawn(chessBoard68, color69);
    ChessBoard chessBoard71 = new ChessBoard();
    ChessPiece.Color color72 = null;
    Knight knight73 = new Knight(chessBoard71, color72);
    ChessBoard chessBoard74 = null;
    ChessPiece.Color color75 = ChessPiece.Color.WHITE;
    Rook rook76 = new Rook(chessBoard74, color75);
    Pawn pawn77 = new Pawn(chessBoard71, color75);
    Pawn pawn78 = new Pawn(chessBoard68, color75);
    King king79 = new King(chessBoard63, color75);
    ChessBoard chessBoard80 = new ChessBoard();
    ChessPiece.Color color81 = null;
    Pawn pawn82 = new Pawn(chessBoard80, color81);
    ChessBoard chessBoard83 = new ChessBoard();
    ChessPiece.Color color84 = null;
    Knight knight85 = new Knight(chessBoard83, color84);
    ChessBoard chessBoard86 = null;
    ChessPiece.Color color87 = ChessPiece.Color.WHITE;
    Rook rook88 = new Rook(chessBoard86, color87);
    Pawn pawn89 = new Pawn(chessBoard83, color87);
    Pawn pawn90 = new Pawn(chessBoard80, color87);
    Bishop bishop91 = new Bishop(chessBoard63, color87);
    King king92 = new King(chessBoard56, color87);
    Bishop bishop93 = new Bishop(chessBoard25, color87);
    Bishop bishop94 = new Bishop(chessBoard16, color87);
    Knight knight95 = new Knight(chessBoard0, color87);
    java.util.ArrayList arrayList96 = knight95.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str55.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList96);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test307"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    Pawn pawn78 = new Pawn(chessBoard52, color76);
    Pawn pawn79 = new Pawn(chessBoard47, color76);
    java.util.ArrayList arrayList80 = pawn79.legalMoves();
    int i81 = pawn79.getRow();
    ChessPiece.Color color82 = pawn79.getColor();
    King king83 = new King(chessBoard0, color82);
    ChessPiece.Color color84 = null;
    Queen queen85 = new Queen(chessBoard0, color84);
    chessBoard0.initialize();
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test308"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    rook19.setRow(100);
    java.util.ArrayList arrayList22 = rook19.legalMoves();
    int i23 = rook19.getColumn();
    ChessPiece.Color color24 = rook19.getColor();
    King king25 = new King(chessBoard0, color24);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test309"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    bishop4.setColumn(1);
    java.util.ArrayList arrayList7 = bishop4.legalMoves();
    int i8 = bishop4.getColumn();
    java.lang.String str9 = bishop4.toString();
    java.lang.String str10 = bishop4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2657"+ "'", str9.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u2657"+ "'", str10.equals("\u2657"));

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test310"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    king2.setRow(0);
    java.util.ArrayList arrayList6 = king2.legalMoves();
    java.util.ArrayList arrayList7 = king2.legalMoves();
    java.lang.String str8 = king2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\u265A"+ "'", str8.equals("\u265A"));

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test311"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = null;
    King king4 = new King(chessBoard2, color3);
    ChessPiece.Color color5 = king4.getColor();
    king4.setRow(0);
    java.util.ArrayList arrayList8 = king4.legalMoves();
    boolean b10 = chessBoard0.placePiece((ChessPiece)king4, "a1");
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Bishop bishop12 = new Bishop(chessBoard0, color11);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece14 = chessBoard0.getPiece("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test312"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    Pawn pawn53 = new Pawn(chessBoard47, color51);
    Pawn pawn54 = new Pawn(chessBoard44, color51);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Bishop bishop59 = new Bishop(chessBoard55, color58);
    King king60 = new King(chessBoard44, color58);
    Bishop bishop61 = new Bishop(chessBoard33, color58);
    java.lang.String str62 = bishop61.toString();
    ChessPiece.Color color63 = bishop61.getColor();
    Pawn pawn64 = new Pawn(chessBoard0, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Knight knight78 = new Knight(chessBoard76, color77);
    ChessPiece.Color color79 = ChessPiece.Color.WHITE;
    Bishop bishop80 = new Bishop(chessBoard76, color79);
    King king81 = new King(chessBoard65, color79);
    ChessBoard chessBoard82 = new ChessBoard();
    ChessPiece.Color color83 = null;
    Knight knight84 = new Knight(chessBoard82, color83);
    ChessBoard chessBoard85 = null;
    ChessPiece.Color color86 = ChessPiece.Color.WHITE;
    Rook rook87 = new Rook(chessBoard85, color86);
    Pawn pawn88 = new Pawn(chessBoard82, color86);
    Bishop bishop89 = new Bishop(chessBoard65, color86);
    Queen queen90 = new Queen(chessBoard0, color86);
    java.lang.String str91 = queen90.toString();
    queen90.setRow((-1));
    java.lang.String str94 = queen90.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "\u2657"+ "'", str62.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "\u2655"+ "'", str91.equals("\u2655"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "a0"+ "'", str94.equals("a0"));

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test313"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = null;
    King king4 = new King(chessBoard2, color3);
    ChessPiece.Color color5 = king4.getColor();
    king4.setRow(0);
    java.util.ArrayList arrayList8 = king4.legalMoves();
    boolean b10 = chessBoard0.placePiece((ChessPiece)king4, "a1");
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece12 = chessBoard0.getPiece("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test314"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Pawn pawn49 = new Pawn(chessBoard47, color48);
    java.lang.String str50 = chessBoard47.toString();
    java.lang.String str51 = chessBoard47.toString();
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Pawn pawn53 = new Pawn(chessBoard47, color52);
    King king54 = new King(chessBoard0, color52);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Pawn pawn57 = new Pawn(chessBoard55, color56);
    ChessBoard chessBoard58 = new ChessBoard();
    ChessPiece.Color color59 = null;
    Knight knight60 = new Knight(chessBoard58, color59);
    ChessBoard chessBoard61 = null;
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard61, color62);
    Pawn pawn64 = new Pawn(chessBoard58, color62);
    Pawn pawn65 = new Pawn(chessBoard55, color62);
    ChessPiece.Color color66 = ChessPiece.Color.WHITE;
    Rook rook67 = new Rook(chessBoard55, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Bishop bishop72 = new Bishop(chessBoard68, color71);
    ChessBoard chessBoard73 = new ChessBoard();
    ChessPiece.Color color74 = null;
    Pawn pawn75 = new Pawn(chessBoard73, color74);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Knight knight78 = new Knight(chessBoard76, color77);
    ChessBoard chessBoard79 = null;
    ChessPiece.Color color80 = ChessPiece.Color.WHITE;
    Rook rook81 = new Rook(chessBoard79, color80);
    Pawn pawn82 = new Pawn(chessBoard76, color80);
    Pawn pawn83 = new Pawn(chessBoard73, color80);
    King king84 = new King(chessBoard68, color80);
    Bishop bishop85 = new Bishop(chessBoard55, color80);
    Knight knight86 = new Knight(chessBoard0, color80);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece88 = chessBoard0.getPiece("\u265F");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str50.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str51.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color80);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test315"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.util.ArrayList arrayList21 = queen18.legalMoves();
    java.lang.String str22 = queen18.toString();
    java.lang.String str23 = queen18.toString();
    queen18.setColumn(1);
    java.util.ArrayList arrayList26 = queen18.legalMoves();
    java.util.ArrayList arrayList27 = queen18.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u265B"+ "'", str23.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test316"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Bishop bishop32 = new Bishop(chessBoard28, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    King king44 = new King(chessBoard28, color40);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Pawn pawn47 = new Pawn(chessBoard45, color46);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Knight knight50 = new Knight(chessBoard48, color49);
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard51, color52);
    Pawn pawn54 = new Pawn(chessBoard48, color52);
    Pawn pawn55 = new Pawn(chessBoard45, color52);
    Bishop bishop56 = new Bishop(chessBoard28, color52);
    Rook rook57 = new Rook(chessBoard17, color52);
    Knight knight58 = new Knight(chessBoard0, color52);
    java.lang.String str59 = chessBoard0.toString();
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Bishop bishop64 = new Bishop(chessBoard60, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    King king76 = new King(chessBoard60, color72);
    Knight knight77 = new Knight(chessBoard0, color72);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Pawn pawn80 = new Pawn(chessBoard78, color79);
    ChessBoard chessBoard81 = new ChessBoard();
    ChessPiece.Color color82 = null;
    Knight knight83 = new Knight(chessBoard81, color82);
    ChessBoard chessBoard84 = null;
    ChessPiece.Color color85 = ChessPiece.Color.WHITE;
    Rook rook86 = new Rook(chessBoard84, color85);
    Pawn pawn87 = new Pawn(chessBoard81, color85);
    Pawn pawn88 = new Pawn(chessBoard78, color85);
    ChessBoard chessBoard89 = new ChessBoard();
    ChessPiece.Color color90 = null;
    Knight knight91 = new Knight(chessBoard89, color90);
    ChessPiece.Color color92 = ChessPiece.Color.WHITE;
    Bishop bishop93 = new Bishop(chessBoard89, color92);
    King king94 = new King(chessBoard78, color92);
    Bishop bishop95 = new Bishop(chessBoard0, color92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str59.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color92);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test317"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard27, color38);
    Pawn pawn40 = new Pawn(chessBoard14, color38);
    Bishop bishop41 = new Bishop(chessBoard0, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Bishop bishop68 = new Bishop(chessBoard64, color67);
    King king69 = new King(chessBoard53, color67);
    Bishop bishop70 = new Bishop(chessBoard42, color67);
    Rook rook71 = new Rook(chessBoard0, color67);
    int i72 = rook71.getColumn();
    java.util.ArrayList arrayList73 = rook71.legalMoves();
    java.lang.String str74 = rook71.toString();
    int i75 = rook71.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "\u2656"+ "'", str74.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test318"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    boolean b17 = chessBoard0.move("b1", "\u2654");
    boolean b20 = chessBoard0.move("a2", "\u2654");
    ChessPiece chessPiece22 = chessBoard0.getPiece("a101");
    java.lang.String str23 = chessBoard0.toString();
    ChessPiece.Color color24 = null;
    Queen queen25 = new Queen(chessBoard0, color24);
    java.lang.String str26 = queen25.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str23.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "a1"+ "'", str26.equals("a1"));

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test319"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    int i7 = pawn6.getColumn();
    int i8 = pawn6.getColumn();
    int i9 = pawn6.getRow();
    int i10 = pawn6.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test320"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.lang.String str22 = queen18.toString();
    java.lang.String str23 = queen18.toString();
    java.util.ArrayList arrayList24 = queen18.legalMoves();
    java.lang.String str25 = queen18.toString();
    java.lang.String str26 = queen18.toString();
    ChessPiece.Color color27 = queen18.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u265B"+ "'", str23.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\u265B"+ "'", str25.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\u265B"+ "'", str26.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test321"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    java.lang.String str3 = knight2.toString();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    java.lang.String str5 = knight2.getPosition();
    java.lang.String str6 = knight2.getPosition();
    java.util.ArrayList arrayList7 = knight2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u265E"+ "'", str3.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1"+ "'", str5.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a1"+ "'", str6.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test322"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    pawn6.setColumn(0);
    java.util.ArrayList arrayList9 = pawn6.legalMoves();
    java.util.ArrayList arrayList10 = pawn6.legalMoves();
    java.util.ArrayList arrayList11 = pawn6.legalMoves();
    java.util.ArrayList arrayList12 = pawn6.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test323"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.lang.String str22 = queen18.toString();
    java.lang.String str23 = queen18.toString();
    java.lang.String str24 = queen18.toString();
    int i25 = queen18.getColumn();
    queen18.setColumn(0);
    int i28 = queen18.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u265B"+ "'", str23.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\u265B"+ "'", str24.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test324"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Rook rook4 = new Rook(chessBoard2, color3);
    rook4.setRow(100);
    java.util.ArrayList arrayList7 = rook4.legalMoves();
    int i8 = rook4.getColumn();
    ChessPiece.Color color9 = rook4.getColor();
    Bishop bishop10 = new Bishop(chessBoard0, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    King king38 = new King(chessBoard22, color34);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    Bishop bishop50 = new Bishop(chessBoard22, color46);
    Rook rook51 = new Rook(chessBoard11, color46);
    Pawn pawn52 = new Pawn(chessBoard0, color46);
    java.lang.String str53 = chessBoard0.toString();
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessPiece.Color color57 = ChessPiece.Color.WHITE;
    Bishop bishop58 = new Bishop(chessBoard54, color57);
    Knight knight59 = new Knight(chessBoard0, color57);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = null;
    ChessPiece.Color color64 = ChessPiece.Color.WHITE;
    Rook rook65 = new Rook(chessBoard63, color64);
    ChessPiece.Color color66 = rook65.getColor();
    Bishop bishop67 = new Bishop(chessBoard60, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    java.lang.String str69 = chessBoard68.toString();
    ChessBoard chessBoard70 = null;
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard70, color71);
    rook72.setRow(100);
    java.util.ArrayList arrayList75 = rook72.legalMoves();
    int i76 = rook72.getColumn();
    ChessPiece.Color color77 = rook72.getColor();
    Bishop bishop78 = new Bishop(chessBoard68, color77);
    ChessBoard chessBoard79 = new ChessBoard();
    ChessPiece.Color color80 = null;
    Knight knight81 = new Knight(chessBoard79, color80);
    ChessPiece.Color color82 = ChessPiece.Color.WHITE;
    Bishop bishop83 = new Bishop(chessBoard79, color82);
    Bishop bishop84 = new Bishop(chessBoard68, color82);
    Bishop bishop85 = new Bishop(chessBoard60, color82);
    King king86 = new King(chessBoard0, color82);
    int i87 = king86.getRow();
    java.lang.String str88 = king86.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str53.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str69.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "\u2654"+ "'", str88.equals("\u2654"));

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test325"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    King king31 = new King(chessBoard17, color27);
    ChessPiece.Color color32 = ChessPiece.Color.BLACK;
    King king33 = new King(chessBoard17, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    King king50 = new King(chessBoard34, color46);
    chessBoard34.initialize();
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    java.lang.String str55 = chessBoard52.toString();
    java.lang.String str56 = chessBoard52.toString();
    ChessPiece.Color color57 = ChessPiece.Color.WHITE;
    Pawn pawn58 = new Pawn(chessBoard52, color57);
    Pawn pawn59 = new Pawn(chessBoard34, color57);
    Pawn pawn60 = new Pawn(chessBoard17, color57);
    Rook rook61 = new Rook(chessBoard0, color57);
    java.util.ArrayList arrayList62 = rook61.legalMoves();
    java.lang.String str63 = rook61.getPosition();
    java.util.ArrayList arrayList64 = rook61.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str55.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str56.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "a1"+ "'", str63.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList64);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test326"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard20, color31);
    ChessPiece.Color color33 = ChessPiece.Color.BLACK;
    Bishop bishop34 = new Bishop(chessBoard20, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Pawn pawn48 = new Pawn(chessBoard46, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Knight knight51 = new Knight(chessBoard49, color50);
    ChessBoard chessBoard52 = null;
    ChessPiece.Color color53 = ChessPiece.Color.WHITE;
    Rook rook54 = new Rook(chessBoard52, color53);
    Pawn pawn55 = new Pawn(chessBoard49, color53);
    Pawn pawn56 = new Pawn(chessBoard46, color53);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Bishop bishop61 = new Bishop(chessBoard57, color60);
    King king62 = new King(chessBoard46, color60);
    Bishop bishop63 = new Bishop(chessBoard35, color60);
    ChessBoard chessBoard64 = null;
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Rook rook66 = new Rook(chessBoard64, color65);
    King king67 = new King(chessBoard35, color65);
    Queen queen68 = new Queen(chessBoard20, color65);
    Pawn pawn69 = new Pawn(chessBoard0, color65);
    java.lang.String str70 = pawn69.toString();
    java.lang.String str71 = pawn69.toString();
    java.util.ArrayList arrayList72 = pawn69.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\u2659"+ "'", str70.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "\u2659"+ "'", str71.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList72);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test327"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    Bishop bishop28 = new Bishop(chessBoard0, color24);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Pawn pawn34 = new Pawn(chessBoard32, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    Pawn pawn41 = new Pawn(chessBoard35, color39);
    Pawn pawn42 = new Pawn(chessBoard32, color39);
    King king43 = new King(chessBoard29, color39);
    ChessPiece.Color color44 = ChessPiece.Color.BLACK;
    King king45 = new King(chessBoard29, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Bishop bishop50 = new Bishop(chessBoard46, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Pawn pawn53 = new Pawn(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Knight knight56 = new Knight(chessBoard54, color55);
    ChessBoard chessBoard57 = null;
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Rook rook59 = new Rook(chessBoard57, color58);
    Pawn pawn60 = new Pawn(chessBoard54, color58);
    Pawn pawn61 = new Pawn(chessBoard51, color58);
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard51, color62);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Pawn pawn66 = new Pawn(chessBoard64, color65);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Knight knight69 = new Knight(chessBoard67, color68);
    ChessBoard chessBoard70 = null;
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard70, color71);
    Pawn pawn73 = new Pawn(chessBoard67, color71);
    Pawn pawn74 = new Pawn(chessBoard64, color71);
    ChessPiece.Color color75 = ChessPiece.Color.WHITE;
    Rook rook76 = new Rook(chessBoard64, color75);
    Pawn pawn77 = new Pawn(chessBoard51, color75);
    Pawn pawn78 = new Pawn(chessBoard46, color75);
    Rook rook79 = new Rook(chessBoard29, color75);
    ChessBoard chessBoard80 = null;
    ChessPiece.Color color81 = ChessPiece.Color.WHITE;
    Rook rook82 = new Rook(chessBoard80, color81);
    ChessPiece.Color color83 = rook82.getColor();
    Queen queen84 = new Queen(chessBoard29, color83);
    Queen queen85 = new Queen(chessBoard0, color83);
    java.util.ArrayList arrayList86 = queen85.legalMoves();
    queen85.setRow(0);
    java.util.ArrayList arrayList89 = queen85.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList89);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test328"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Bishop bishop24 = new Bishop(chessBoard0, color21);
    ChessPiece.Color color25 = null;
    Knight knight26 = new Knight(chessBoard0, color25);
    java.util.ArrayList arrayList27 = knight26.legalMoves();
    java.lang.String str28 = knight26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\u265E"+ "'", str28.equals("\u265E"));

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test329"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    java.lang.String str12 = chessBoard0.toString();
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Bishop bishop29 = new Bishop(chessBoard13, color27);
    ChessPiece.Color color30 = ChessPiece.Color.BLACK;
    Queen queen31 = new Queen(chessBoard13, color30);
    java.lang.String str32 = chessBoard13.toString();
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    java.lang.String str36 = chessBoard33.toString();
    java.lang.String str37 = chessBoard33.toString();
    java.lang.String str38 = chessBoard33.toString();
    ChessBoard chessBoard39 = new ChessBoard();
    java.lang.String str40 = chessBoard39.toString();
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = null;
    King king43 = new King(chessBoard41, color42);
    ChessPiece.Color color44 = king43.getColor();
    king43.setRow(0);
    java.util.ArrayList arrayList47 = king43.legalMoves();
    boolean b49 = chessBoard39.placePiece((ChessPiece)king43, "a1");
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard39, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    java.lang.String str53 = chessBoard52.toString();
    ChessBoard chessBoard54 = null;
    ChessPiece.Color color55 = null;
    King king56 = new King(chessBoard54, color55);
    ChessPiece.Color color57 = king56.getColor();
    king56.setRow(0);
    java.util.ArrayList arrayList60 = king56.legalMoves();
    boolean b62 = chessBoard52.placePiece((ChessPiece)king56, "a1");
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Bishop bishop64 = new Bishop(chessBoard52, color63);
    Pawn pawn65 = new Pawn(chessBoard39, color63);
    Pawn pawn66 = new Pawn(chessBoard33, color63);
    Queen queen67 = new Queen(chessBoard13, color63);
    King king68 = new King(chessBoard0, color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str12.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str32.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str36.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str37.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str38.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str40.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str53.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test330"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Pawn pawn34 = new Pawn(chessBoard32, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    Pawn pawn41 = new Pawn(chessBoard35, color39);
    Pawn pawn42 = new Pawn(chessBoard32, color39);
    King king43 = new King(chessBoard29, color39);
    ChessPiece.Color color44 = ChessPiece.Color.BLACK;
    King king45 = new King(chessBoard29, color44);
    java.lang.String str46 = chessBoard29.toString();
    ChessPiece.Color color47 = ChessPiece.Color.BLACK;
    Bishop bishop48 = new Bishop(chessBoard29, color47);
    Bishop bishop49 = new Bishop(chessBoard0, color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str46.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test331"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    java.lang.String str17 = king16.toString();
    java.util.ArrayList arrayList18 = king16.legalMoves();
    java.lang.String str19 = king16.toString();
    java.lang.String str20 = king16.getPosition();
    java.util.ArrayList arrayList21 = king16.legalMoves();
    java.lang.String str22 = king16.toString();
    java.util.ArrayList arrayList23 = king16.legalMoves();
    java.util.ArrayList arrayList24 = king16.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u2654"+ "'", str17.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u2654"+ "'", str19.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1"+ "'", str20.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u2654"+ "'", str22.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test332"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    boolean b10 = chessBoard0.move("a11", "\u265C");
    java.lang.String str11 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str11.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test333"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    java.lang.String str60 = pawn59.toString();
    java.lang.String str61 = pawn59.toString();
    java.util.ArrayList arrayList62 = pawn59.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\u2659"+ "'", str60.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "\u2659"+ "'", str61.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList62);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test334"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    int i9 = king8.getRow();
    java.util.ArrayList arrayList10 = king8.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test335"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessBoard chessBoard73 = null;
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard73, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    Rook rook77 = new Rook(chessBoard0, color74);
    java.util.ArrayList arrayList78 = rook77.legalMoves();
    java.util.ArrayList arrayList79 = rook77.legalMoves();
    ChessPiece.Color color80 = rook77.getColor();
    java.util.ArrayList arrayList81 = rook77.legalMoves();
    java.lang.String str82 = rook77.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "\u2656"+ "'", str82.equals("\u2656"));

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test336"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    java.util.ArrayList arrayList33 = pawn32.legalMoves();
    java.util.ArrayList arrayList34 = pawn32.legalMoves();
    java.lang.String str35 = pawn32.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "a1"+ "'", str35.equals("a1"));

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test337"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard63, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    King king77 = new King(chessBoard0, color74);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Pawn pawn80 = new Pawn(chessBoard78, color79);
    ChessBoard chessBoard81 = new ChessBoard();
    ChessPiece.Color color82 = null;
    Knight knight83 = new Knight(chessBoard81, color82);
    ChessBoard chessBoard84 = null;
    ChessPiece.Color color85 = ChessPiece.Color.WHITE;
    Rook rook86 = new Rook(chessBoard84, color85);
    Pawn pawn87 = new Pawn(chessBoard81, color85);
    Pawn pawn88 = new Pawn(chessBoard78, color85);
    ChessPiece.Color color89 = ChessPiece.Color.WHITE;
    Rook rook90 = new Rook(chessBoard78, color89);
    ChessBoard chessBoard91 = null;
    ChessPiece.Color color92 = ChessPiece.Color.WHITE;
    Rook rook93 = new Rook(chessBoard91, color92);
    Bishop bishop94 = new Bishop(chessBoard78, color92);
    ChessPiece.Color color95 = ChessPiece.Color.BLACK;
    Queen queen96 = new Queen(chessBoard78, color95);
    Pawn pawn97 = new Pawn(chessBoard0, color95);
    java.lang.String str98 = pawn97.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "\u265F"+ "'", str98.equals("\u265F"));

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test338"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Bishop bishop21 = new Bishop(chessBoard17, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    King king33 = new King(chessBoard17, color29);
    chessBoard17.initialize();
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    java.lang.String str38 = chessBoard35.toString();
    java.lang.String str39 = chessBoard35.toString();
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Pawn pawn41 = new Pawn(chessBoard35, color40);
    Pawn pawn42 = new Pawn(chessBoard17, color40);
    Pawn pawn43 = new Pawn(chessBoard0, color40);
    java.lang.String str44 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str38.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str39.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str44.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test339"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.lang.String str8 = bishop7.getPosition();
    java.lang.String str9 = bishop7.getPosition();
    java.util.ArrayList arrayList10 = bishop7.legalMoves();
    java.lang.String str11 = bishop7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a1"+ "'", str8.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "a1"+ "'", str9.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u2657"+ "'", str11.equals("\u2657"));

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test340"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessPiece.Color color6 = ChessPiece.Color.WHITE;
    Bishop bishop7 = new Bishop(chessBoard3, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Pawn pawn10 = new Pawn(chessBoard8, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessBoard chessBoard14 = null;
    ChessPiece.Color color15 = ChessPiece.Color.WHITE;
    Rook rook16 = new Rook(chessBoard14, color15);
    Pawn pawn17 = new Pawn(chessBoard11, color15);
    Pawn pawn18 = new Pawn(chessBoard8, color15);
    King king19 = new King(chessBoard3, color15);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    Bishop bishop31 = new Bishop(chessBoard3, color27);
    chessBoard3.initialize();
    java.lang.String str33 = chessBoard3.toString();
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard39, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    Pawn pawn65 = new Pawn(chessBoard39, color63);
    Pawn pawn66 = new Pawn(chessBoard34, color63);
    java.util.ArrayList arrayList67 = pawn66.legalMoves();
    int i68 = pawn66.getRow();
    ChessPiece.Color color69 = pawn66.getColor();
    Rook rook70 = new Rook(chessBoard3, color69);
    Queen queen71 = new Queen(chessBoard0, color69);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece73 = chessBoard0.getPiece("\u2659");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str33.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test341"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.lang.String str8 = bishop7.getPosition();
    ChessPiece.Color color9 = bishop7.getColor();
    java.lang.String str10 = bishop7.toString();
    int i11 = bishop7.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a1"+ "'", str8.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u2657"+ "'", str10.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test342"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = ChessPiece.Color.WHITE;
    Rook rook2 = new Rook(chessBoard0, color1);
    java.lang.String str3 = rook2.toString();
    rook2.setRow(56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u2656"+ "'", str3.equals("\u2656"));

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test343"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    java.lang.String str5 = chessBoard0.toString();
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard13, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Bishop bishop29 = new Bishop(chessBoard13, color27);
    ChessPiece.Color color30 = ChessPiece.Color.BLACK;
    Queen queen31 = new Queen(chessBoard13, color30);
    Queen queen32 = new Queen(chessBoard6, color30);
    Bishop bishop33 = new Bishop(chessBoard0, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Pawn pawn36 = new Pawn(chessBoard34, color35);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessBoard chessBoard40 = null;
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard40, color41);
    Pawn pawn43 = new Pawn(chessBoard37, color41);
    Pawn pawn44 = new Pawn(chessBoard34, color41);
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard34, color45);
    rook46.setRow((-1));
    java.lang.String str49 = rook46.toString();
    rook46.setRow(0);
    rook46.setRow((-1));
    ChessPiece.Color color54 = rook46.getColor();
    Knight knight55 = new Knight(chessBoard0, color54);
    java.lang.String str56 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str5.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "\u2656"+ "'", str49.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str56.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test344"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    ChessPiece.Color color16 = null;
    Queen queen17 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Bishop bishop45 = new Bishop(chessBoard41, color44);
    King king46 = new King(chessBoard30, color44);
    Bishop bishop47 = new Bishop(chessBoard19, color44);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Pawn pawn50 = new Pawn(chessBoard48, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = null;
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Rook rook56 = new Rook(chessBoard54, color55);
    Pawn pawn57 = new Pawn(chessBoard51, color55);
    Pawn pawn58 = new Pawn(chessBoard48, color55);
    ChessBoard chessBoard59 = new ChessBoard();
    ChessPiece.Color color60 = null;
    Knight knight61 = new Knight(chessBoard59, color60);
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Bishop bishop63 = new Bishop(chessBoard59, color62);
    King king64 = new King(chessBoard48, color62);
    Knight knight65 = new Knight(chessBoard19, color62);
    King king66 = new King(chessBoard18, color62);
    ChessPiece.Color color67 = null;
    Pawn pawn68 = new Pawn(chessBoard18, color67);
    ChessBoard chessBoard69 = new ChessBoard();
    ChessPiece.Color color70 = null;
    Knight knight71 = new Knight(chessBoard69, color70);
    ChessBoard chessBoard72 = null;
    ChessPiece.Color color73 = ChessPiece.Color.WHITE;
    Rook rook74 = new Rook(chessBoard72, color73);
    ChessPiece.Color color75 = rook74.getColor();
    Bishop bishop76 = new Bishop(chessBoard69, color75);
    Pawn pawn77 = new Pawn(chessBoard18, color75);
    Rook rook78 = new Rook(chessBoard0, color75);
    java.lang.String str79 = rook78.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\u2656"+ "'", str79.equals("\u2656"));

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test345"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    java.lang.String str19 = queen18.toString();
    java.lang.String str20 = queen18.toString();
    java.lang.String str21 = queen18.toString();
    java.lang.String str22 = queen18.toString();
    java.util.ArrayList arrayList23 = queen18.legalMoves();
    java.lang.String str24 = queen18.toString();
    queen18.setColumn(100);
    java.util.ArrayList arrayList27 = queen18.legalMoves();
    int i28 = queen18.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u265B"+ "'", str19.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u265B"+ "'", str20.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u265B"+ "'", str21.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u265B"+ "'", str22.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\u265B"+ "'", str24.equals("\u265B"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 100);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test346"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    king2.setRow(56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test347"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = ChessPiece.Color.BLACK;
    Bishop bishop14 = new Bishop(chessBoard0, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Queen queen18 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard0, color23);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Pawn pawn40 = new Pawn(chessBoard38, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessBoard chessBoard44 = null;
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard44, color45);
    Pawn pawn47 = new Pawn(chessBoard41, color45);
    Pawn pawn48 = new Pawn(chessBoard38, color45);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Knight knight51 = new Knight(chessBoard49, color50);
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Bishop bishop53 = new Bishop(chessBoard49, color52);
    King king54 = new King(chessBoard38, color52);
    Bishop bishop55 = new Bishop(chessBoard27, color52);
    java.lang.String str56 = bishop55.toString();
    ChessPiece.Color color57 = bishop55.getColor();
    Rook rook58 = new Rook(chessBoard0, color57);
    java.lang.String str59 = chessBoard0.toString();
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = null;
    ChessPiece.Color color64 = ChessPiece.Color.WHITE;
    Rook rook65 = new Rook(chessBoard63, color64);
    Pawn pawn66 = new Pawn(chessBoard60, color64);
    pawn66.setRow(0);
    ChessPiece.Color color69 = pawn66.getColor();
    Rook rook70 = new Rook(chessBoard0, color69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\u2657"+ "'", str56.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str59.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test348"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    Knight knight12 = new Knight(chessBoard0, color8);
    chessBoard0.initialize();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Bishop bishop31 = new Bishop(chessBoard27, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Pawn pawn34 = new Pawn(chessBoard32, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    Pawn pawn41 = new Pawn(chessBoard35, color39);
    Pawn pawn42 = new Pawn(chessBoard32, color39);
    King king43 = new King(chessBoard27, color39);
    Bishop bishop44 = new Bishop(chessBoard14, color39);
    java.lang.String str45 = bishop44.toString();
    ChessPiece.Color color46 = bishop44.getColor();
    King king47 = new King(chessBoard0, color46);
    king47.setRow(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\u2657"+ "'", str45.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test349"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    java.lang.String str13 = chessBoard0.toString();
    ChessPiece chessPiece15 = chessBoard0.getPiece("a1");
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard19, color30);
    Bishop bishop32 = new Bishop(chessBoard16, color30);
    Rook rook33 = new Rook(chessBoard0, color30);
    chessBoard0.initialize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str13.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test350"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Rook rook46 = new Rook(chessBoard0, color43);
    // The following exception was thrown during execution in test generation
    try {
      boolean b49 = chessBoard0.move("\u265C", " 57");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test351"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    java.lang.String str20 = chessBoard17.toString();
    java.lang.String str21 = chessBoard17.toString();
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Pawn pawn23 = new Pawn(chessBoard17, color22);
    Queen queen24 = new Queen(chessBoard0, color22);
    // The following exception was thrown during execution in test generation
    try {
      boolean b27 = chessBoard0.move("\u2655", "hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str20.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str21.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test352"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    java.util.ArrayList arrayList5 = knight2.legalMoves();
    int i6 = knight2.getColumn();
    java.lang.String str7 = knight2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u265E"+ "'", str7.equals("\u265E"));

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test353"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    int i3 = knight2.getRow();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    java.util.ArrayList arrayList5 = knight2.legalMoves();
    java.lang.String str6 = knight2.toString();
    java.util.ArrayList arrayList7 = knight2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265E"+ "'", str6.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test354"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Bishop bishop24 = new Bishop(chessBoard0, color21);
    ChessPiece.Color color25 = null;
    Knight knight26 = new Knight(chessBoard0, color25);
    java.lang.String str27 = knight26.toString();
    java.util.ArrayList arrayList28 = knight26.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\u265E"+ "'", str27.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList28);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test355"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessBoard chessBoard2 = new ChessBoard();
    ChessPiece.Color color3 = null;
    Pawn pawn4 = new Pawn(chessBoard2, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Knight knight7 = new Knight(chessBoard5, color6);
    ChessBoard chessBoard8 = null;
    ChessPiece.Color color9 = ChessPiece.Color.WHITE;
    Rook rook10 = new Rook(chessBoard8, color9);
    Pawn pawn11 = new Pawn(chessBoard5, color9);
    Pawn pawn12 = new Pawn(chessBoard2, color9);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Knight knight26 = new Knight(chessBoard24, color25);
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Bishop bishop28 = new Bishop(chessBoard24, color27);
    King king29 = new King(chessBoard13, color27);
    Bishop bishop30 = new Bishop(chessBoard2, color27);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessBoard chessBoard37 = null;
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard37, color38);
    Pawn pawn40 = new Pawn(chessBoard34, color38);
    Pawn pawn41 = new Pawn(chessBoard31, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Bishop bishop46 = new Bishop(chessBoard42, color45);
    King king47 = new King(chessBoard31, color45);
    Knight knight48 = new Knight(chessBoard2, color45);
    King king49 = new King(chessBoard1, color45);
    Rook rook50 = new Rook(chessBoard0, color45);
    java.util.ArrayList arrayList51 = rook50.legalMoves();
    ChessPiece.Color color52 = rook50.getColor();
    java.lang.String str53 = rook50.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\u2656"+ "'", str53.equals("\u2656"));

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test356"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    king2.setRow(0);
    int i6 = king2.getRow();
    java.util.ArrayList arrayList7 = king2.legalMoves();
    int i8 = king2.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test357"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    boolean b17 = chessBoard0.move("b1", "\u2654");
    boolean b20 = chessBoard0.move("a2", "\u2654");
    ChessPiece chessPiece22 = chessBoard0.getPiece("a101");
    java.lang.String str23 = chessBoard0.toString();
    ChessPiece.Color color24 = null;
    Queen queen25 = new Queen(chessBoard0, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    ChessPiece.Color color29 = rook28.getColor();
    Pawn pawn30 = new Pawn(chessBoard0, color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str23.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test358"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    int i7 = pawn6.getColumn();
    java.util.ArrayList arrayList8 = pawn6.legalMoves();
    pawn6.setRow(56);
    java.lang.String str11 = pawn6.toString();
    int i12 = pawn6.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u2659"+ "'", str11.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 56);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test359"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    java.lang.String str9 = chessBoard8.toString();
    ChessBoard chessBoard10 = null;
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard10, color11);
    rook12.setRow(100);
    java.util.ArrayList arrayList15 = rook12.legalMoves();
    int i16 = rook12.getColumn();
    ChessPiece.Color color17 = rook12.getColor();
    Bishop bishop18 = new Bishop(chessBoard8, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Bishop bishop23 = new Bishop(chessBoard19, color22);
    Bishop bishop24 = new Bishop(chessBoard8, color22);
    Bishop bishop25 = new Bishop(chessBoard0, color22);
    java.lang.String str26 = bishop25.getPosition();
    // The following exception was thrown during execution in test generation
    try {
      bishop25.setPosition("");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str9.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "a1"+ "'", str26.equals("a1"));

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test360"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard12, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Pawn pawn18 = new Pawn(chessBoard12, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard19, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Bishop bishop35 = new Bishop(chessBoard19, color33);
    ChessPiece.Color color36 = ChessPiece.Color.BLACK;
    Queen queen37 = new Queen(chessBoard19, color36);
    Queen queen38 = new Queen(chessBoard12, color36);
    Bishop bishop39 = new Bishop(chessBoard0, color36);
    int i40 = bishop39.getRow();
    java.lang.String str41 = bishop39.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "a1"+ "'", str41.equals("a1"));

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test361"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    java.lang.String str4 = king2.getPosition();
    java.lang.String str5 = king2.getPosition();
    java.util.ArrayList arrayList6 = king2.legalMoves();
    java.util.ArrayList arrayList7 = king2.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a1"+ "'", str4.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1"+ "'", str5.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test362"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    Knight knight12 = new Knight(chessBoard0, color8);
    chessBoard0.initialize();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    java.lang.String str27 = chessBoard14.toString();
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard28, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard41, color52);
    Pawn pawn54 = new Pawn(chessBoard28, color52);
    Bishop bishop55 = new Bishop(chessBoard14, color52);
    Knight knight56 = new Knight(chessBoard0, color52);
    java.lang.String str57 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str27.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str57.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test363"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Pawn pawn54 = new Pawn(chessBoard52, color53);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessBoard chessBoard58 = null;
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard58, color59);
    Pawn pawn61 = new Pawn(chessBoard55, color59);
    Pawn pawn62 = new Pawn(chessBoard52, color59);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Rook rook64 = new Rook(chessBoard52, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard65, color76);
    Pawn pawn78 = new Pawn(chessBoard52, color76);
    Pawn pawn79 = new Pawn(chessBoard47, color76);
    java.util.ArrayList arrayList80 = pawn79.legalMoves();
    int i81 = pawn79.getRow();
    ChessPiece.Color color82 = pawn79.getColor();
    King king83 = new King(chessBoard0, color82);
    ChessPiece.Color color84 = null;
    Queen queen85 = new Queen(chessBoard0, color84);
    java.util.ArrayList arrayList86 = queen85.legalMoves();
    // The following exception was thrown during execution in test generation
    try {
      queen85.setPosition("");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList86);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test364"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = ChessPiece.Color.BLACK;
    Bishop bishop14 = new Bishop(chessBoard0, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Pawn pawn17 = new Pawn(chessBoard15, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessBoard chessBoard21 = null;
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Rook rook23 = new Rook(chessBoard21, color22);
    Pawn pawn24 = new Pawn(chessBoard18, color22);
    Pawn pawn25 = new Pawn(chessBoard15, color22);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Pawn pawn28 = new Pawn(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Pawn pawn35 = new Pawn(chessBoard29, color33);
    Pawn pawn36 = new Pawn(chessBoard26, color33);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Bishop bishop41 = new Bishop(chessBoard37, color40);
    King king42 = new King(chessBoard26, color40);
    Bishop bishop43 = new Bishop(chessBoard15, color40);
    ChessBoard chessBoard44 = null;
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard44, color45);
    King king47 = new King(chessBoard15, color45);
    Queen queen48 = new Queen(chessBoard0, color45);
    chessBoard0.initialize();
    ChessBoard chessBoard50 = new ChessBoard();
    ChessPiece.Color color51 = null;
    Knight knight52 = new Knight(chessBoard50, color51);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Pawn pawn55 = new Pawn(chessBoard53, color54);
    ChessBoard chessBoard56 = new ChessBoard();
    ChessPiece.Color color57 = null;
    Knight knight58 = new Knight(chessBoard56, color57);
    ChessBoard chessBoard59 = null;
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Rook rook61 = new Rook(chessBoard59, color60);
    Pawn pawn62 = new Pawn(chessBoard56, color60);
    Pawn pawn63 = new Pawn(chessBoard53, color60);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Pawn pawn66 = new Pawn(chessBoard64, color65);
    ChessBoard chessBoard67 = new ChessBoard();
    ChessPiece.Color color68 = null;
    Knight knight69 = new Knight(chessBoard67, color68);
    ChessBoard chessBoard70 = null;
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard70, color71);
    Pawn pawn73 = new Pawn(chessBoard67, color71);
    Pawn pawn74 = new Pawn(chessBoard64, color71);
    ChessBoard chessBoard75 = new ChessBoard();
    ChessPiece.Color color76 = null;
    Knight knight77 = new Knight(chessBoard75, color76);
    ChessPiece.Color color78 = ChessPiece.Color.WHITE;
    Bishop bishop79 = new Bishop(chessBoard75, color78);
    King king80 = new King(chessBoard64, color78);
    Bishop bishop81 = new Bishop(chessBoard53, color78);
    Rook rook82 = new Rook(chessBoard50, color78);
    ChessPiece.Color color83 = rook82.getColor();
    Rook rook84 = new Rook(chessBoard0, color83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color83);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test365"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    pawn6.setColumn(0);
    java.util.ArrayList arrayList9 = pawn6.legalMoves();
    java.util.ArrayList arrayList10 = pawn6.legalMoves();
    java.util.ArrayList arrayList11 = pawn6.legalMoves();
    pawn6.setRow(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test366"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Bishop bishop27 = new Bishop(chessBoard23, color26);
    King king28 = new King(chessBoard12, color26);
    Bishop bishop29 = new Bishop(chessBoard1, color26);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Bishop bishop45 = new Bishop(chessBoard41, color44);
    King king46 = new King(chessBoard30, color44);
    Knight knight47 = new Knight(chessBoard1, color44);
    King king48 = new King(chessBoard0, color44);
    ChessPiece.Color color49 = null;
    Pawn pawn50 = new Pawn(chessBoard0, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = null;
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Rook rook56 = new Rook(chessBoard54, color55);
    ChessPiece.Color color57 = rook56.getColor();
    Bishop bishop58 = new Bishop(chessBoard51, color57);
    Pawn pawn59 = new Pawn(chessBoard0, color57);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece61 = chessBoard0.getPiece("\u265B");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test367"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    java.lang.String str9 = king8.toString();
    java.lang.String str10 = king8.toString();
    java.lang.String str11 = king8.toString();
    king8.setPosition("a11");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2654"+ "'", str9.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\u2654"+ "'", str10.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u2654"+ "'", str11.equals("\u2654"));

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test368"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessBoard chessBoard73 = null;
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard73, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    Rook rook77 = new Rook(chessBoard0, color74);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Pawn pawn80 = new Pawn(chessBoard78, color79);
    ChessBoard chessBoard81 = new ChessBoard();
    ChessPiece.Color color82 = null;
    Knight knight83 = new Knight(chessBoard81, color82);
    ChessBoard chessBoard84 = null;
    ChessPiece.Color color85 = ChessPiece.Color.WHITE;
    Rook rook86 = new Rook(chessBoard84, color85);
    Pawn pawn87 = new Pawn(chessBoard81, color85);
    Pawn pawn88 = new Pawn(chessBoard78, color85);
    ChessPiece.Color color89 = ChessPiece.Color.WHITE;
    Rook rook90 = new Rook(chessBoard78, color89);
    ChessPiece.Color color91 = ChessPiece.Color.BLACK;
    Bishop bishop92 = new Bishop(chessBoard78, color91);
    Knight knight93 = new Knight(chessBoard0, color91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color91);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test369"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = null;
    King king4 = new King(chessBoard2, color3);
    ChessPiece.Color color5 = king4.getColor();
    king4.setRow(0);
    java.util.ArrayList arrayList8 = king4.legalMoves();
    boolean b10 = chessBoard0.placePiece((ChessPiece)king4, "a1");
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Bishop bishop12 = new Bishop(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Pawn pawn26 = new Pawn(chessBoard24, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Pawn pawn33 = new Pawn(chessBoard27, color31);
    Pawn pawn34 = new Pawn(chessBoard24, color31);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Bishop bishop39 = new Bishop(chessBoard35, color38);
    King king40 = new King(chessBoard24, color38);
    Bishop bishop41 = new Bishop(chessBoard13, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Knight knight55 = new Knight(chessBoard53, color54);
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Bishop bishop57 = new Bishop(chessBoard53, color56);
    King king58 = new King(chessBoard42, color56);
    Knight knight59 = new Knight(chessBoard13, color56);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    java.lang.String str63 = chessBoard60.toString();
    java.lang.String str64 = chessBoard60.toString();
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Pawn pawn66 = new Pawn(chessBoard60, color65);
    King king67 = new King(chessBoard13, color65);
    Bishop bishop68 = new Bishop(chessBoard0, color65);
    ChessPiece.Color color69 = ChessPiece.Color.WHITE;
    Bishop bishop70 = new Bishop(chessBoard0, color69);
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece72 = chessBoard0.getPiece("\u265C");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str63.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str64.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color69);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test370"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessBoard chessBoard13 = null;
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Rook rook15 = new Rook(chessBoard13, color14);
    Bishop bishop16 = new Bishop(chessBoard0, color14);
    ChessPiece.Color color17 = ChessPiece.Color.BLACK;
    Queen queen18 = new Queen(chessBoard0, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessBoard chessBoard37 = null;
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard37, color38);
    Pawn pawn40 = new Pawn(chessBoard34, color38);
    Pawn pawn41 = new Pawn(chessBoard31, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Bishop bishop46 = new Bishop(chessBoard42, color45);
    King king47 = new King(chessBoard31, color45);
    Bishop bishop48 = new Bishop(chessBoard20, color45);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Pawn pawn51 = new Pawn(chessBoard49, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessBoard chessBoard55 = null;
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Rook rook57 = new Rook(chessBoard55, color56);
    Pawn pawn58 = new Pawn(chessBoard52, color56);
    Pawn pawn59 = new Pawn(chessBoard49, color56);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessPiece.Color color63 = ChessPiece.Color.WHITE;
    Bishop bishop64 = new Bishop(chessBoard60, color63);
    King king65 = new King(chessBoard49, color63);
    Knight knight66 = new Knight(chessBoard20, color63);
    King king67 = new King(chessBoard19, color63);
    Rook rook68 = new Rook(chessBoard0, color63);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    rook71.setRow(100);
    java.util.ArrayList arrayList74 = rook71.legalMoves();
    int i75 = rook71.getColumn();
    ChessPiece.Color color76 = rook71.getColor();
    Rook rook77 = new Rook(chessBoard0, color76);
    java.lang.String str78 = rook77.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "\u2656"+ "'", str78.equals("\u2656"));

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test371"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    king8.setColumn(56);
    java.util.ArrayList arrayList11 = king8.legalMoves();
    java.lang.String str12 = king8.toString();
    java.util.ArrayList arrayList13 = king8.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u2654"+ "'", str12.equals("\u2654"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test372"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessBoard chessBoard73 = null;
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard73, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    Rook rook77 = new Rook(chessBoard0, color74);
    java.util.ArrayList arrayList78 = rook77.legalMoves();
    java.lang.String str79 = rook77.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\u2656"+ "'", str79.equals("\u2656"));

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test373"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    King king16 = new King(chessBoard0, color14);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    Pawn pawn43 = new Pawn(chessBoard17, color41);
    Knight knight44 = new Knight(chessBoard0, color41);
    knight44.setRow(10);
    java.lang.String str47 = knight44.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\u2658"+ "'", str47.equals("\u2658"));

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test374"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = ChessPiece.Color.BLACK;
    Bishop bishop14 = new Bishop(chessBoard0, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Pawn pawn17 = new Pawn(chessBoard15, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Knight knight20 = new Knight(chessBoard18, color19);
    ChessBoard chessBoard21 = null;
    ChessPiece.Color color22 = ChessPiece.Color.WHITE;
    Rook rook23 = new Rook(chessBoard21, color22);
    Pawn pawn24 = new Pawn(chessBoard18, color22);
    Pawn pawn25 = new Pawn(chessBoard15, color22);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Pawn pawn28 = new Pawn(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Knight knight31 = new Knight(chessBoard29, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Pawn pawn35 = new Pawn(chessBoard29, color33);
    Pawn pawn36 = new Pawn(chessBoard26, color33);
    ChessBoard chessBoard37 = new ChessBoard();
    ChessPiece.Color color38 = null;
    Knight knight39 = new Knight(chessBoard37, color38);
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Bishop bishop41 = new Bishop(chessBoard37, color40);
    King king42 = new King(chessBoard26, color40);
    Bishop bishop43 = new Bishop(chessBoard15, color40);
    ChessBoard chessBoard44 = null;
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard44, color45);
    King king47 = new King(chessBoard15, color45);
    Queen queen48 = new Queen(chessBoard0, color45);
    chessBoard0.initialize();
    java.lang.String str50 = chessBoard0.toString();
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Pawn pawn53 = new Pawn(chessBoard51, color52);
    ChessBoard chessBoard54 = new ChessBoard();
    ChessPiece.Color color55 = null;
    Pawn pawn56 = new Pawn(chessBoard54, color55);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Knight knight59 = new Knight(chessBoard57, color58);
    ChessBoard chessBoard60 = null;
    ChessPiece.Color color61 = ChessPiece.Color.WHITE;
    Rook rook62 = new Rook(chessBoard60, color61);
    Pawn pawn63 = new Pawn(chessBoard57, color61);
    Pawn pawn64 = new Pawn(chessBoard54, color61);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Knight knight78 = new Knight(chessBoard76, color77);
    ChessPiece.Color color79 = ChessPiece.Color.WHITE;
    Bishop bishop80 = new Bishop(chessBoard76, color79);
    King king81 = new King(chessBoard65, color79);
    Bishop bishop82 = new Bishop(chessBoard54, color79);
    java.lang.String str83 = bishop82.toString();
    ChessPiece.Color color84 = bishop82.getColor();
    Pawn pawn85 = new Pawn(chessBoard51, color84);
    Bishop bishop86 = new Bishop(chessBoard0, color84);
    java.lang.String str87 = bishop86.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str50.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "\u2657"+ "'", str83.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "a1"+ "'", str87.equals("a1"));

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test375"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Knight knight65 = new Knight(chessBoard63, color64);
    ChessBoard chessBoard66 = null;
    ChessPiece.Color color67 = ChessPiece.Color.WHITE;
    Rook rook68 = new Rook(chessBoard66, color67);
    Pawn pawn69 = new Pawn(chessBoard63, color67);
    Pawn pawn70 = new Pawn(chessBoard60, color67);
    ChessPiece.Color color71 = ChessPiece.Color.WHITE;
    Rook rook72 = new Rook(chessBoard60, color71);
    ChessBoard chessBoard73 = null;
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard73, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    Rook rook77 = new Rook(chessBoard0, color74);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Knight knight80 = new Knight(chessBoard78, color79);
    ChessBoard chessBoard81 = new ChessBoard();
    ChessPiece.Color color82 = null;
    Pawn pawn83 = new Pawn(chessBoard81, color82);
    ChessBoard chessBoard84 = new ChessBoard();
    ChessPiece.Color color85 = null;
    Knight knight86 = new Knight(chessBoard84, color85);
    ChessBoard chessBoard87 = null;
    ChessPiece.Color color88 = ChessPiece.Color.WHITE;
    Rook rook89 = new Rook(chessBoard87, color88);
    Pawn pawn90 = new Pawn(chessBoard84, color88);
    Pawn pawn91 = new Pawn(chessBoard81, color88);
    ChessPiece.Color color92 = ChessPiece.Color.WHITE;
    Rook rook93 = new Rook(chessBoard81, color92);
    Bishop bishop94 = new Bishop(chessBoard78, color92);
    Rook rook95 = new Rook(chessBoard0, color92);
    java.util.ArrayList arrayList96 = rook95.legalMoves();
    java.lang.String str97 = rook95.toString();
    java.lang.String str98 = rook95.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "\u2656"+ "'", str97.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "\u2656"+ "'", str98.equals("\u2656"));

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test376"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Bishop bishop21 = new Bishop(chessBoard17, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard22, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard35, color46);
    Pawn pawn48 = new Pawn(chessBoard22, color46);
    Pawn pawn49 = new Pawn(chessBoard17, color46);
    Rook rook50 = new Rook(chessBoard0, color46);
    java.lang.String str51 = rook50.toString();
    java.util.ArrayList arrayList52 = rook50.legalMoves();
    java.util.ArrayList arrayList53 = rook50.legalMoves();
    int i54 = rook50.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\u2656"+ "'", str51.equals("\u2656"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test377"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    king2.setColumn(1);
    java.util.ArrayList arrayList6 = king2.legalMoves();
    ChessPiece.Color color7 = king2.getColor();
    java.util.ArrayList arrayList8 = king2.legalMoves();
    java.lang.String str9 = king2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u265A"+ "'", str9.equals("\u265A"));

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test378"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    King king30 = new King(chessBoard0, color28);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    java.lang.String str34 = chessBoard31.toString();
    java.lang.String str35 = chessBoard31.toString();
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Pawn pawn37 = new Pawn(chessBoard31, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    ChessPiece.Color color41 = rook40.getColor();
    Bishop bishop42 = new Bishop(chessBoard31, color41);
    Bishop bishop43 = new Bishop(chessBoard0, color41);
    java.util.ArrayList arrayList44 = bishop43.legalMoves();
    java.lang.String str45 = bishop43.toString();
    bishop43.setColumn(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str34.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str35.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\u2657"+ "'", str45.equals("\u2657"));

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test379"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    java.lang.String str33 = pawn32.toString();
    java.util.ArrayList arrayList34 = pawn32.legalMoves();
    java.util.ArrayList arrayList35 = pawn32.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\u2659"+ "'", str33.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList35);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test380"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    ChessPiece.Color color6 = rook5.getColor();
    Bishop bishop7 = new Bishop(chessBoard0, color6);
    java.util.ArrayList arrayList8 = bishop7.legalMoves();
    java.lang.String str9 = bishop7.toString();
    java.lang.String str10 = bishop7.getPosition();
    java.lang.String str11 = bishop7.toString();
    java.lang.String str12 = bishop7.toString();
    int i13 = bishop7.getRow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u2657"+ "'", str9.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "a1"+ "'", str10.equals("a1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u2657"+ "'", str11.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u2657"+ "'", str12.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test381"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Pawn pawn18 = new Pawn(chessBoard0, color17);
    java.lang.String str19 = chessBoard0.toString();
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Pawn pawn22 = new Pawn(chessBoard20, color21);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Knight knight25 = new Knight(chessBoard23, color24);
    ChessBoard chessBoard26 = null;
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard26, color27);
    Pawn pawn29 = new Pawn(chessBoard23, color27);
    Pawn pawn30 = new Pawn(chessBoard20, color27);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard20, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Rook rook45 = new Rook(chessBoard33, color44);
    Pawn pawn46 = new Pawn(chessBoard20, color44);
    Queen queen47 = new Queen(chessBoard0, color44);
    java.util.ArrayList arrayList48 = queen47.legalMoves();
    java.util.ArrayList arrayList49 = queen47.legalMoves();
    queen47.setPosition("a11");
    java.lang.String str52 = queen47.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str19.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\u2655"+ "'", str52.equals("\u2655"));

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test382"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = ChessPiece.Color.WHITE;
    Rook rook2 = new Rook(chessBoard0, color1);
    ChessPiece.Color color3 = rook2.getColor();
    int i4 = rook2.getRow();
    java.lang.String str5 = rook2.toString();
    // The following exception was thrown during execution in test generation
    try {
      java.util.ArrayList arrayList6 = rook2.legalMoves();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u2656"+ "'", str5.equals("\u2656"));

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test383"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    King king8 = new King(chessBoard0, color7);
    java.lang.String str9 = chessBoard0.toString();
    ChessPiece chessPiece11 = chessBoard0.getPiece(" 57");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str9.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece11);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test384"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    Bishop bishop28 = new Bishop(chessBoard0, color24);
    chessBoard0.initialize();
    java.lang.String str30 = chessBoard0.toString();
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Bishop bishop42 = new Bishop(chessBoard38, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Pawn pawn45 = new Pawn(chessBoard43, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessBoard chessBoard49 = null;
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard49, color50);
    Pawn pawn52 = new Pawn(chessBoard46, color50);
    Pawn pawn53 = new Pawn(chessBoard43, color50);
    King king54 = new King(chessBoard38, color50);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Pawn pawn57 = new Pawn(chessBoard55, color56);
    ChessBoard chessBoard58 = new ChessBoard();
    ChessPiece.Color color59 = null;
    Knight knight60 = new Knight(chessBoard58, color59);
    ChessBoard chessBoard61 = null;
    ChessPiece.Color color62 = ChessPiece.Color.WHITE;
    Rook rook63 = new Rook(chessBoard61, color62);
    Pawn pawn64 = new Pawn(chessBoard58, color62);
    Pawn pawn65 = new Pawn(chessBoard55, color62);
    Bishop bishop66 = new Bishop(chessBoard38, color62);
    King king67 = new King(chessBoard31, color62);
    Bishop bishop68 = new Bishop(chessBoard0, color62);
    ChessBoard chessBoard69 = new ChessBoard();
    ChessPiece.Color color70 = null;
    Pawn pawn71 = new Pawn(chessBoard69, color70);
    ChessBoard chessBoard72 = new ChessBoard();
    ChessPiece.Color color73 = null;
    Knight knight74 = new Knight(chessBoard72, color73);
    ChessBoard chessBoard75 = null;
    ChessPiece.Color color76 = ChessPiece.Color.WHITE;
    Rook rook77 = new Rook(chessBoard75, color76);
    Pawn pawn78 = new Pawn(chessBoard72, color76);
    Pawn pawn79 = new Pawn(chessBoard69, color76);
    ChessPiece.Color color80 = ChessPiece.Color.WHITE;
    Rook rook81 = new Rook(chessBoard69, color80);
    ChessBoard chessBoard82 = null;
    ChessPiece.Color color83 = ChessPiece.Color.WHITE;
    Rook rook84 = new Rook(chessBoard82, color83);
    Bishop bishop85 = new Bishop(chessBoard69, color83);
    Rook rook86 = new Rook(chessBoard0, color83);
    java.util.ArrayList arrayList87 = rook86.legalMoves();
    rook86.setColumn(1);
    java.lang.String str90 = rook86.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str30.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "b1"+ "'", str90.equals("b1"));

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test385"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Bishop bishop32 = new Bishop(chessBoard28, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    King king44 = new King(chessBoard28, color40);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Pawn pawn47 = new Pawn(chessBoard45, color46);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Knight knight50 = new Knight(chessBoard48, color49);
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard51, color52);
    Pawn pawn54 = new Pawn(chessBoard48, color52);
    Pawn pawn55 = new Pawn(chessBoard45, color52);
    Bishop bishop56 = new Bishop(chessBoard28, color52);
    Rook rook57 = new Rook(chessBoard17, color52);
    Rook rook58 = new Rook(chessBoard0, color52);
    java.util.ArrayList arrayList59 = rook58.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList59);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test386"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard5, color16);
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    ChessBoard chessBoard21 = new ChessBoard();
    ChessPiece.Color color22 = null;
    Knight knight23 = new Knight(chessBoard21, color22);
    ChessBoard chessBoard24 = null;
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard24, color25);
    Pawn pawn27 = new Pawn(chessBoard21, color25);
    Pawn pawn28 = new Pawn(chessBoard18, color25);
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard18, color29);
    Pawn pawn31 = new Pawn(chessBoard5, color29);
    Pawn pawn32 = new Pawn(chessBoard0, color29);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Pawn pawn35 = new Pawn(chessBoard33, color34);
    ChessBoard chessBoard36 = new ChessBoard();
    ChessPiece.Color color37 = null;
    Knight knight38 = new Knight(chessBoard36, color37);
    ChessBoard chessBoard39 = null;
    ChessPiece.Color color40 = ChessPiece.Color.WHITE;
    Rook rook41 = new Rook(chessBoard39, color40);
    Pawn pawn42 = new Pawn(chessBoard36, color40);
    Pawn pawn43 = new Pawn(chessBoard33, color40);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Pawn pawn46 = new Pawn(chessBoard44, color45);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessBoard chessBoard50 = null;
    ChessPiece.Color color51 = ChessPiece.Color.WHITE;
    Rook rook52 = new Rook(chessBoard50, color51);
    Pawn pawn53 = new Pawn(chessBoard47, color51);
    Pawn pawn54 = new Pawn(chessBoard44, color51);
    ChessBoard chessBoard55 = new ChessBoard();
    ChessPiece.Color color56 = null;
    Knight knight57 = new Knight(chessBoard55, color56);
    ChessPiece.Color color58 = ChessPiece.Color.WHITE;
    Bishop bishop59 = new Bishop(chessBoard55, color58);
    King king60 = new King(chessBoard44, color58);
    Bishop bishop61 = new Bishop(chessBoard33, color58);
    java.lang.String str62 = bishop61.toString();
    ChessPiece.Color color63 = bishop61.getColor();
    Pawn pawn64 = new Pawn(chessBoard0, color63);
    ChessBoard chessBoard65 = new ChessBoard();
    ChessPiece.Color color66 = null;
    Pawn pawn67 = new Pawn(chessBoard65, color66);
    ChessBoard chessBoard68 = new ChessBoard();
    ChessPiece.Color color69 = null;
    Knight knight70 = new Knight(chessBoard68, color69);
    ChessBoard chessBoard71 = null;
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard71, color72);
    Pawn pawn74 = new Pawn(chessBoard68, color72);
    Pawn pawn75 = new Pawn(chessBoard65, color72);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Knight knight78 = new Knight(chessBoard76, color77);
    ChessPiece.Color color79 = ChessPiece.Color.WHITE;
    Bishop bishop80 = new Bishop(chessBoard76, color79);
    King king81 = new King(chessBoard65, color79);
    ChessBoard chessBoard82 = new ChessBoard();
    ChessPiece.Color color83 = null;
    Knight knight84 = new Knight(chessBoard82, color83);
    ChessBoard chessBoard85 = null;
    ChessPiece.Color color86 = ChessPiece.Color.WHITE;
    Rook rook87 = new Rook(chessBoard85, color86);
    Pawn pawn88 = new Pawn(chessBoard82, color86);
    Bishop bishop89 = new Bishop(chessBoard65, color86);
    Queen queen90 = new Queen(chessBoard0, color86);
    java.lang.String str91 = queen90.toString();
    java.util.ArrayList arrayList92 = queen90.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "\u2657"+ "'", str62.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "\u2655"+ "'", str91.equals("\u2655"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList92);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test387"); }


    ChessBoard chessBoard0 = null;
    ChessPiece.Color color1 = null;
    King king2 = new King(chessBoard0, color1);
    ChessPiece.Color color3 = king2.getColor();
    king2.setRow(0);
    java.util.ArrayList arrayList6 = king2.legalMoves();
    king2.setColumn(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test388"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = new ChessBoard();
    ChessPiece.Color color3 = null;
    Knight knight4 = new Knight(chessBoard2, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Bishop bishop31 = new Bishop(chessBoard27, color30);
    King king32 = new King(chessBoard16, color30);
    Bishop bishop33 = new Bishop(chessBoard5, color30);
    Rook rook34 = new Rook(chessBoard2, color30);
    Rook rook35 = new Rook(chessBoard0, color30);
    chessBoard0.initialize();
    ChessPiece.Color color37 = null;
    King king38 = new King(chessBoard0, color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test389"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    java.lang.String str3 = knight2.toString();
    java.util.ArrayList arrayList4 = knight2.legalMoves();
    java.util.ArrayList arrayList5 = knight2.legalMoves();
    java.lang.String str6 = knight2.toString();
    java.lang.String str7 = knight2.toString();
    java.util.ArrayList arrayList8 = knight2.legalMoves();
    java.lang.String str9 = knight2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u265E"+ "'", str3.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u265E"+ "'", str6.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\u265E"+ "'", str7.equals("\u265E"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\u265E"+ "'", str9.equals("\u265E"));

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test390"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Knight knight14 = new Knight(chessBoard12, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Pawn pawn18 = new Pawn(chessBoard12, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard19, color30);
    ChessBoard chessBoard32 = null;
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard32, color33);
    Bishop bishop35 = new Bishop(chessBoard19, color33);
    ChessPiece.Color color36 = ChessPiece.Color.BLACK;
    Queen queen37 = new Queen(chessBoard19, color36);
    Queen queen38 = new Queen(chessBoard12, color36);
    Bishop bishop39 = new Bishop(chessBoard0, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessBoard chessBoard43 = null;
    ChessPiece.Color color44 = ChessPiece.Color.WHITE;
    Rook rook45 = new Rook(chessBoard43, color44);
    Pawn pawn46 = new Pawn(chessBoard40, color44);
    pawn46.setRow(1);
    ChessPiece.Color color49 = pawn46.getColor();
    Rook rook50 = new Rook(chessBoard0, color49);
    java.lang.String str51 = rook50.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\u2656"+ "'", str51.equals("\u2656"));

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test391"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    java.lang.String str3 = chessBoard0.toString();
    java.lang.String str4 = chessBoard0.toString();
    java.lang.String str5 = chessBoard0.toString();
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessPiece.Color color9 = ChessPiece.Color.WHITE;
    Bishop bishop10 = new Bishop(chessBoard6, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Rook rook14 = new Rook(chessBoard6, color12);
    Queen queen15 = new Queen(chessBoard0, color12);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    ChessPiece.Color color27 = ChessPiece.Color.WHITE;
    Rook rook28 = new Rook(chessBoard16, color27);
    java.lang.String str29 = chessBoard16.toString();
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Pawn pawn32 = new Pawn(chessBoard30, color31);
    ChessBoard chessBoard33 = new ChessBoard();
    ChessPiece.Color color34 = null;
    Knight knight35 = new Knight(chessBoard33, color34);
    ChessBoard chessBoard36 = null;
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Rook rook38 = new Rook(chessBoard36, color37);
    Pawn pawn39 = new Pawn(chessBoard33, color37);
    Pawn pawn40 = new Pawn(chessBoard30, color37);
    ChessPiece.Color color41 = ChessPiece.Color.WHITE;
    Rook rook42 = new Rook(chessBoard30, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Pawn pawn45 = new Pawn(chessBoard43, color44);
    ChessBoard chessBoard46 = new ChessBoard();
    ChessPiece.Color color47 = null;
    Knight knight48 = new Knight(chessBoard46, color47);
    ChessBoard chessBoard49 = null;
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Rook rook51 = new Rook(chessBoard49, color50);
    Pawn pawn52 = new Pawn(chessBoard46, color50);
    Pawn pawn53 = new Pawn(chessBoard43, color50);
    ChessPiece.Color color54 = ChessPiece.Color.WHITE;
    Rook rook55 = new Rook(chessBoard43, color54);
    Pawn pawn56 = new Pawn(chessBoard30, color54);
    Bishop bishop57 = new Bishop(chessBoard16, color54);
    ChessPiece.Color color58 = bishop57.getColor();
    Bishop bishop59 = new Bishop(chessBoard0, color58);
    java.util.ArrayList arrayList60 = bishop59.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str3.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str4.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str5.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str29.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList60);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test392"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    chessBoard0.initialize();
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    java.lang.String str21 = chessBoard18.toString();
    java.lang.String str22 = chessBoard18.toString();
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Pawn pawn24 = new Pawn(chessBoard18, color23);
    Pawn pawn25 = new Pawn(chessBoard0, color23);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    King king40 = new King(chessBoard26, color36);
    ChessPiece.Color color41 = ChessPiece.Color.BLACK;
    King king42 = new King(chessBoard26, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Knight knight45 = new Knight(chessBoard43, color44);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Bishop bishop47 = new Bishop(chessBoard43, color46);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Pawn pawn50 = new Pawn(chessBoard48, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = null;
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Rook rook56 = new Rook(chessBoard54, color55);
    Pawn pawn57 = new Pawn(chessBoard51, color55);
    Pawn pawn58 = new Pawn(chessBoard48, color55);
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard48, color59);
    ChessBoard chessBoard61 = new ChessBoard();
    ChessPiece.Color color62 = null;
    Pawn pawn63 = new Pawn(chessBoard61, color62);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessBoard chessBoard67 = null;
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Rook rook69 = new Rook(chessBoard67, color68);
    Pawn pawn70 = new Pawn(chessBoard64, color68);
    Pawn pawn71 = new Pawn(chessBoard61, color68);
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard61, color72);
    Pawn pawn74 = new Pawn(chessBoard48, color72);
    Pawn pawn75 = new Pawn(chessBoard43, color72);
    Rook rook76 = new Rook(chessBoard26, color72);
    Knight knight77 = new Knight(chessBoard0, color72);
    ChessPiece.Color color78 = knight77.getColor();
    java.lang.String str79 = knight77.toString();
    java.lang.String str80 = knight77.toString();
    java.lang.String str81 = knight77.toString();
    java.lang.String str82 = knight77.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str21.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str22.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\u2658"+ "'", str79.equals("\u2658"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "\u2658"+ "'", str80.equals("\u2658"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "\u2658"+ "'", str81.equals("\u2658"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "\u2658"+ "'", str82.equals("\u2658"));

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test393"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = ChessPiece.Color.BLACK;
    Bishop bishop14 = new Bishop(chessBoard0, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Queen queen18 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard0, color23);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Pawn pawn40 = new Pawn(chessBoard38, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Knight knight43 = new Knight(chessBoard41, color42);
    ChessBoard chessBoard44 = null;
    ChessPiece.Color color45 = ChessPiece.Color.WHITE;
    Rook rook46 = new Rook(chessBoard44, color45);
    Pawn pawn47 = new Pawn(chessBoard41, color45);
    Pawn pawn48 = new Pawn(chessBoard38, color45);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Knight knight51 = new Knight(chessBoard49, color50);
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Bishop bishop53 = new Bishop(chessBoard49, color52);
    King king54 = new King(chessBoard38, color52);
    Bishop bishop55 = new Bishop(chessBoard27, color52);
    java.lang.String str56 = bishop55.toString();
    ChessPiece.Color color57 = bishop55.getColor();
    Rook rook58 = new Rook(chessBoard0, color57);
    java.lang.String str59 = chessBoard0.toString();
    ChessPiece chessPiece61 = chessBoard0.getPiece("a11");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\u2657"+ "'", str56.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str59.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece61);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test394"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Knight knight30 = new Knight(chessBoard28, color29);
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Bishop bishop32 = new Bishop(chessBoard28, color31);
    King king33 = new King(chessBoard17, color31);
    Knight knight34 = new Knight(chessBoard0, color31);
    ChessBoard chessBoard35 = null;
    ChessBoard chessBoard36 = new ChessBoard();
    java.lang.String str37 = chessBoard36.toString();
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = null;
    King king40 = new King(chessBoard38, color39);
    ChessPiece.Color color41 = king40.getColor();
    king40.setRow(0);
    java.util.ArrayList arrayList44 = king40.legalMoves();
    boolean b46 = chessBoard36.placePiece((ChessPiece)king40, "a1");
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Bishop bishop48 = new Bishop(chessBoard36, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    java.lang.String str50 = chessBoard49.toString();
    ChessBoard chessBoard51 = null;
    ChessPiece.Color color52 = null;
    King king53 = new King(chessBoard51, color52);
    ChessPiece.Color color54 = king53.getColor();
    king53.setRow(0);
    java.util.ArrayList arrayList57 = king53.legalMoves();
    boolean b59 = chessBoard49.placePiece((ChessPiece)king53, "a1");
    ChessPiece.Color color60 = ChessPiece.Color.WHITE;
    Bishop bishop61 = new Bishop(chessBoard49, color60);
    Pawn pawn62 = new Pawn(chessBoard36, color60);
    Rook rook63 = new Rook(chessBoard35, color60);
    Queen queen64 = new Queen(chessBoard0, color60);
    java.util.ArrayList arrayList65 = queen64.legalMoves();
    java.lang.String str66 = queen64.toString();
    java.lang.String str67 = queen64.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str37.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str50.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\u2655"+ "'", str66.equals("\u2655"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "\u2655"+ "'", str67.equals("\u2655"));

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test395"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Rook rook4 = new Rook(chessBoard2, color3);
    rook4.setRow(100);
    java.util.ArrayList arrayList7 = rook4.legalMoves();
    int i8 = rook4.getColumn();
    ChessPiece.Color color9 = rook4.getColor();
    Bishop bishop10 = new Bishop(chessBoard0, color9);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Pawn pawn29 = new Pawn(chessBoard27, color28);
    ChessBoard chessBoard30 = new ChessBoard();
    ChessPiece.Color color31 = null;
    Knight knight32 = new Knight(chessBoard30, color31);
    ChessBoard chessBoard33 = null;
    ChessPiece.Color color34 = ChessPiece.Color.WHITE;
    Rook rook35 = new Rook(chessBoard33, color34);
    Pawn pawn36 = new Pawn(chessBoard30, color34);
    Pawn pawn37 = new Pawn(chessBoard27, color34);
    King king38 = new King(chessBoard22, color34);
    ChessBoard chessBoard39 = new ChessBoard();
    ChessPiece.Color color40 = null;
    Pawn pawn41 = new Pawn(chessBoard39, color40);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Knight knight44 = new Knight(chessBoard42, color43);
    ChessBoard chessBoard45 = null;
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard45, color46);
    Pawn pawn48 = new Pawn(chessBoard42, color46);
    Pawn pawn49 = new Pawn(chessBoard39, color46);
    Bishop bishop50 = new Bishop(chessBoard22, color46);
    Rook rook51 = new Rook(chessBoard11, color46);
    Pawn pawn52 = new Pawn(chessBoard0, color46);
    chessBoard0.initialize();
    // The following exception was thrown during execution in test generation
    try {
      boolean b56 = chessBoard0.move("\u265E", "b1");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test396"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    pawn6.setColumn(0);
    java.util.ArrayList arrayList9 = pawn6.legalMoves();
    java.util.ArrayList arrayList10 = pawn6.legalMoves();
    java.lang.String str11 = pawn6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\u2659"+ "'", str11.equals("\u2659"));

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test397"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = null;
    ChessPiece.Color color4 = ChessPiece.Color.WHITE;
    Rook rook5 = new Rook(chessBoard3, color4);
    Pawn pawn6 = new Pawn(chessBoard0, color4);
    ChessBoard chessBoard7 = new ChessBoard();
    ChessPiece.Color color8 = null;
    Knight knight9 = new Knight(chessBoard7, color8);
    ChessBoard chessBoard10 = null;
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard10, color11);
    Pawn pawn13 = new Pawn(chessBoard7, color11);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessPiece.Color color17 = ChessPiece.Color.WHITE;
    Bishop bishop18 = new Bishop(chessBoard14, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Pawn pawn21 = new Pawn(chessBoard19, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessBoard chessBoard25 = null;
    ChessPiece.Color color26 = ChessPiece.Color.WHITE;
    Rook rook27 = new Rook(chessBoard25, color26);
    Pawn pawn28 = new Pawn(chessBoard22, color26);
    Pawn pawn29 = new Pawn(chessBoard19, color26);
    King king30 = new King(chessBoard14, color26);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessBoard chessBoard37 = null;
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Rook rook39 = new Rook(chessBoard37, color38);
    Pawn pawn40 = new Pawn(chessBoard34, color38);
    Pawn pawn41 = new Pawn(chessBoard31, color38);
    Bishop bishop42 = new Bishop(chessBoard14, color38);
    King king43 = new King(chessBoard7, color38);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessPiece.Color color47 = ChessPiece.Color.WHITE;
    Bishop bishop48 = new Bishop(chessBoard44, color47);
    ChessBoard chessBoard49 = new ChessBoard();
    ChessPiece.Color color50 = null;
    Pawn pawn51 = new Pawn(chessBoard49, color50);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessBoard chessBoard55 = null;
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Rook rook57 = new Rook(chessBoard55, color56);
    Pawn pawn58 = new Pawn(chessBoard52, color56);
    Pawn pawn59 = new Pawn(chessBoard49, color56);
    King king60 = new King(chessBoard44, color56);
    Knight knight61 = new Knight(chessBoard7, color56);
    Pawn pawn62 = new Pawn(chessBoard0, color56);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard63, color74);
    ChessBoard chessBoard76 = new ChessBoard();
    ChessPiece.Color color77 = null;
    Pawn pawn78 = new Pawn(chessBoard76, color77);
    ChessBoard chessBoard79 = new ChessBoard();
    ChessPiece.Color color80 = null;
    Knight knight81 = new Knight(chessBoard79, color80);
    ChessBoard chessBoard82 = null;
    ChessPiece.Color color83 = ChessPiece.Color.WHITE;
    Rook rook84 = new Rook(chessBoard82, color83);
    Pawn pawn85 = new Pawn(chessBoard79, color83);
    Pawn pawn86 = new Pawn(chessBoard76, color83);
    ChessPiece.Color color87 = ChessPiece.Color.WHITE;
    Rook rook88 = new Rook(chessBoard76, color87);
    Pawn pawn89 = new Pawn(chessBoard63, color87);
    Bishop bishop90 = new Bishop(chessBoard0, color87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color87);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test398"); }


    ChessBoard chessBoard0 = new ChessBoard();
    java.lang.String str1 = chessBoard0.toString();
    ChessBoard chessBoard2 = null;
    ChessPiece.Color color3 = null;
    King king4 = new King(chessBoard2, color3);
    ChessPiece.Color color5 = king4.getColor();
    king4.setRow(0);
    java.util.ArrayList arrayList8 = king4.legalMoves();
    boolean b10 = chessBoard0.placePiece((ChessPiece)king4, "a1");
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Bishop bishop12 = new Bishop(chessBoard0, color11);
    ChessBoard chessBoard13 = new ChessBoard();
    ChessPiece.Color color14 = null;
    Pawn pawn15 = new Pawn(chessBoard13, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Knight knight18 = new Knight(chessBoard16, color17);
    ChessBoard chessBoard19 = null;
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Rook rook21 = new Rook(chessBoard19, color20);
    Pawn pawn22 = new Pawn(chessBoard16, color20);
    Pawn pawn23 = new Pawn(chessBoard13, color20);
    ChessBoard chessBoard24 = new ChessBoard();
    ChessPiece.Color color25 = null;
    Pawn pawn26 = new Pawn(chessBoard24, color25);
    ChessBoard chessBoard27 = new ChessBoard();
    ChessPiece.Color color28 = null;
    Knight knight29 = new Knight(chessBoard27, color28);
    ChessBoard chessBoard30 = null;
    ChessPiece.Color color31 = ChessPiece.Color.WHITE;
    Rook rook32 = new Rook(chessBoard30, color31);
    Pawn pawn33 = new Pawn(chessBoard27, color31);
    Pawn pawn34 = new Pawn(chessBoard24, color31);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Knight knight37 = new Knight(chessBoard35, color36);
    ChessPiece.Color color38 = ChessPiece.Color.WHITE;
    Bishop bishop39 = new Bishop(chessBoard35, color38);
    King king40 = new King(chessBoard24, color38);
    Bishop bishop41 = new Bishop(chessBoard13, color38);
    ChessBoard chessBoard42 = new ChessBoard();
    ChessPiece.Color color43 = null;
    Pawn pawn44 = new Pawn(chessBoard42, color43);
    ChessBoard chessBoard45 = new ChessBoard();
    ChessPiece.Color color46 = null;
    Knight knight47 = new Knight(chessBoard45, color46);
    ChessBoard chessBoard48 = null;
    ChessPiece.Color color49 = ChessPiece.Color.WHITE;
    Rook rook50 = new Rook(chessBoard48, color49);
    Pawn pawn51 = new Pawn(chessBoard45, color49);
    Pawn pawn52 = new Pawn(chessBoard42, color49);
    ChessBoard chessBoard53 = new ChessBoard();
    ChessPiece.Color color54 = null;
    Knight knight55 = new Knight(chessBoard53, color54);
    ChessPiece.Color color56 = ChessPiece.Color.WHITE;
    Bishop bishop57 = new Bishop(chessBoard53, color56);
    King king58 = new King(chessBoard42, color56);
    Knight knight59 = new Knight(chessBoard13, color56);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Pawn pawn62 = new Pawn(chessBoard60, color61);
    java.lang.String str63 = chessBoard60.toString();
    java.lang.String str64 = chessBoard60.toString();
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Pawn pawn66 = new Pawn(chessBoard60, color65);
    King king67 = new King(chessBoard13, color65);
    Bishop bishop68 = new Bishop(chessBoard0, color65);
    boolean b71 = chessBoard0.move("a1", " 57");
    java.lang.String str72 = chessBoard0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str1.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str63.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str64.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265A \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str72.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265A \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test399"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessPiece.Color color11 = ChessPiece.Color.WHITE;
    Rook rook12 = new Rook(chessBoard0, color11);
    ChessPiece.Color color13 = ChessPiece.Color.BLACK;
    Bishop bishop14 = new Bishop(chessBoard0, color13);
    ChessBoard chessBoard15 = null;
    ChessPiece.Color color16 = ChessPiece.Color.WHITE;
    Rook rook17 = new Rook(chessBoard15, color16);
    Queen queen18 = new Queen(chessBoard0, color16);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard0, color23);
    java.lang.String str27 = pawn26.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "a1"+ "'", str27.equals("a1"));

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test400"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Knight knight13 = new Knight(chessBoard11, color12);
    ChessPiece.Color color14 = ChessPiece.Color.WHITE;
    Bishop bishop15 = new Bishop(chessBoard11, color14);
    ChessBoard chessBoard16 = new ChessBoard();
    ChessPiece.Color color17 = null;
    Pawn pawn18 = new Pawn(chessBoard16, color17);
    ChessBoard chessBoard19 = new ChessBoard();
    ChessPiece.Color color20 = null;
    Knight knight21 = new Knight(chessBoard19, color20);
    ChessBoard chessBoard22 = null;
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Rook rook24 = new Rook(chessBoard22, color23);
    Pawn pawn25 = new Pawn(chessBoard19, color23);
    Pawn pawn26 = new Pawn(chessBoard16, color23);
    King king27 = new King(chessBoard11, color23);
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    Bishop bishop39 = new Bishop(chessBoard11, color35);
    Rook rook40 = new Rook(chessBoard0, color35);
    int i41 = rook40.getColumn();
    java.util.ArrayList arrayList42 = rook40.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList42);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test401"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Pawn pawn19 = new Pawn(chessBoard17, color18);
    ChessBoard chessBoard20 = new ChessBoard();
    ChessPiece.Color color21 = null;
    Knight knight22 = new Knight(chessBoard20, color21);
    ChessBoard chessBoard23 = null;
    ChessPiece.Color color24 = ChessPiece.Color.WHITE;
    Rook rook25 = new Rook(chessBoard23, color24);
    Pawn pawn26 = new Pawn(chessBoard20, color24);
    Pawn pawn27 = new Pawn(chessBoard17, color24);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Rook rook29 = new Rook(chessBoard17, color28);
    King king30 = new King(chessBoard0, color28);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Pawn pawn33 = new Pawn(chessBoard31, color32);
    java.lang.String str34 = chessBoard31.toString();
    java.lang.String str35 = chessBoard31.toString();
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Pawn pawn37 = new Pawn(chessBoard31, color36);
    ChessBoard chessBoard38 = null;
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard38, color39);
    ChessPiece.Color color41 = rook40.getColor();
    Bishop bishop42 = new Bishop(chessBoard31, color41);
    Bishop bishop43 = new Bishop(chessBoard0, color41);
    bishop43.setRow((-1));
    java.util.ArrayList arrayList46 = bishop43.legalMoves();
    java.lang.String str47 = bishop43.toString();
    java.lang.String str48 = bishop43.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str34.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str35.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\u2657"+ "'", str47.equals("\u2657"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\u2657"+ "'", str48.equals("\u2657"));

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test402"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    King king14 = new King(chessBoard0, color10);
    ChessPiece.Color color15 = ChessPiece.Color.BLACK;
    King king16 = new King(chessBoard0, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessPiece.Color color20 = ChessPiece.Color.WHITE;
    Bishop bishop21 = new Bishop(chessBoard17, color20);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Pawn pawn24 = new Pawn(chessBoard22, color23);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessBoard chessBoard28 = null;
    ChessPiece.Color color29 = ChessPiece.Color.WHITE;
    Rook rook30 = new Rook(chessBoard28, color29);
    Pawn pawn31 = new Pawn(chessBoard25, color29);
    Pawn pawn32 = new Pawn(chessBoard22, color29);
    ChessPiece.Color color33 = ChessPiece.Color.WHITE;
    Rook rook34 = new Rook(chessBoard22, color33);
    ChessBoard chessBoard35 = new ChessBoard();
    ChessPiece.Color color36 = null;
    Pawn pawn37 = new Pawn(chessBoard35, color36);
    ChessBoard chessBoard38 = new ChessBoard();
    ChessPiece.Color color39 = null;
    Knight knight40 = new Knight(chessBoard38, color39);
    ChessBoard chessBoard41 = null;
    ChessPiece.Color color42 = ChessPiece.Color.WHITE;
    Rook rook43 = new Rook(chessBoard41, color42);
    Pawn pawn44 = new Pawn(chessBoard38, color42);
    Pawn pawn45 = new Pawn(chessBoard35, color42);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Rook rook47 = new Rook(chessBoard35, color46);
    Pawn pawn48 = new Pawn(chessBoard22, color46);
    Pawn pawn49 = new Pawn(chessBoard17, color46);
    Rook rook50 = new Rook(chessBoard0, color46);
    ChessBoard chessBoard51 = new ChessBoard();
    java.lang.String str52 = chessBoard51.toString();
    ChessBoard chessBoard53 = null;
    ChessPiece.Color color54 = ChessPiece.Color.WHITE;
    Rook rook55 = new Rook(chessBoard53, color54);
    rook55.setRow(100);
    java.util.ArrayList arrayList58 = rook55.legalMoves();
    int i59 = rook55.getColumn();
    ChessPiece.Color color60 = rook55.getColor();
    Bishop bishop61 = new Bishop(chessBoard51, color60);
    ChessBoard chessBoard62 = new ChessBoard();
    ChessPiece.Color color63 = null;
    Knight knight64 = new Knight(chessBoard62, color63);
    ChessPiece.Color color65 = ChessPiece.Color.WHITE;
    Bishop bishop66 = new Bishop(chessBoard62, color65);
    Bishop bishop67 = new Bishop(chessBoard51, color65);
    Knight knight68 = new Knight(chessBoard0, color65);
    java.lang.String str69 = chessBoard0.toString();
    chessBoard0.initialize();
    // The following exception was thrown during execution in test generation
    try {
      ChessPiece chessPiece72 = chessBoard0.getPiece("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u2502 \u265C \u2502 \u265E \u2502 \u265D \u2502 \u265B \u2502 \u265A \u2502 \u265D \u2502 \u265E \u2502 \u265C \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502 \u265F \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502 \u2659 \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u2502 \u2656 \u2502 \u2658 \u2502 \u2657 \u2502 \u2655 \u2502 \u2654 \u2502 \u2657 \u2502 \u2658 \u2502 \u2656 \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str52.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str69.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test403"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessPiece.Color color3 = ChessPiece.Color.WHITE;
    Bishop bishop4 = new Bishop(chessBoard0, color3);
    ChessBoard chessBoard5 = new ChessBoard();
    ChessPiece.Color color6 = null;
    Pawn pawn7 = new Pawn(chessBoard5, color6);
    ChessBoard chessBoard8 = new ChessBoard();
    ChessPiece.Color color9 = null;
    Knight knight10 = new Knight(chessBoard8, color9);
    ChessBoard chessBoard11 = null;
    ChessPiece.Color color12 = ChessPiece.Color.WHITE;
    Rook rook13 = new Rook(chessBoard11, color12);
    Pawn pawn14 = new Pawn(chessBoard8, color12);
    Pawn pawn15 = new Pawn(chessBoard5, color12);
    King king16 = new King(chessBoard0, color12);
    chessBoard0.initialize();
    ChessBoard chessBoard18 = new ChessBoard();
    ChessPiece.Color color19 = null;
    Pawn pawn20 = new Pawn(chessBoard18, color19);
    java.lang.String str21 = chessBoard18.toString();
    java.lang.String str22 = chessBoard18.toString();
    ChessPiece.Color color23 = ChessPiece.Color.WHITE;
    Pawn pawn24 = new Pawn(chessBoard18, color23);
    Pawn pawn25 = new Pawn(chessBoard0, color23);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    King king40 = new King(chessBoard26, color36);
    ChessPiece.Color color41 = ChessPiece.Color.BLACK;
    King king42 = new King(chessBoard26, color41);
    ChessBoard chessBoard43 = new ChessBoard();
    ChessPiece.Color color44 = null;
    Knight knight45 = new Knight(chessBoard43, color44);
    ChessPiece.Color color46 = ChessPiece.Color.WHITE;
    Bishop bishop47 = new Bishop(chessBoard43, color46);
    ChessBoard chessBoard48 = new ChessBoard();
    ChessPiece.Color color49 = null;
    Pawn pawn50 = new Pawn(chessBoard48, color49);
    ChessBoard chessBoard51 = new ChessBoard();
    ChessPiece.Color color52 = null;
    Knight knight53 = new Knight(chessBoard51, color52);
    ChessBoard chessBoard54 = null;
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Rook rook56 = new Rook(chessBoard54, color55);
    Pawn pawn57 = new Pawn(chessBoard51, color55);
    Pawn pawn58 = new Pawn(chessBoard48, color55);
    ChessPiece.Color color59 = ChessPiece.Color.WHITE;
    Rook rook60 = new Rook(chessBoard48, color59);
    ChessBoard chessBoard61 = new ChessBoard();
    ChessPiece.Color color62 = null;
    Pawn pawn63 = new Pawn(chessBoard61, color62);
    ChessBoard chessBoard64 = new ChessBoard();
    ChessPiece.Color color65 = null;
    Knight knight66 = new Knight(chessBoard64, color65);
    ChessBoard chessBoard67 = null;
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Rook rook69 = new Rook(chessBoard67, color68);
    Pawn pawn70 = new Pawn(chessBoard64, color68);
    Pawn pawn71 = new Pawn(chessBoard61, color68);
    ChessPiece.Color color72 = ChessPiece.Color.WHITE;
    Rook rook73 = new Rook(chessBoard61, color72);
    Pawn pawn74 = new Pawn(chessBoard48, color72);
    Pawn pawn75 = new Pawn(chessBoard43, color72);
    Rook rook76 = new Rook(chessBoard26, color72);
    Knight knight77 = new Knight(chessBoard0, color72);
    ChessPiece.Color color78 = knight77.getColor();
    knight77.setColumn(10);
    java.lang.String str81 = knight77.toString();
    int i82 = knight77.getColumn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str21.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str22.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "\u2658"+ "'", str81.equals("\u2658"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 10);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test404"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Knight knight2 = new Knight(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Pawn pawn5 = new Pawn(chessBoard3, color4);
    ChessBoard chessBoard6 = new ChessBoard();
    ChessPiece.Color color7 = null;
    Knight knight8 = new Knight(chessBoard6, color7);
    ChessBoard chessBoard9 = null;
    ChessPiece.Color color10 = ChessPiece.Color.WHITE;
    Rook rook11 = new Rook(chessBoard9, color10);
    Pawn pawn12 = new Pawn(chessBoard6, color10);
    Pawn pawn13 = new Pawn(chessBoard3, color10);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessBoard chessBoard25 = new ChessBoard();
    ChessPiece.Color color26 = null;
    Knight knight27 = new Knight(chessBoard25, color26);
    ChessPiece.Color color28 = ChessPiece.Color.WHITE;
    Bishop bishop29 = new Bishop(chessBoard25, color28);
    King king30 = new King(chessBoard14, color28);
    Bishop bishop31 = new Bishop(chessBoard3, color28);
    Rook rook32 = new Rook(chessBoard0, color28);
    java.util.ArrayList arrayList33 = rook32.legalMoves();
    java.util.ArrayList arrayList34 = rook32.legalMoves();
    java.util.ArrayList arrayList35 = rook32.legalMoves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList35);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test405"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard63, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    King king77 = new King(chessBoard0, color74);
    chessBoard0.initialize();
    ChessBoard chessBoard79 = new ChessBoard();
    java.lang.String str80 = chessBoard79.toString();
    ChessBoard chessBoard81 = null;
    ChessPiece.Color color82 = ChessPiece.Color.WHITE;
    Rook rook83 = new Rook(chessBoard81, color82);
    rook83.setRow(100);
    java.util.ArrayList arrayList86 = rook83.legalMoves();
    int i87 = rook83.getColumn();
    ChessPiece.Color color88 = rook83.getColor();
    Bishop bishop89 = new Bishop(chessBoard79, color88);
    Rook rook90 = new Rook(chessBoard0, color88);
    java.lang.String str91 = rook90.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str80.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "\u2656"+ "'", str91.equals("\u2656"));

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test406"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = new ChessBoard();
    ChessPiece.Color color64 = null;
    Pawn pawn65 = new Pawn(chessBoard63, color64);
    ChessBoard chessBoard66 = new ChessBoard();
    ChessPiece.Color color67 = null;
    Knight knight68 = new Knight(chessBoard66, color67);
    ChessBoard chessBoard69 = null;
    ChessPiece.Color color70 = ChessPiece.Color.WHITE;
    Rook rook71 = new Rook(chessBoard69, color70);
    Pawn pawn72 = new Pawn(chessBoard66, color70);
    Pawn pawn73 = new Pawn(chessBoard63, color70);
    ChessPiece.Color color74 = ChessPiece.Color.WHITE;
    Rook rook75 = new Rook(chessBoard63, color74);
    Bishop bishop76 = new Bishop(chessBoard60, color74);
    King king77 = new King(chessBoard0, color74);
    ChessBoard chessBoard78 = new ChessBoard();
    ChessPiece.Color color79 = null;
    Pawn pawn80 = new Pawn(chessBoard78, color79);
    ChessBoard chessBoard81 = new ChessBoard();
    ChessPiece.Color color82 = null;
    Knight knight83 = new Knight(chessBoard81, color82);
    ChessBoard chessBoard84 = null;
    ChessPiece.Color color85 = ChessPiece.Color.WHITE;
    Rook rook86 = new Rook(chessBoard84, color85);
    Pawn pawn87 = new Pawn(chessBoard81, color85);
    Pawn pawn88 = new Pawn(chessBoard78, color85);
    ChessPiece.Color color89 = ChessPiece.Color.WHITE;
    Rook rook90 = new Rook(chessBoard78, color89);
    ChessBoard chessBoard91 = null;
    ChessPiece.Color color92 = ChessPiece.Color.WHITE;
    Rook rook93 = new Rook(chessBoard91, color92);
    Bishop bishop94 = new Bishop(chessBoard78, color92);
    ChessPiece.Color color95 = ChessPiece.Color.BLACK;
    Queen queen96 = new Queen(chessBoard78, color95);
    Pawn pawn97 = new Pawn(chessBoard0, color95);
    ChessPiece.Color color98 = pawn97.getColor();
    java.lang.String str99 = pawn97.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "\u265F"+ "'", str99.equals("\u265F"));

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test407"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    chessBoard0.initialize();
    ChessBoard chessBoard12 = new ChessBoard();
    ChessPiece.Color color13 = null;
    Pawn pawn14 = new Pawn(chessBoard12, color13);
    ChessBoard chessBoard15 = new ChessBoard();
    ChessPiece.Color color16 = null;
    Knight knight17 = new Knight(chessBoard15, color16);
    ChessBoard chessBoard18 = null;
    ChessPiece.Color color19 = ChessPiece.Color.WHITE;
    Rook rook20 = new Rook(chessBoard18, color19);
    Pawn pawn21 = new Pawn(chessBoard15, color19);
    Pawn pawn22 = new Pawn(chessBoard12, color19);
    ChessBoard chessBoard23 = new ChessBoard();
    ChessPiece.Color color24 = null;
    Pawn pawn25 = new Pawn(chessBoard23, color24);
    ChessBoard chessBoard26 = new ChessBoard();
    ChessPiece.Color color27 = null;
    Knight knight28 = new Knight(chessBoard26, color27);
    ChessBoard chessBoard29 = null;
    ChessPiece.Color color30 = ChessPiece.Color.WHITE;
    Rook rook31 = new Rook(chessBoard29, color30);
    Pawn pawn32 = new Pawn(chessBoard26, color30);
    Pawn pawn33 = new Pawn(chessBoard23, color30);
    ChessBoard chessBoard34 = new ChessBoard();
    ChessPiece.Color color35 = null;
    Knight knight36 = new Knight(chessBoard34, color35);
    ChessPiece.Color color37 = ChessPiece.Color.WHITE;
    Bishop bishop38 = new Bishop(chessBoard34, color37);
    King king39 = new King(chessBoard23, color37);
    Bishop bishop40 = new Bishop(chessBoard12, color37);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessBoard chessBoard52 = new ChessBoard();
    ChessPiece.Color color53 = null;
    Knight knight54 = new Knight(chessBoard52, color53);
    ChessPiece.Color color55 = ChessPiece.Color.WHITE;
    Bishop bishop56 = new Bishop(chessBoard52, color55);
    King king57 = new King(chessBoard41, color55);
    Knight knight58 = new Knight(chessBoard12, color55);
    Pawn pawn59 = new Pawn(chessBoard0, color55);
    java.util.ArrayList arrayList60 = pawn59.legalMoves();
    java.lang.String str61 = pawn59.getPosition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "a1"+ "'", str61.equals("a1"));

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test408"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessBoard chessBoard1 = new ChessBoard();
    ChessPiece.Color color2 = null;
    Pawn pawn3 = new Pawn(chessBoard1, color2);
    ChessBoard chessBoard4 = new ChessBoard();
    ChessPiece.Color color5 = null;
    Knight knight6 = new Knight(chessBoard4, color5);
    ChessBoard chessBoard7 = null;
    ChessPiece.Color color8 = ChessPiece.Color.WHITE;
    Rook rook9 = new Rook(chessBoard7, color8);
    Pawn pawn10 = new Pawn(chessBoard4, color8);
    Pawn pawn11 = new Pawn(chessBoard1, color8);
    Knight knight12 = new Knight(chessBoard0, color8);
    chessBoard0.initialize();
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Pawn pawn16 = new Pawn(chessBoard14, color15);
    ChessBoard chessBoard17 = new ChessBoard();
    ChessPiece.Color color18 = null;
    Knight knight19 = new Knight(chessBoard17, color18);
    ChessBoard chessBoard20 = null;
    ChessPiece.Color color21 = ChessPiece.Color.WHITE;
    Rook rook22 = new Rook(chessBoard20, color21);
    Pawn pawn23 = new Pawn(chessBoard17, color21);
    Pawn pawn24 = new Pawn(chessBoard14, color21);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Rook rook26 = new Rook(chessBoard14, color25);
    java.lang.String str27 = chessBoard14.toString();
    ChessBoard chessBoard28 = new ChessBoard();
    ChessPiece.Color color29 = null;
    Pawn pawn30 = new Pawn(chessBoard28, color29);
    ChessBoard chessBoard31 = new ChessBoard();
    ChessPiece.Color color32 = null;
    Knight knight33 = new Knight(chessBoard31, color32);
    ChessBoard chessBoard34 = null;
    ChessPiece.Color color35 = ChessPiece.Color.WHITE;
    Rook rook36 = new Rook(chessBoard34, color35);
    Pawn pawn37 = new Pawn(chessBoard31, color35);
    Pawn pawn38 = new Pawn(chessBoard28, color35);
    ChessPiece.Color color39 = ChessPiece.Color.WHITE;
    Rook rook40 = new Rook(chessBoard28, color39);
    ChessBoard chessBoard41 = new ChessBoard();
    ChessPiece.Color color42 = null;
    Pawn pawn43 = new Pawn(chessBoard41, color42);
    ChessBoard chessBoard44 = new ChessBoard();
    ChessPiece.Color color45 = null;
    Knight knight46 = new Knight(chessBoard44, color45);
    ChessBoard chessBoard47 = null;
    ChessPiece.Color color48 = ChessPiece.Color.WHITE;
    Rook rook49 = new Rook(chessBoard47, color48);
    Pawn pawn50 = new Pawn(chessBoard44, color48);
    Pawn pawn51 = new Pawn(chessBoard41, color48);
    ChessPiece.Color color52 = ChessPiece.Color.WHITE;
    Rook rook53 = new Rook(chessBoard41, color52);
    Pawn pawn54 = new Pawn(chessBoard28, color52);
    Bishop bishop55 = new Bishop(chessBoard14, color52);
    Knight knight56 = new Knight(chessBoard0, color52);
    ChessBoard chessBoard57 = new ChessBoard();
    ChessPiece.Color color58 = null;
    Pawn pawn59 = new Pawn(chessBoard57, color58);
    ChessBoard chessBoard60 = new ChessBoard();
    ChessPiece.Color color61 = null;
    Knight knight62 = new Knight(chessBoard60, color61);
    ChessBoard chessBoard63 = null;
    ChessPiece.Color color64 = ChessPiece.Color.WHITE;
    Rook rook65 = new Rook(chessBoard63, color64);
    Pawn pawn66 = new Pawn(chessBoard60, color64);
    Pawn pawn67 = new Pawn(chessBoard57, color64);
    ChessPiece.Color color68 = ChessPiece.Color.WHITE;
    Rook rook69 = new Rook(chessBoard57, color68);
    ChessBoard chessBoard70 = new ChessBoard();
    ChessPiece.Color color71 = null;
    Pawn pawn72 = new Pawn(chessBoard70, color71);
    ChessBoard chessBoard73 = new ChessBoard();
    ChessPiece.Color color74 = null;
    Knight knight75 = new Knight(chessBoard73, color74);
    ChessBoard chessBoard76 = null;
    ChessPiece.Color color77 = ChessPiece.Color.WHITE;
    Rook rook78 = new Rook(chessBoard76, color77);
    Pawn pawn79 = new Pawn(chessBoard73, color77);
    Pawn pawn80 = new Pawn(chessBoard70, color77);
    ChessPiece.Color color81 = ChessPiece.Color.WHITE;
    Rook rook82 = new Rook(chessBoard70, color81);
    Pawn pawn83 = new Pawn(chessBoard57, color81);
    java.lang.String str84 = pawn83.toString();
    java.lang.String str85 = pawn83.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b87 = chessBoard0.placePiece((ChessPiece)pawn83, "\u2658");
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str27.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "\u2659"+ "'", str84.equals("\u2659"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "\u2659"+ "'", str85.equals("\u2659"));

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test409"); }


    ChessBoard chessBoard0 = new ChessBoard();
    ChessPiece.Color color1 = null;
    Pawn pawn2 = new Pawn(chessBoard0, color1);
    ChessBoard chessBoard3 = new ChessBoard();
    ChessPiece.Color color4 = null;
    Knight knight5 = new Knight(chessBoard3, color4);
    ChessBoard chessBoard6 = null;
    ChessPiece.Color color7 = ChessPiece.Color.WHITE;
    Rook rook8 = new Rook(chessBoard6, color7);
    Pawn pawn9 = new Pawn(chessBoard3, color7);
    Pawn pawn10 = new Pawn(chessBoard0, color7);
    ChessBoard chessBoard11 = new ChessBoard();
    ChessPiece.Color color12 = null;
    Pawn pawn13 = new Pawn(chessBoard11, color12);
    ChessBoard chessBoard14 = new ChessBoard();
    ChessPiece.Color color15 = null;
    Knight knight16 = new Knight(chessBoard14, color15);
    ChessBoard chessBoard17 = null;
    ChessPiece.Color color18 = ChessPiece.Color.WHITE;
    Rook rook19 = new Rook(chessBoard17, color18);
    Pawn pawn20 = new Pawn(chessBoard14, color18);
    Pawn pawn21 = new Pawn(chessBoard11, color18);
    ChessBoard chessBoard22 = new ChessBoard();
    ChessPiece.Color color23 = null;
    Knight knight24 = new Knight(chessBoard22, color23);
    ChessPiece.Color color25 = ChessPiece.Color.WHITE;
    Bishop bishop26 = new Bishop(chessBoard22, color25);
    King king27 = new King(chessBoard11, color25);
    Bishop bishop28 = new Bishop(chessBoard0, color25);
    ChessBoard chessBoard29 = new ChessBoard();
    ChessPiece.Color color30 = null;
    Pawn pawn31 = new Pawn(chessBoard29, color30);
    ChessBoard chessBoard32 = new ChessBoard();
    ChessPiece.Color color33 = null;
    Knight knight34 = new Knight(chessBoard32, color33);
    ChessBoard chessBoard35 = null;
    ChessPiece.Color color36 = ChessPiece.Color.WHITE;
    Rook rook37 = new Rook(chessBoard35, color36);
    Pawn pawn38 = new Pawn(chessBoard32, color36);
    Pawn pawn39 = new Pawn(chessBoard29, color36);
    ChessBoard chessBoard40 = new ChessBoard();
    ChessPiece.Color color41 = null;
    Knight knight42 = new Knight(chessBoard40, color41);
    ChessPiece.Color color43 = ChessPiece.Color.WHITE;
    Bishop bishop44 = new Bishop(chessBoard40, color43);
    King king45 = new King(chessBoard29, color43);
    Knight knight46 = new Knight(chessBoard0, color43);
    ChessBoard chessBoard47 = new ChessBoard();
    ChessPiece.Color color48 = null;
    Knight knight49 = new Knight(chessBoard47, color48);
    ChessPiece.Color color50 = ChessPiece.Color.WHITE;
    Bishop bishop51 = new Bishop(chessBoard47, color50);
    Pawn pawn52 = new Pawn(chessBoard0, color50);
    java.lang.String str53 = chessBoard0.toString();
    ChessPiece chessPiece55 = chessBoard0.getPiece(" 1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"+ "'", str53.equals("\u250C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u252C\u2500\u3000\u2500\u2510\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u2502\n\u251C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u253C\u2500\u3000\u2500\u2524\n\u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u3000 B \u3000 W \u2502\n\u2514\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2534\u2500\u3000\u2500\u2518"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chessPiece55);

  }

}
